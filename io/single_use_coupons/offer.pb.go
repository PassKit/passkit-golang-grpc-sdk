//*
// Offer holds the offer details, redemption settings and before & after-redeem template designs (Apple Wallet & Google Pay designs) for the Coupon Offer.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/single_use_coupons/offer.proto

package single_use_coupons

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CouponExpiryType int32

const (
	CouponExpiryType_EXPIRY_DO_NOT_USE CouponExpiryType = 0
	// The system will set the coupon expiry based to the campaign end date (default).
	CouponExpiryType_AUTO_EXPIRE_OFFER_END_DATE CouponExpiryType = 1
	// The system will set the coupon expiry based to the redemption end date.
	CouponExpiryType_AUTO_EXPIRE_REDEMPTION_END_DATE CouponExpiryType = 2
	// The system will calculate the expiry date based the number of days after the digital coupon is issued.
	// The calculated date needs to be within range of the campaign date rules. For example, if issue date + EXPIRE_AFTER_X_DAYS is greater than the campaign end date, it will default to the campaign end date.
	// The expiry date will be based on your timezone. The digital card will expire at 23:59:59 of set date in fixed timezone.
	CouponExpiryType_EXPIRE_AFTER_X_DAYS CouponExpiryType = 3
	// If you want to set the expiry date for each individual coupon when the coupon is issued, you can use this expiry type.
	// You can set expiry date and time in fixed timezone on the coupon record.
	// The date needs to be within range of the campaign date rules, otherwise the system will return an error.
	CouponExpiryType_EXPIRE_ON_VARIABLE_DATE_TIME CouponExpiryType = 4
)

// Enum value maps for CouponExpiryType.
var (
	CouponExpiryType_name = map[int32]string{
		0: "EXPIRY_DO_NOT_USE",
		1: "AUTO_EXPIRE_OFFER_END_DATE",
		2: "AUTO_EXPIRE_REDEMPTION_END_DATE",
		3: "EXPIRE_AFTER_X_DAYS",
		4: "EXPIRE_ON_VARIABLE_DATE_TIME",
	}
	CouponExpiryType_value = map[string]int32{
		"EXPIRY_DO_NOT_USE":               0,
		"AUTO_EXPIRE_OFFER_END_DATE":      1,
		"AUTO_EXPIRE_REDEMPTION_END_DATE": 2,
		"EXPIRE_AFTER_X_DAYS":             3,
		"EXPIRE_ON_VARIABLE_DATE_TIME":    4,
	}
)

func (x CouponExpiryType) Enum() *CouponExpiryType {
	p := new(CouponExpiryType)
	*p = x
	return p
}

func (x CouponExpiryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CouponExpiryType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_single_use_coupons_offer_proto_enumTypes[0].Descriptor()
}

func (CouponExpiryType) Type() protoreflect.EnumType {
	return &file_io_single_use_coupons_offer_proto_enumTypes[0]
}

func (x CouponExpiryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CouponExpiryType.Descriptor instead.
func (CouponExpiryType) EnumDescriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{0}
}

type RedemptionType int32

const (
	// Zero index should not be used
	RedemptionType_REDEMPTION_TYPE_DO_NOT_USE RedemptionType = 0
	// Coupons are always redeemed via API (default). This method is used by POS integrations, but is also be used by the PassKit scanning app.
	RedemptionType_REDEMPTION_TYPE_API RedemptionType = 1
	// Coupons can be redeemed by the coupon holder (i.e. the customer) by visiting a redemption URL rendered on the coupon.
	// The coupon will redeem upon the link being visited.
	RedemptionType_REDEMPTION_TYPE_CUSTOMER_INITIATED RedemptionType = 2
	// This will present a fixed code to the customer after they visit the redemption URL, and then auto redeem the coupon. The customer can then present this fixed-code to a member of staff.
	RedemptionType_REDEMPTION_TYPE_CUSTOMER_INITIATED_CODE_FIXED RedemptionType = 3
	// After visiting the redemption URL, a member of staff provides the customer with a redemption-code they need to enter. After entering the code, the coupon with redeem.
	RedemptionType_REDEMPTION_TYPE_CUSTOMER_INITIATED_CODE_PROVIDED_ON_REDEEM RedemptionType = 4
)

// Enum value maps for RedemptionType.
var (
	RedemptionType_name = map[int32]string{
		0: "REDEMPTION_TYPE_DO_NOT_USE",
		1: "REDEMPTION_TYPE_API",
		2: "REDEMPTION_TYPE_CUSTOMER_INITIATED",
		3: "REDEMPTION_TYPE_CUSTOMER_INITIATED_CODE_FIXED",
		4: "REDEMPTION_TYPE_CUSTOMER_INITIATED_CODE_PROVIDED_ON_REDEEM",
	}
	RedemptionType_value = map[string]int32{
		"REDEMPTION_TYPE_DO_NOT_USE":                                 0,
		"REDEMPTION_TYPE_API":                                        1,
		"REDEMPTION_TYPE_CUSTOMER_INITIATED":                         2,
		"REDEMPTION_TYPE_CUSTOMER_INITIATED_CODE_FIXED":              3,
		"REDEMPTION_TYPE_CUSTOMER_INITIATED_CODE_PROVIDED_ON_REDEEM": 4,
	}
)

func (x RedemptionType) Enum() *RedemptionType {
	p := new(RedemptionType)
	*p = x
	return p
}

func (x RedemptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedemptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_single_use_coupons_offer_proto_enumTypes[1].Descriptor()
}

func (RedemptionType) Type() protoreflect.EnumType {
	return &file_io_single_use_coupons_offer_proto_enumTypes[1]
}

func (x RedemptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedemptionType.Descriptor instead.
func (RedemptionType) EnumDescriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{1}
}

// The Coupon Offer Details.
type CouponOffer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated offer id (22 characters).
	// @tag: validateGeneric:"required" validateCreate:"-" validateUpdate:"required"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required" validateCreate:"-" validateUpdate:"required"`
	// The offer title; will be shown on the enrolment page.
	// @tag: validateGeneric:"omitempty,max=60" validateCreate:"required,max=60" validateUpdate:"required,max=60"
	OfferTitle string `protobuf:"bytes,2,opt,name=offerTitle,proto3" json:"offerTitle,omitempty" validateGeneric:"omitempty,max=60" validateCreate:"required,max=60" validateUpdate:"required,max=60"`
	// Localized offer title.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedOfferTitle *io.LocalizedString `protobuf:"bytes,3,opt,name=localizedOfferTitle,proto3" json:"localizedOfferTitle,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The offer short title.
	// @tag: validateGeneric:"omitempty,max=20" validateCreate:"required,max=20" validateUpdate:"required,max=20"
	OfferShortTitle string `protobuf:"bytes,4,opt,name=offerShortTitle,proto3" json:"offerShortTitle,omitempty" validateGeneric:"omitempty,max=20" validateCreate:"required,max=20" validateUpdate:"required,max=20"`
	// Localized offer short title.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedOfferShortTitle *io.LocalizedString `protobuf:"bytes,5,opt,name=localizedOfferShortTitle,proto3" json:"localizedOfferShortTitle,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The offer details; will be shown on the enrolment page.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	OfferDetails string `protobuf:"bytes,6,opt,name=offerDetails,proto3" json:"offerDetails,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// Localized offer details.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedOfferDetails *io.LocalizedString `protobuf:"bytes,7,opt,name=localizedOfferDetails,proto3" json:"localizedOfferDetails,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The offer fine print.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	OfferFinePrint string `protobuf:"bytes,8,opt,name=offerFinePrint,proto3" json:"offerFinePrint,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized offer fine print.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedOfferFinePrint *io.LocalizedString `protobuf:"bytes,9,opt,name=localizedOfferFinePrint,proto3" json:"localizedOfferFinePrint,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The pass template ID that coupons will use when in unredeemed state. All coupons for the offer are issued in unredeemed state.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"
	BeforeRedeemPassTemplateId string `protobuf:"bytes,10,opt,name=beforeRedeemPassTemplateId,proto3" json:"beforeRedeemPassTemplateId,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"`
	// Optional pass template ID that coupons will use when switched to redeemed state.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	AfterRedeemPassTemplateId string `protobuf:"bytes,11,opt,name=afterRedeemPassTemplateId,proto3" json:"afterRedeemPassTemplateId,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The quota for the campaign. If set to 0, then it is unlimited. If the quota is reached no new coupons can be issued.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Quota *io.Quota `protobuf:"bytes,12,opt,name=quota,proto3" json:"quota,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Coupon expiry settings
	// @tag: validateGeneric:"omitempty" validateCreate:"-" validateUpdate:"required"
	CouponExpirySettings *CouponExpirySettings `protobuf:"bytes,13,opt,name=couponExpirySettings,proto3" json:"couponExpirySettings,omitempty" validateGeneric:"omitempty" validateCreate:"-" validateUpdate:"required"`
	// Optional redemption settings to give more control over redemption.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	RedemptionSettings *RedemptionSettings `protobuf:"bytes,14,opt,name=redemptionSettings,proto3" json:"redemptionSettings,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional date when coupons can start to be issued. Defaults to the campaign start date. Needs to be greater than / equal to the campaign start date. Needs to be less than / equal to the campaign end date.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	IssueStartDate *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=issueStartDate,proto3" json:"issueStartDate,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// Optional date when coupons can no longer be issued. Defaults to the campaign end date. Needs to be less than / equal to the campaign end date.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	IssueEndDate *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=issueEndDate,proto3" json:"issueEndDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date when the offer was created.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=created,proto3" json:"created,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The date the offer was last updated.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Updated *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=updated,proto3" json:"updated,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The campaign id that the offer belongs to (1 campaign can have multiple offers). This field cannot be changed once an offer is linked to a campaign.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	CampaignId string `protobuf:"bytes,19,opt,name=campaignId,proto3" json:"campaignId,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// Contains the email & sms distribution settings for the offer.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	DistributionSettings *io.DistributionSettings `protobuf:"bytes,20,opt,name=distributionSettings,proto3" json:"distributionSettings,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The offer shortcode generated by the system. If the campaign is public, then this shortcode can be used to generate the coupon-create URL.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	ShortCode string `protobuf:"bytes,21,opt,name=shortCode,proto3" json:"shortCode,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The offer timezone.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	IanaTimezone string `protobuf:"bytes,22,opt,name=ianaTimezone,proto3" json:"ianaTimezone,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Can be used to temporarily disable the coupon (i.e. if you ran out of your promotion item, you can temporarily disable all live coupons, and activate them again later on when your item is in stock again).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Disabled bool `protobuf:"varint,23,opt,name=disabled,proto3" json:"disabled,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional field to provide the operation that you want to perform when sending an offer in an update request.  PUT will replace all values provided in the CouponOffer, whereas PATCH will ignore missing or falsey values.  To maintain compatibility with previous releases, the default value is PATCH.
	Operation     io.Operation `protobuf:"varint,100,opt,name=operation,proto3,enum=io.Operation" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CouponOffer) Reset() {
	*x = CouponOffer{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CouponOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponOffer) ProtoMessage() {}

func (x *CouponOffer) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponOffer.ProtoReflect.Descriptor instead.
func (*CouponOffer) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{0}
}

func (x *CouponOffer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CouponOffer) GetOfferTitle() string {
	if x != nil {
		return x.OfferTitle
	}
	return ""
}

func (x *CouponOffer) GetLocalizedOfferTitle() *io.LocalizedString {
	if x != nil {
		return x.LocalizedOfferTitle
	}
	return nil
}

func (x *CouponOffer) GetOfferShortTitle() string {
	if x != nil {
		return x.OfferShortTitle
	}
	return ""
}

func (x *CouponOffer) GetLocalizedOfferShortTitle() *io.LocalizedString {
	if x != nil {
		return x.LocalizedOfferShortTitle
	}
	return nil
}

func (x *CouponOffer) GetOfferDetails() string {
	if x != nil {
		return x.OfferDetails
	}
	return ""
}

func (x *CouponOffer) GetLocalizedOfferDetails() *io.LocalizedString {
	if x != nil {
		return x.LocalizedOfferDetails
	}
	return nil
}

func (x *CouponOffer) GetOfferFinePrint() string {
	if x != nil {
		return x.OfferFinePrint
	}
	return ""
}

func (x *CouponOffer) GetLocalizedOfferFinePrint() *io.LocalizedString {
	if x != nil {
		return x.LocalizedOfferFinePrint
	}
	return nil
}

func (x *CouponOffer) GetBeforeRedeemPassTemplateId() string {
	if x != nil {
		return x.BeforeRedeemPassTemplateId
	}
	return ""
}

func (x *CouponOffer) GetAfterRedeemPassTemplateId() string {
	if x != nil {
		return x.AfterRedeemPassTemplateId
	}
	return ""
}

func (x *CouponOffer) GetQuota() *io.Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *CouponOffer) GetCouponExpirySettings() *CouponExpirySettings {
	if x != nil {
		return x.CouponExpirySettings
	}
	return nil
}

func (x *CouponOffer) GetRedemptionSettings() *RedemptionSettings {
	if x != nil {
		return x.RedemptionSettings
	}
	return nil
}

func (x *CouponOffer) GetIssueStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueStartDate
	}
	return nil
}

func (x *CouponOffer) GetIssueEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueEndDate
	}
	return nil
}

func (x *CouponOffer) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CouponOffer) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *CouponOffer) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *CouponOffer) GetDistributionSettings() *io.DistributionSettings {
	if x != nil {
		return x.DistributionSettings
	}
	return nil
}

func (x *CouponOffer) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *CouponOffer) GetIanaTimezone() string {
	if x != nil {
		return x.IanaTimezone
	}
	return ""
}

func (x *CouponOffer) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *CouponOffer) GetOperation() io.Operation {
	if x != nil {
		return x.Operation
	}
	return io.Operation(0)
}

type CouponExpirySettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"omitempty,min=1" validateCreate:"required,min=1" validateUpdate:"omitempty,min=1"
	CouponExpiryType CouponExpiryType `protobuf:"varint,1,opt,name=couponExpiryType,proto3,enum=single_use_coupons.CouponExpiryType" json:"couponExpiryType,omitempty" validateGeneric:"omitempty,min=1" validateCreate:"required,min=1" validateUpdate:"omitempty,min=1"`
	// Number of days the coupon card is expired after the issue date.
	// The expiry time is 23:59:59 of expiry day. Please set couponExpiryType as EXPIRE_AFTER_X_DAYS.
	// Field can be omitted if using any of the other coupon expiry types.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	ExpireAfterXDays uint32 `protobuf:"varint,3,opt,name=expireAfterXDays,proto3" json:"expireAfterXDays,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CouponExpirySettings) Reset() {
	*x = CouponExpirySettings{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CouponExpirySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponExpirySettings) ProtoMessage() {}

func (x *CouponExpirySettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponExpirySettings.ProtoReflect.Descriptor instead.
func (*CouponExpirySettings) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{1}
}

func (x *CouponExpirySettings) GetCouponExpiryType() CouponExpiryType {
	if x != nil {
		return x.CouponExpiryType
	}
	return CouponExpiryType_EXPIRY_DO_NOT_USE
}

func (x *CouponExpirySettings) GetExpireAfterXDays() uint32 {
	if x != nil {
		return x.ExpireAfterXDays
	}
	return 0
}

type RedemptionSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional field that can be set if offers can only be redeemed after a certain date. Defaults to the offer issue start date. Needs to be greater than / equal to the offer issue start date, and less than / equal to offer issue end date.
	// @tag: validateGeneric:"-" validateCreate:"-" validateUpdate:"-"
	RedemptionStartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=redemptionStartDate,proto3" json:"redemptionStartDate,omitempty" validateGeneric:"-" validateCreate:"-" validateUpdate:"-"`
	// Optional field that can be set if offers can only be redeemed until a certain date. Defaults to the offer issue end date. Needs to be less than / equal to the offer issue end date.
	// @tag: validateGeneric:"-" validateCreate:"-" validateUpdate:"-"
	RedemptionEndDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=redemptionEndDate,proto3" json:"redemptionEndDate,omitempty" validateGeneric:"-" validateCreate:"-" validateUpdate:"-"`
	// Dictates redemption type; defaults to API.
	RedemptionType []RedemptionType `protobuf:"varint,3,rep,packed,name=redemptionType,proto3,enum=single_use_coupons.RedemptionType" json:"redemptionType,omitempty"`
	// Settings for code provided on redemption; a list of valid codes and possible invalid-code error message needs to be provided.
	CodeProvidedOnRedeemSettings *CustomerInitiatedCodeProvideOnRedeemSettings `protobuf:"bytes,5,opt,name=codeProvidedOnRedeemSettings,proto3" json:"codeProvidedOnRedeemSettings,omitempty"`
	// Settings for fixed code redemption.
	FixedCodeSettings *CustomerInitiatedFixedCodeSettings `protobuf:"bytes,6,opt,name=fixedCodeSettings,proto3" json:"fixedCodeSettings,omitempty"`
	// Standard redemption page design, hosted by PassKit. Mandatory field if the type is any of the customer initiated redemptions.
	StandardSettings *StandardPassKitHostedPage `protobuf:"bytes,7,opt,name=standardSettings,proto3" json:"standardSettings,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RedemptionSettings) Reset() {
	*x = RedemptionSettings{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedemptionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedemptionSettings) ProtoMessage() {}

func (x *RedemptionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedemptionSettings.ProtoReflect.Descriptor instead.
func (*RedemptionSettings) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{2}
}

func (x *RedemptionSettings) GetRedemptionStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RedemptionStartDate
	}
	return nil
}

func (x *RedemptionSettings) GetRedemptionEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RedemptionEndDate
	}
	return nil
}

func (x *RedemptionSettings) GetRedemptionType() []RedemptionType {
	if x != nil {
		return x.RedemptionType
	}
	return nil
}

func (x *RedemptionSettings) GetCodeProvidedOnRedeemSettings() *CustomerInitiatedCodeProvideOnRedeemSettings {
	if x != nil {
		return x.CodeProvidedOnRedeemSettings
	}
	return nil
}

func (x *RedemptionSettings) GetFixedCodeSettings() *CustomerInitiatedFixedCodeSettings {
	if x != nil {
		return x.FixedCodeSettings
	}
	return nil
}

func (x *RedemptionSettings) GetStandardSettings() *StandardPassKitHostedPage {
	if x != nil {
		return x.StandardSettings
	}
	return nil
}

type CustomerInitiatedFixedCodeSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// For fixed code customer initiated redemption; the fixed code to display needs to be set.
	FixedCode string `protobuf:"bytes,1,opt,name=fixedCode,proto3" json:"fixedCode,omitempty"`
	// If set to true will use coupon.sku as the fixed code.
	UseCouponSku bool `protobuf:"varint,2,opt,name=useCouponSku,proto3" json:"useCouponSku,omitempty"`
	// If set will render a barcode underneath the fixed code with as contents the fixed code.
	Barcode io.BarcodeType `protobuf:"varint,3,opt,name=barcode,proto3,enum=io.BarcodeType" json:"barcode,omitempty"`
	// Count down timer for redemption.
	RedemptionTimer *RedemptionTimerSettings `protobuf:"bytes,4,opt,name=redemptionTimer,proto3" json:"redemptionTimer,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CustomerInitiatedFixedCodeSettings) Reset() {
	*x = CustomerInitiatedFixedCodeSettings{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerInitiatedFixedCodeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerInitiatedFixedCodeSettings) ProtoMessage() {}

func (x *CustomerInitiatedFixedCodeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerInitiatedFixedCodeSettings.ProtoReflect.Descriptor instead.
func (*CustomerInitiatedFixedCodeSettings) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{3}
}

func (x *CustomerInitiatedFixedCodeSettings) GetFixedCode() string {
	if x != nil {
		return x.FixedCode
	}
	return ""
}

func (x *CustomerInitiatedFixedCodeSettings) GetUseCouponSku() bool {
	if x != nil {
		return x.UseCouponSku
	}
	return false
}

func (x *CustomerInitiatedFixedCodeSettings) GetBarcode() io.BarcodeType {
	if x != nil {
		return x.Barcode
	}
	return io.BarcodeType(0)
}

func (x *CustomerInitiatedFixedCodeSettings) GetRedemptionTimer() *RedemptionTimerSettings {
	if x != nil {
		return x.RedemptionTimer
	}
	return nil
}

type RedemptionTimerSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of seconds the redemption page displays the redemption code. When the times runs out, the redemption page will show the 'redemption period expired' message.
	TimeoutSeconds uint32 `protobuf:"varint,1,opt,name=timeoutSeconds,proto3" json:"timeoutSeconds,omitempty"`
	// Help text rendered above redemption timer.
	TimerHelpText string `protobuf:"bytes,2,opt,name=timerHelpText,proto3" json:"timerHelpText,omitempty"`
	// Localized help text for redemption timer.
	LocalizedTimeHelpText *io.LocalizedString `protobuf:"bytes,3,opt,name=localizedTimeHelpText,proto3" json:"localizedTimeHelpText,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RedemptionTimerSettings) Reset() {
	*x = RedemptionTimerSettings{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedemptionTimerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedemptionTimerSettings) ProtoMessage() {}

func (x *RedemptionTimerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedemptionTimerSettings.ProtoReflect.Descriptor instead.
func (*RedemptionTimerSettings) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{4}
}

func (x *RedemptionTimerSettings) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *RedemptionTimerSettings) GetTimerHelpText() string {
	if x != nil {
		return x.TimerHelpText
	}
	return ""
}

func (x *RedemptionTimerSettings) GetLocalizedTimeHelpText() *io.LocalizedString {
	if x != nil {
		return x.LocalizedTimeHelpText
	}
	return nil
}

type CustomerInitiatedCodeProvideOnRedeemSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional array of valid codes that can be input on redemption.
	ValidCodes []string `protobuf:"bytes,1,rep,name=validCodes,proto3" json:"validCodes,omitempty"`
	// Input field box for entering the redemption code.
	RedemptionCodeInput *InputField `protobuf:"bytes,2,opt,name=redemptionCodeInput,proto3" json:"redemptionCodeInput,omitempty"`
	// Submit button to confirm the validation code.
	SubmitButtonText string `protobuf:"bytes,3,opt,name=submitButtonText,proto3" json:"submitButtonText,omitempty"`
	// Localized submit button text.
	LocalizedSubmitButtonText *io.LocalizedString `protobuf:"bytes,4,opt,name=localizedSubmitButtonText,proto3" json:"localizedSubmitButtonText,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CustomerInitiatedCodeProvideOnRedeemSettings) Reset() {
	*x = CustomerInitiatedCodeProvideOnRedeemSettings{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerInitiatedCodeProvideOnRedeemSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerInitiatedCodeProvideOnRedeemSettings) ProtoMessage() {}

func (x *CustomerInitiatedCodeProvideOnRedeemSettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerInitiatedCodeProvideOnRedeemSettings.ProtoReflect.Descriptor instead.
func (*CustomerInitiatedCodeProvideOnRedeemSettings) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{5}
}

func (x *CustomerInitiatedCodeProvideOnRedeemSettings) GetValidCodes() []string {
	if x != nil {
		return x.ValidCodes
	}
	return nil
}

func (x *CustomerInitiatedCodeProvideOnRedeemSettings) GetRedemptionCodeInput() *InputField {
	if x != nil {
		return x.RedemptionCodeInput
	}
	return nil
}

func (x *CustomerInitiatedCodeProvideOnRedeemSettings) GetSubmitButtonText() string {
	if x != nil {
		return x.SubmitButtonText
	}
	return ""
}

func (x *CustomerInitiatedCodeProvideOnRedeemSettings) GetLocalizedSubmitButtonText() *io.LocalizedString {
	if x != nil {
		return x.LocalizedSubmitButtonText
	}
	return nil
}

type InputField struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The label of input field.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Localized label of input field.
	LocalizedLabel *io.LocalizedString `protobuf:"bytes,2,opt,name=localizedLabel,proto3" json:"localizedLabel,omitempty"`
	// Help text shown below the input field.
	HelperText string `protobuf:"bytes,3,opt,name=helperText,proto3" json:"helperText,omitempty"`
	// Localized help text shown below the input field.
	LocalizedHelperText *io.LocalizedString `protobuf:"bytes,4,opt,name=localizedHelperText,proto3" json:"localizedHelperText,omitempty"`
	// Optional message that is displayed if the user provides an invalid input value.
	ErrorMessage string `protobuf:"bytes,5,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// Localized invalid code error message.
	LocalizedErrorMessage *io.LocalizedString `protobuf:"bytes,6,opt,name=localizedErrorMessage,proto3" json:"localizedErrorMessage,omitempty"`
	// Default input value.
	DefaultValue string `protobuf:"bytes,7,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	// Localized default value.
	LocalizedDefaultValue *io.LocalizedString `protobuf:"bytes,8,opt,name=localizedDefaultValue,proto3" json:"localizedDefaultValue,omitempty"`
	// Placeholder text for the input field.
	Placeholder string `protobuf:"bytes,9,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	// Localized placeholder text.
	LocalizedPlaceholder *io.LocalizedString `protobuf:"bytes,10,opt,name=localizedPlaceholder,proto3" json:"localizedPlaceholder,omitempty"`
	// A regex which allows you to set custom validation rules for the input value.
	Validation    string `protobuf:"bytes,11,opt,name=validation,proto3" json:"validation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputField) Reset() {
	*x = InputField{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputField) ProtoMessage() {}

func (x *InputField) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputField.ProtoReflect.Descriptor instead.
func (*InputField) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{6}
}

func (x *InputField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *InputField) GetLocalizedLabel() *io.LocalizedString {
	if x != nil {
		return x.LocalizedLabel
	}
	return nil
}

func (x *InputField) GetHelperText() string {
	if x != nil {
		return x.HelperText
	}
	return ""
}

func (x *InputField) GetLocalizedHelperText() *io.LocalizedString {
	if x != nil {
		return x.LocalizedHelperText
	}
	return nil
}

func (x *InputField) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *InputField) GetLocalizedErrorMessage() *io.LocalizedString {
	if x != nil {
		return x.LocalizedErrorMessage
	}
	return nil
}

func (x *InputField) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *InputField) GetLocalizedDefaultValue() *io.LocalizedString {
	if x != nil {
		return x.LocalizedDefaultValue
	}
	return nil
}

func (x *InputField) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *InputField) GetLocalizedPlaceholder() *io.LocalizedString {
	if x != nil {
		return x.LocalizedPlaceholder
	}
	return nil
}

func (x *InputField) GetValidation() string {
	if x != nil {
		return x.Validation
	}
	return ""
}

type StandardPassKitHostedPage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Title shown on the redemption page browser tab. If not set, offer title will be shown.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Localized title.
	LocalizedTitle *io.LocalizedString `protobuf:"bytes,2,opt,name=localizedTitle,proto3" json:"localizedTitle,omitempty"`
	// Redemption instructions, show underneath the redemption banner image.
	RedemptionInstructions string `protobuf:"bytes,3,opt,name=redemptionInstructions,proto3" json:"redemptionInstructions,omitempty"`
	// Localized redemption instructions.
	LocalizedRedemptionInstructions *io.LocalizedString `protobuf:"bytes,4,opt,name=localizedRedemptionInstructions,proto3" json:"localizedRedemptionInstructions,omitempty"`
	// Image assets for the redemption banner image.
	//
	// Types that are valid to be assigned to RedemptionImageAssets:
	//
	//	*StandardPassKitHostedPage_ImageIds
	//	*StandardPassKitHostedPage_Images
	RedemptionImageAssets isStandardPassKitHostedPage_RedemptionImageAssets `protobuf_oneof:"RedemptionImageAssets"`
	// Text shown at the footer of the page, underneath the redemption code / redemption code input.
	FooterText string `protobuf:"bytes,7,opt,name=footerText,proto3" json:"footerText,omitempty"`
	// Localized text shown at the footer of the page.
	LocalizedFooterText *io.LocalizedString `protobuf:"bytes,8,opt,name=localizedFooterText,proto3" json:"localizedFooterText,omitempty"`
	// Customize success or error messages shown on the page or error dialog box.
	ResponseTexts *ResponseTexts `protobuf:"bytes,9,opt,name=responseTexts,proto3" json:"responseTexts,omitempty"`
	// Date time showed with couponAlreadyRedeemedText. Date time is localized to browser preferred language.
	HideRedeemedDateTime bool `protobuf:"varint,10,opt,name=hideRedeemedDateTime,proto3" json:"hideRedeemedDateTime,omitempty"`
	// Call to action button rendered on error page of coupon already redeemed to provide better customer experience.
	CallToActionButton *CallToActionButton `protobuf:"bytes,11,opt,name=callToActionButton,proto3" json:"callToActionButton,omitempty"`
	// Optional CSS overrides to ensure the page aligns with your brand guidelines.
	CssOverrides  string `protobuf:"bytes,12,opt,name=cssOverrides,proto3" json:"cssOverrides,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StandardPassKitHostedPage) Reset() {
	*x = StandardPassKitHostedPage{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StandardPassKitHostedPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardPassKitHostedPage) ProtoMessage() {}

func (x *StandardPassKitHostedPage) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardPassKitHostedPage.ProtoReflect.Descriptor instead.
func (*StandardPassKitHostedPage) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{7}
}

func (x *StandardPassKitHostedPage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StandardPassKitHostedPage) GetLocalizedTitle() *io.LocalizedString {
	if x != nil {
		return x.LocalizedTitle
	}
	return nil
}

func (x *StandardPassKitHostedPage) GetRedemptionInstructions() string {
	if x != nil {
		return x.RedemptionInstructions
	}
	return ""
}

func (x *StandardPassKitHostedPage) GetLocalizedRedemptionInstructions() *io.LocalizedString {
	if x != nil {
		return x.LocalizedRedemptionInstructions
	}
	return nil
}

func (x *StandardPassKitHostedPage) GetRedemptionImageAssets() isStandardPassKitHostedPage_RedemptionImageAssets {
	if x != nil {
		return x.RedemptionImageAssets
	}
	return nil
}

func (x *StandardPassKitHostedPage) GetImageIds() *io.ImageIds {
	if x != nil {
		if x, ok := x.RedemptionImageAssets.(*StandardPassKitHostedPage_ImageIds); ok {
			return x.ImageIds
		}
	}
	return nil
}

func (x *StandardPassKitHostedPage) GetImages() *io.ImageData {
	if x != nil {
		if x, ok := x.RedemptionImageAssets.(*StandardPassKitHostedPage_Images); ok {
			return x.Images
		}
	}
	return nil
}

func (x *StandardPassKitHostedPage) GetFooterText() string {
	if x != nil {
		return x.FooterText
	}
	return ""
}

func (x *StandardPassKitHostedPage) GetLocalizedFooterText() *io.LocalizedString {
	if x != nil {
		return x.LocalizedFooterText
	}
	return nil
}

func (x *StandardPassKitHostedPage) GetResponseTexts() *ResponseTexts {
	if x != nil {
		return x.ResponseTexts
	}
	return nil
}

func (x *StandardPassKitHostedPage) GetHideRedeemedDateTime() bool {
	if x != nil {
		return x.HideRedeemedDateTime
	}
	return false
}

func (x *StandardPassKitHostedPage) GetCallToActionButton() *CallToActionButton {
	if x != nil {
		return x.CallToActionButton
	}
	return nil
}

func (x *StandardPassKitHostedPage) GetCssOverrides() string {
	if x != nil {
		return x.CssOverrides
	}
	return ""
}

type isStandardPassKitHostedPage_RedemptionImageAssets interface {
	isStandardPassKitHostedPage_RedemptionImageAssets()
}

type StandardPassKitHostedPage_ImageIds struct {
	// Image data defined by image ids.
	ImageIds *io.ImageIds `protobuf:"bytes,5,opt,name=imageIds,proto3,oneof"`
}

type StandardPassKitHostedPage_Images struct {
	// Image data defined as image object.
	Images *io.ImageData `protobuf:"bytes,6,opt,name=images,proto3,oneof"`
}

func (*StandardPassKitHostedPage_ImageIds) isStandardPassKitHostedPage_RedemptionImageAssets() {}

func (*StandardPassKitHostedPage_Images) isStandardPassKitHostedPage_RedemptionImageAssets() {}

type CallToActionButton struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set true to hide button.
	HideCallToActionButton bool `protobuf:"varint,1,opt,name=hideCallToActionButton,proto3" json:"hideCallToActionButton,omitempty"`
	// Call-to-action text shown on the button.
	ButtonText string `protobuf:"bytes,2,opt,name=buttonText,proto3" json:"buttonText,omitempty"`
	// Localized button text.
	LocalizedButtonText *io.LocalizedString `protobuf:"bytes,3,opt,name=localizedButtonText,proto3" json:"localizedButtonText,omitempty"`
	// Link that the button will open.
	Link string `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	// Localized link that the button will open.
	LocalizedLink *io.LocalizedString `protobuf:"bytes,5,opt,name=localizedLink,proto3" json:"localizedLink,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallToActionButton) Reset() {
	*x = CallToActionButton{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallToActionButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallToActionButton) ProtoMessage() {}

func (x *CallToActionButton) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallToActionButton.ProtoReflect.Descriptor instead.
func (*CallToActionButton) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{8}
}

func (x *CallToActionButton) GetHideCallToActionButton() bool {
	if x != nil {
		return x.HideCallToActionButton
	}
	return false
}

func (x *CallToActionButton) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *CallToActionButton) GetLocalizedButtonText() *io.LocalizedString {
	if x != nil {
		return x.LocalizedButtonText
	}
	return nil
}

func (x *CallToActionButton) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *CallToActionButton) GetLocalizedLink() *io.LocalizedString {
	if x != nil {
		return x.LocalizedLink
	}
	return nil
}

type ResponseTexts struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// To be shown before redemption page is rendered. The dialogue box will have "Ok" and "Cancel" bottons.
	// If visitor clicks "Ok", coupon will be redeemed and the redemption page will render fixed code.
	// This only applies to the redemption type REDEMPTION_TYPE_CUSTOMER_INITIATED_CODE_FIXED.
	RedeemConfirmationDialogBoxText string `protobuf:"bytes,1,opt,name=redeemConfirmationDialogBoxText,proto3" json:"redeemConfirmationDialogBoxText,omitempty"`
	// Localized redemption confirm dialog box text.
	LocalizedRedeemConfirmationDialogBoxText *io.LocalizedString `protobuf:"bytes,2,opt,name=localizedRedeemConfirmationDialogBoxText,proto3" json:"localizedRedeemConfirmationDialogBoxText,omitempty"`
	// To be shown when visitor clicks "Cancel" and reject to redeem now.
	// This only applies to the redemption type REDEMPTION_TYPE_CUSTOMER_INITIATED_CODE_FIXED.
	CancelRedeemText string `protobuf:"bytes,3,opt,name=cancelRedeemText,proto3" json:"cancelRedeemText,omitempty"`
	// Localized cancel redemption text.
	LocalizedCancelRedeemText *io.LocalizedString `protobuf:"bytes,4,opt,name=localizedCancelRedeemText,proto3" json:"localizedCancelRedeemText,omitempty"`
	// To be shown when coupon has been redeemed.
	AfterRedeemText string `protobuf:"bytes,5,opt,name=afterRedeemText,proto3" json:"afterRedeemText,omitempty"`
	// Localized after redemption text.
	LocalizedAfterRedeemText *io.LocalizedString `protobuf:"bytes,6,opt,name=localizedAfterRedeemText,proto3" json:"localizedAfterRedeemText,omitempty"`
	// To be shown when the coupon was already redeemed.
	CouponAlreadyRedeemedText string `protobuf:"bytes,7,opt,name=couponAlreadyRedeemedText,proto3" json:"couponAlreadyRedeemedText,omitempty"`
	// Localized text shown when the coupon was already redeemed.
	LocalizedCouponAlreadyRedeemedText *io.LocalizedString `protobuf:"bytes,8,opt,name=localizedCouponAlreadyRedeemedText,proto3" json:"localizedCouponAlreadyRedeemedText,omitempty"`
	// To be shown when the offer period has ended.
	OfferExpiredText string `protobuf:"bytes,9,opt,name=offerExpiredText,proto3" json:"offerExpiredText,omitempty"`
	// Localized text shown when offer has ended.
	LocalizedOfferExpiredText *io.LocalizedString `protobuf:"bytes,10,opt,name=localizedOfferExpiredText,proto3" json:"localizedOfferExpiredText,omitempty"`
	// To be shown when the coupon expiry date / redemption end date has passed.
	CouponExpiredText string `protobuf:"bytes,11,opt,name=couponExpiredText,proto3" json:"couponExpiredText,omitempty"`
	// Localized text shown when the coupon expiry date / redemption end date has passed.
	LocalizedCouponExpiredText *io.LocalizedString `protobuf:"bytes,12,opt,name=localizedCouponExpiredText,proto3" json:"localizedCouponExpiredText,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ResponseTexts) Reset() {
	*x = ResponseTexts{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseTexts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTexts) ProtoMessage() {}

func (x *ResponseTexts) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTexts.ProtoReflect.Descriptor instead.
func (*ResponseTexts) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{9}
}

func (x *ResponseTexts) GetRedeemConfirmationDialogBoxText() string {
	if x != nil {
		return x.RedeemConfirmationDialogBoxText
	}
	return ""
}

func (x *ResponseTexts) GetLocalizedRedeemConfirmationDialogBoxText() *io.LocalizedString {
	if x != nil {
		return x.LocalizedRedeemConfirmationDialogBoxText
	}
	return nil
}

func (x *ResponseTexts) GetCancelRedeemText() string {
	if x != nil {
		return x.CancelRedeemText
	}
	return ""
}

func (x *ResponseTexts) GetLocalizedCancelRedeemText() *io.LocalizedString {
	if x != nil {
		return x.LocalizedCancelRedeemText
	}
	return nil
}

func (x *ResponseTexts) GetAfterRedeemText() string {
	if x != nil {
		return x.AfterRedeemText
	}
	return ""
}

func (x *ResponseTexts) GetLocalizedAfterRedeemText() *io.LocalizedString {
	if x != nil {
		return x.LocalizedAfterRedeemText
	}
	return nil
}

func (x *ResponseTexts) GetCouponAlreadyRedeemedText() string {
	if x != nil {
		return x.CouponAlreadyRedeemedText
	}
	return ""
}

func (x *ResponseTexts) GetLocalizedCouponAlreadyRedeemedText() *io.LocalizedString {
	if x != nil {
		return x.LocalizedCouponAlreadyRedeemedText
	}
	return nil
}

func (x *ResponseTexts) GetOfferExpiredText() string {
	if x != nil {
		return x.OfferExpiredText
	}
	return ""
}

func (x *ResponseTexts) GetLocalizedOfferExpiredText() *io.LocalizedString {
	if x != nil {
		return x.LocalizedOfferExpiredText
	}
	return nil
}

func (x *ResponseTexts) GetCouponExpiredText() string {
	if x != nil {
		return x.CouponExpiredText
	}
	return ""
}

func (x *ResponseTexts) GetLocalizedCouponExpiredText() *io.LocalizedString {
	if x != nil {
		return x.LocalizedCouponExpiredText
	}
	return nil
}

// [DEPRECATED: OR operator not supported] Filter and list records.
type CouponOffersListRequestDeprecated struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	CampaignId string `protobuf:"bytes,1,opt,name=campaignId,proto3" json:"campaignId,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Pagination    *io.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CouponOffersListRequestDeprecated) Reset() {
	*x = CouponOffersListRequestDeprecated{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CouponOffersListRequestDeprecated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponOffersListRequestDeprecated) ProtoMessage() {}

func (x *CouponOffersListRequestDeprecated) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponOffersListRequestDeprecated.ProtoReflect.Descriptor instead.
func (*CouponOffersListRequestDeprecated) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{10}
}

func (x *CouponOffersListRequestDeprecated) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *CouponOffersListRequestDeprecated) GetPagination() *io.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CouponOffersListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	CampaignId string `protobuf:"bytes,1,opt,name=campaignId,proto3" json:"campaignId,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Filters       *io.Filters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CouponOffersListRequest) Reset() {
	*x = CouponOffersListRequest{}
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CouponOffersListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponOffersListRequest) ProtoMessage() {}

func (x *CouponOffersListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_offer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponOffersListRequest.ProtoReflect.Descriptor instead.
func (*CouponOffersListRequest) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_offer_proto_rawDescGZIP(), []int{11}
}

func (x *CouponOffersListRequest) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *CouponOffersListRequest) GetFilters() *io.Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

var File_io_single_use_coupons_offer_proto protoreflect.FileDescriptor

var file_io_single_use_coupons_offer_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x69, 0x6f, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x69, 0x6f, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x0c, 0x0a,
	0x0b, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x13,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4f, 0x0a,
	0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x49, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x65,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x65, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x61, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x69, 0x6f, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x56, 0x0a, 0x12, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a,
	0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x14, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x61, 0x6e, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x61, 0x6e,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0xe2, 0x01, 0x92, 0x41, 0xde, 0x01, 0x0a, 0xdb, 0x01, 0x2a, 0x0c, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x20, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x32, 0x91, 0x01, 0x48, 0x6f, 0x6c,
	0x64, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2c, 0x20, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x20, 0x26, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x20, 0x28, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x20, 0x26, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x50, 0x61, 0x79, 0x20,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x29, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x20, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0xd2, 0x01,
	0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0xd2, 0x01, 0x0c, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0xd2, 0x01, 0x1a, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x50, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x58, 0x44, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x58, 0x44, 0x61, 0x79, 0x73, 0x22, 0xd8,
	0x04, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13,
	0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x72, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a,
	0x0e, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1c, 0x63, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x4f, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x1c, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x4f, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x64, 0x0a, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x73, 0x73, 0x4b, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08,
	0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0xe8, 0x01, 0x0a, 0x22, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x6b, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53,
	0x6b, 0x75, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a,
	0x0f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x49,
	0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x2c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4f, 0x6e, 0x52, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x72, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x13, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x51, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xaf, 0x04, 0x0a, 0x0a,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a,
	0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x05,
	0x0a, 0x19, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x1f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x1f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x73, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x13, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x47, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x69,
	0x64, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x69, 0x64, 0x65, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56,
	0x0a, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x73, 0x73, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x73,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x52, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x68, 0x69,
	0x64, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x69, 0x64, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x45, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x39, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xe9, 0x06, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x6f, 0x78, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x6f, 0x78,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x6f, 0x0a, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x6f, 0x78, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x28, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x6f,
	0x78, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x51, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4f,
	0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x3c, 0x0a, 0x19, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x63, 0x0a,
	0x22, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x22,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x51,
	0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x53, 0x0a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x22, 0x73, 0x0a, 0x21, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x69, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x17, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2a, 0xa9, 0x01, 0x0a, 0x10,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x4f, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x54, 0x4f, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x58, 0x5f, 0x44,
	0x41, 0x59, 0x53, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x5f,
	0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x2a, 0xe4, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45,
	0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45,
	0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50,
	0x49, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x52,
	0x45, 0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x03, 0x12, 0x3e,
	0x0a, 0x3a, 0x52, 0x45, 0x44, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x10, 0x04, 0x42, 0x7c,
	0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x73, 0x5a, 0x37, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b,
	0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0xaa, 0x02, 0x1d, 0x50,
	0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_single_use_coupons_offer_proto_rawDescOnce sync.Once
	file_io_single_use_coupons_offer_proto_rawDescData []byte
)

func file_io_single_use_coupons_offer_proto_rawDescGZIP() []byte {
	file_io_single_use_coupons_offer_proto_rawDescOnce.Do(func() {
		file_io_single_use_coupons_offer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_single_use_coupons_offer_proto_rawDesc), len(file_io_single_use_coupons_offer_proto_rawDesc)))
	})
	return file_io_single_use_coupons_offer_proto_rawDescData
}

var file_io_single_use_coupons_offer_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_io_single_use_coupons_offer_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_io_single_use_coupons_offer_proto_goTypes = []any{
	(CouponExpiryType)(0),                                // 0: single_use_coupons.CouponExpiryType
	(RedemptionType)(0),                                  // 1: single_use_coupons.RedemptionType
	(*CouponOffer)(nil),                                  // 2: single_use_coupons.CouponOffer
	(*CouponExpirySettings)(nil),                         // 3: single_use_coupons.CouponExpirySettings
	(*RedemptionSettings)(nil),                           // 4: single_use_coupons.RedemptionSettings
	(*CustomerInitiatedFixedCodeSettings)(nil),           // 5: single_use_coupons.CustomerInitiatedFixedCodeSettings
	(*RedemptionTimerSettings)(nil),                      // 6: single_use_coupons.RedemptionTimerSettings
	(*CustomerInitiatedCodeProvideOnRedeemSettings)(nil), // 7: single_use_coupons.CustomerInitiatedCodeProvideOnRedeemSettings
	(*InputField)(nil),                                   // 8: single_use_coupons.InputField
	(*StandardPassKitHostedPage)(nil),                    // 9: single_use_coupons.StandardPassKitHostedPage
	(*CallToActionButton)(nil),                           // 10: single_use_coupons.CallToActionButton
	(*ResponseTexts)(nil),                                // 11: single_use_coupons.ResponseTexts
	(*CouponOffersListRequestDeprecated)(nil),            // 12: single_use_coupons.CouponOffersListRequestDeprecated
	(*CouponOffersListRequest)(nil),                      // 13: single_use_coupons.CouponOffersListRequest
	(*io.LocalizedString)(nil),                           // 14: io.LocalizedString
	(*io.Quota)(nil),                                     // 15: io.Quota
	(*timestamppb.Timestamp)(nil),                        // 16: google.protobuf.Timestamp
	(*io.DistributionSettings)(nil),                      // 17: io.DistributionSettings
	(io.Operation)(0),                                    // 18: io.Operation
	(io.BarcodeType)(0),                                  // 19: io.BarcodeType
	(*io.ImageIds)(nil),                                  // 20: io.ImageIds
	(*io.ImageData)(nil),                                 // 21: io.ImageData
	(*io.Pagination)(nil),                                // 22: io.Pagination
	(*io.Filters)(nil),                                   // 23: io.Filters
}
var file_io_single_use_coupons_offer_proto_depIdxs = []int32{
	14, // 0: single_use_coupons.CouponOffer.localizedOfferTitle:type_name -> io.LocalizedString
	14, // 1: single_use_coupons.CouponOffer.localizedOfferShortTitle:type_name -> io.LocalizedString
	14, // 2: single_use_coupons.CouponOffer.localizedOfferDetails:type_name -> io.LocalizedString
	14, // 3: single_use_coupons.CouponOffer.localizedOfferFinePrint:type_name -> io.LocalizedString
	15, // 4: single_use_coupons.CouponOffer.quota:type_name -> io.Quota
	3,  // 5: single_use_coupons.CouponOffer.couponExpirySettings:type_name -> single_use_coupons.CouponExpirySettings
	4,  // 6: single_use_coupons.CouponOffer.redemptionSettings:type_name -> single_use_coupons.RedemptionSettings
	16, // 7: single_use_coupons.CouponOffer.issueStartDate:type_name -> google.protobuf.Timestamp
	16, // 8: single_use_coupons.CouponOffer.issueEndDate:type_name -> google.protobuf.Timestamp
	16, // 9: single_use_coupons.CouponOffer.created:type_name -> google.protobuf.Timestamp
	16, // 10: single_use_coupons.CouponOffer.updated:type_name -> google.protobuf.Timestamp
	17, // 11: single_use_coupons.CouponOffer.distributionSettings:type_name -> io.DistributionSettings
	18, // 12: single_use_coupons.CouponOffer.operation:type_name -> io.Operation
	0,  // 13: single_use_coupons.CouponExpirySettings.couponExpiryType:type_name -> single_use_coupons.CouponExpiryType
	16, // 14: single_use_coupons.RedemptionSettings.redemptionStartDate:type_name -> google.protobuf.Timestamp
	16, // 15: single_use_coupons.RedemptionSettings.redemptionEndDate:type_name -> google.protobuf.Timestamp
	1,  // 16: single_use_coupons.RedemptionSettings.redemptionType:type_name -> single_use_coupons.RedemptionType
	7,  // 17: single_use_coupons.RedemptionSettings.codeProvidedOnRedeemSettings:type_name -> single_use_coupons.CustomerInitiatedCodeProvideOnRedeemSettings
	5,  // 18: single_use_coupons.RedemptionSettings.fixedCodeSettings:type_name -> single_use_coupons.CustomerInitiatedFixedCodeSettings
	9,  // 19: single_use_coupons.RedemptionSettings.standardSettings:type_name -> single_use_coupons.StandardPassKitHostedPage
	19, // 20: single_use_coupons.CustomerInitiatedFixedCodeSettings.barcode:type_name -> io.BarcodeType
	6,  // 21: single_use_coupons.CustomerInitiatedFixedCodeSettings.redemptionTimer:type_name -> single_use_coupons.RedemptionTimerSettings
	14, // 22: single_use_coupons.RedemptionTimerSettings.localizedTimeHelpText:type_name -> io.LocalizedString
	8,  // 23: single_use_coupons.CustomerInitiatedCodeProvideOnRedeemSettings.redemptionCodeInput:type_name -> single_use_coupons.InputField
	14, // 24: single_use_coupons.CustomerInitiatedCodeProvideOnRedeemSettings.localizedSubmitButtonText:type_name -> io.LocalizedString
	14, // 25: single_use_coupons.InputField.localizedLabel:type_name -> io.LocalizedString
	14, // 26: single_use_coupons.InputField.localizedHelperText:type_name -> io.LocalizedString
	14, // 27: single_use_coupons.InputField.localizedErrorMessage:type_name -> io.LocalizedString
	14, // 28: single_use_coupons.InputField.localizedDefaultValue:type_name -> io.LocalizedString
	14, // 29: single_use_coupons.InputField.localizedPlaceholder:type_name -> io.LocalizedString
	14, // 30: single_use_coupons.StandardPassKitHostedPage.localizedTitle:type_name -> io.LocalizedString
	14, // 31: single_use_coupons.StandardPassKitHostedPage.localizedRedemptionInstructions:type_name -> io.LocalizedString
	20, // 32: single_use_coupons.StandardPassKitHostedPage.imageIds:type_name -> io.ImageIds
	21, // 33: single_use_coupons.StandardPassKitHostedPage.images:type_name -> io.ImageData
	14, // 34: single_use_coupons.StandardPassKitHostedPage.localizedFooterText:type_name -> io.LocalizedString
	11, // 35: single_use_coupons.StandardPassKitHostedPage.responseTexts:type_name -> single_use_coupons.ResponseTexts
	10, // 36: single_use_coupons.StandardPassKitHostedPage.callToActionButton:type_name -> single_use_coupons.CallToActionButton
	14, // 37: single_use_coupons.CallToActionButton.localizedButtonText:type_name -> io.LocalizedString
	14, // 38: single_use_coupons.CallToActionButton.localizedLink:type_name -> io.LocalizedString
	14, // 39: single_use_coupons.ResponseTexts.localizedRedeemConfirmationDialogBoxText:type_name -> io.LocalizedString
	14, // 40: single_use_coupons.ResponseTexts.localizedCancelRedeemText:type_name -> io.LocalizedString
	14, // 41: single_use_coupons.ResponseTexts.localizedAfterRedeemText:type_name -> io.LocalizedString
	14, // 42: single_use_coupons.ResponseTexts.localizedCouponAlreadyRedeemedText:type_name -> io.LocalizedString
	14, // 43: single_use_coupons.ResponseTexts.localizedOfferExpiredText:type_name -> io.LocalizedString
	14, // 44: single_use_coupons.ResponseTexts.localizedCouponExpiredText:type_name -> io.LocalizedString
	22, // 45: single_use_coupons.CouponOffersListRequestDeprecated.pagination:type_name -> io.Pagination
	23, // 46: single_use_coupons.CouponOffersListRequest.filters:type_name -> io.Filters
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_io_single_use_coupons_offer_proto_init() }
func file_io_single_use_coupons_offer_proto_init() {
	if File_io_single_use_coupons_offer_proto != nil {
		return
	}
	file_io_single_use_coupons_offer_proto_msgTypes[7].OneofWrappers = []any{
		(*StandardPassKitHostedPage_ImageIds)(nil),
		(*StandardPassKitHostedPage_Images)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_single_use_coupons_offer_proto_rawDesc), len(file_io_single_use_coupons_offer_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_single_use_coupons_offer_proto_goTypes,
		DependencyIndexes: file_io_single_use_coupons_offer_proto_depIdxs,
		EnumInfos:         file_io_single_use_coupons_offer_proto_enumTypes,
		MessageInfos:      file_io_single_use_coupons_offer_proto_msgTypes,
	}.Build()
	File_io_single_use_coupons_offer_proto = out.File
	file_io_single_use_coupons_offer_proto_goTypes = nil
	file_io_single_use_coupons_offer_proto_depIdxs = nil
}
