//*
// Coupons holds the details & state of an individual coupon instance (i.e. a pass).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/single_use_coupons/coupon.proto

package single_use_coupons

import (
	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CouponStatus int32

const (
	// Default status when a coupon is issued.
	CouponStatus_UNREDEEMED CouponStatus = 0
	// Set after a coupon is redeemed (the redeem endpoint is called).
	CouponStatus_REDEEMED CouponStatus = 1
)

// Enum value maps for CouponStatus.
var (
	CouponStatus_name = map[int32]string{
		0: "UNREDEEMED",
		1: "REDEEMED",
	}
	CouponStatus_value = map[string]int32{
		"UNREDEEMED": 0,
		"REDEEMED":   1,
	}
)

func (x CouponStatus) Enum() *CouponStatus {
	p := new(CouponStatus)
	*p = x
	return p
}

func (x CouponStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CouponStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_io_single_use_coupons_coupon_proto_enumTypes[0].Descriptor()
}

func (CouponStatus) Type() protoreflect.EnumType {
	return &file_io_single_use_coupons_coupon_proto_enumTypes[0]
}

func (x CouponStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CouponStatus.Descriptor instead.
func (CouponStatus) EnumDescriptor() ([]byte, []int) {
	return file_io_single_use_coupons_coupon_proto_rawDescGZIP(), []int{0}
}

// The Coupon Details
type Coupon struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated coupon id (22 characters).
	// @tag: validateGeneric:"required" validateCreate:"-" validateUpdate:"required_without=ExternalId"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required" validateCreate:"-" validateUpdate:"required_without=ExternalId"`
	// This can be used to set the 'external' ID of the coupon (i.e. the unique coupon code as it's being used in your system). If provided then this can be used to query & update coupon. This field will be treated as unique within the campaign, and cannot be updated at a later stage.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"required_without=Id"
	ExternalId string `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"required_without=Id"`
	// The coupon offer id that the coupon belongs to.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"
	OfferId string `protobuf:"bytes,3,opt,name=offerId,proto3" json:"offerId,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"`
	// The coupon campaign id the the coupon belongs to.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required_without=Id"
	CampaignId string `protobuf:"bytes,4,opt,name=campaignId,proto3" json:"campaignId,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required_without=Id"`
	// Optional field if you would like to add PII to the individual coupon. Person is stored encrypted.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Person *io.Person `protobuf:"bytes,5,opt,name=person,proto3" json:"person,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Any other meta fields for the coupon that are not covered in the protocol (i.e. you might want to captures sign-up location, or favourite perfume, for segmenting later on).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	MetaData map[string]string `protobuf:"bytes,6,rep,name=metaData,proto3" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional SKU. Can be used in the barcode by setting ${coupon.sku} in the template barcode settings.
	Sku string `protobuf:"bytes,7,opt,name=sku,proto3" json:"sku,omitempty"`
	// Indicates if the user of the coupon opted out to receive marketing promotions (defaults to false).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	OptOut bool `protobuf:"varint,8,opt,name=optOut,proto3" json:"optOut,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Holds the coupon status.
	Status CouponStatus `protobuf:"varint,10,opt,name=status,proto3,enum=single_use_coupons.CouponStatus" json:"status,omitempty"`
	// Optional field to set when the coupon expires. When the expiry date hits, it will automatically gray out the barcode. Only applicable if the template for the offer is set to EXPIRE_ON_VARIABLE_DATE_TIME.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	ExpiryDate *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expiryDate,proto3" json:"expiryDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Contains details about the redemption (if the coupon is in a redeemed state).
	RedemptionDetails *RedemptionDetails `protobuf:"bytes,12,opt,name=redemptionDetails,proto3" json:"redemptionDetails,omitempty"`
	// Optional Pass level overrides for proximity & images.
	PassOverrides *io.PassOverrides `protobuf:"bytes,13,opt,name=passOverrides,proto3" json:"passOverrides,omitempty"`
	// Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data.
	PassMetaData *io.Metadata `protobuf:"bytes,14,opt,name=passMetaData,proto3" json:"passMetaData,omitempty"`
	// The date the coupon was created.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The date the coupon was last updated.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Updated       *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated,proto3" json:"updated,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Coupon) Reset() {
	*x = Coupon{}
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Coupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coupon) ProtoMessage() {}

func (x *Coupon) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coupon.ProtoReflect.Descriptor instead.
func (*Coupon) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_coupon_proto_rawDescGZIP(), []int{0}
}

func (x *Coupon) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Coupon) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Coupon) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

func (x *Coupon) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *Coupon) GetPerson() *io.Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *Coupon) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *Coupon) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *Coupon) GetOptOut() bool {
	if x != nil {
		return x.OptOut
	}
	return false
}

func (x *Coupon) GetStatus() CouponStatus {
	if x != nil {
		return x.Status
	}
	return CouponStatus_UNREDEEMED
}

func (x *Coupon) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *Coupon) GetRedemptionDetails() *RedemptionDetails {
	if x != nil {
		return x.RedemptionDetails
	}
	return nil
}

func (x *Coupon) GetPassOverrides() *io.PassOverrides {
	if x != nil {
		return x.PassOverrides
	}
	return nil
}

func (x *Coupon) GetPassMetaData() *io.Metadata {
	if x != nil {
		return x.PassMetaData
	}
	return nil
}

func (x *Coupon) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Coupon) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type RedemptionDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The date the coupon was redeemed (set by the system when the redeem endpoint is called).
	RedemptionDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=redemptionDate,proto3" json:"redemptionDate,omitempty"`
	// Optional field that contains the redemption code provided on redeem (either the fixed one if set, or user provided).
	RedemptionCode string `protobuf:"bytes,2,opt,name=redemptionCode,proto3" json:"redemptionCode,omitempty"`
	// Option redemption GPS lat, lon &  alt.
	Lat float64 `protobuf:"fixed64,3,opt,name=lat,proto3" json:"lat,omitempty"`
	// Longitude.
	Lon float64 `protobuf:"fixed64,4,opt,name=lon,proto3" json:"lon,omitempty"`
	// Altitude in metres.
	Alt int32 `protobuf:"varint,5,opt,name=alt,proto3" json:"alt,omitempty"`
	// Optional redemption user agent, can be used in case where a Merchant uses the PassKit scanning solution combined with their own POS redemption and wants to differentiate the source of redemption.
	RedemptionSource string `protobuf:"bytes,6,opt,name=redemptionSource,proto3" json:"redemptionSource,omitempty"`
	// Optional redemption reference, can be used for staff name, username, POS ID, location ID, etc.
	RedemptionReference string `protobuf:"bytes,7,opt,name=redemptionReference,proto3" json:"redemptionReference,omitempty"`
	// Optional transaction reference, can be used to consolidate baskets at a later stage via a manual process.
	TransactionReference string `protobuf:"bytes,8,opt,name=transactionReference,proto3" json:"transactionReference,omitempty"`
	// Optional total transaction amount.
	TransactionAmount float64 `protobuf:"fixed64,9,opt,name=transactionAmount,proto3" json:"transactionAmount,omitempty"`
	// Any other meta data re. the redemption
	MetaData      map[string]string `protobuf:"bytes,10,rep,name=metaData,proto3" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedemptionDetails) Reset() {
	*x = RedemptionDetails{}
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedemptionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedemptionDetails) ProtoMessage() {}

func (x *RedemptionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedemptionDetails.ProtoReflect.Descriptor instead.
func (*RedemptionDetails) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_coupon_proto_rawDescGZIP(), []int{1}
}

func (x *RedemptionDetails) GetRedemptionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RedemptionDate
	}
	return nil
}

func (x *RedemptionDetails) GetRedemptionCode() string {
	if x != nil {
		return x.RedemptionCode
	}
	return ""
}

func (x *RedemptionDetails) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *RedemptionDetails) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *RedemptionDetails) GetAlt() int32 {
	if x != nil {
		return x.Alt
	}
	return 0
}

func (x *RedemptionDetails) GetRedemptionSource() string {
	if x != nil {
		return x.RedemptionSource
	}
	return ""
}

func (x *RedemptionDetails) GetRedemptionReference() string {
	if x != nil {
		return x.RedemptionReference
	}
	return ""
}

func (x *RedemptionDetails) GetTransactionReference() string {
	if x != nil {
		return x.TransactionReference
	}
	return ""
}

func (x *RedemptionDetails) GetTransactionAmount() float64 {
	if x != nil {
		return x.TransactionAmount
	}
	return 0
}

func (x *RedemptionDetails) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type ExternalIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Coupon Campaign ID
	// @tag: validateGeneric:"required"
	CouponCampaignId string `protobuf:"bytes,1,opt,name=couponCampaignId,proto3" json:"couponCampaignId,omitempty" validateGeneric:"required"`
	// External ID
	// @tag: validateGeneric:"required"
	ExternalId    string `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalIdRequest) Reset() {
	*x = ExternalIdRequest{}
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalIdRequest) ProtoMessage() {}

func (x *ExternalIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalIdRequest.ProtoReflect.Descriptor instead.
func (*ExternalIdRequest) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_coupon_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalIdRequest) GetCouponCampaignId() string {
	if x != nil {
		return x.CouponCampaignId
	}
	return ""
}

func (x *ExternalIdRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

type ListRequestDeprecated struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Coupon Campaign ID
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	CouponCampaignId string `protobuf:"bytes,1,opt,name=couponCampaignId,proto3" json:"couponCampaignId,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// External ID
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Pagination    *io.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequestDeprecated) Reset() {
	*x = ListRequestDeprecated{}
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequestDeprecated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequestDeprecated) ProtoMessage() {}

func (x *ListRequestDeprecated) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequestDeprecated.ProtoReflect.Descriptor instead.
func (*ListRequestDeprecated) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_coupon_proto_rawDescGZIP(), []int{3}
}

func (x *ListRequestDeprecated) GetCouponCampaignId() string {
	if x != nil {
		return x.CouponCampaignId
	}
	return ""
}

func (x *ListRequestDeprecated) GetPagination() *io.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Coupon Campaign ID
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	CouponCampaignId string `protobuf:"bytes,1,opt,name=couponCampaignId,proto3" json:"couponCampaignId,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// External ID
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Filters *io.Filters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	EmailAsCsv    bool `protobuf:"varint,3,opt,name=emailAsCsv,proto3" json:"emailAsCsv,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_coupon_proto_rawDescGZIP(), []int{4}
}

func (x *ListRequest) GetCouponCampaignId() string {
	if x != nil {
		return x.CouponCampaignId
	}
	return ""
}

func (x *ListRequest) GetFilters() *io.Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListRequest) GetEmailAsCsv() bool {
	if x != nil {
		return x.EmailAsCsv
	}
	return false
}

type CouponNewExternalIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated coupon ID (22 characters). Required if couponCampaignId and externalId are not provided.
	// @tag: validateGeneric:"required_without=ExternalId"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required_without=ExternalId"`
	// Coupon Campaign ID. Required if external id is used.
	// @tag: validateGeneric:"required_with=ExternalId"
	CouponCampaignId string `protobuf:"bytes,2,opt,name=couponCampaignId,proto3" json:"couponCampaignId,omitempty" validateGeneric:"required_with=ExternalId"`
	// Current external ID. Required if coupon id is not provided.
	// @tag: validateGeneric:"omitempty"
	ExternalId string `protobuf:"bytes,3,opt,name=externalId,proto3" json:"externalId,omitempty" validateGeneric:"omitempty"`
	// New external ID.
	// @tag: validateGeneric:"required"
	NewExternalId string `protobuf:"bytes,4,opt,name=newExternalId,proto3" json:"newExternalId,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CouponNewExternalIdRequest) Reset() {
	*x = CouponNewExternalIdRequest{}
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CouponNewExternalIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponNewExternalIdRequest) ProtoMessage() {}

func (x *CouponNewExternalIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_single_use_coupons_coupon_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponNewExternalIdRequest.ProtoReflect.Descriptor instead.
func (*CouponNewExternalIdRequest) Descriptor() ([]byte, []int) {
	return file_io_single_use_coupons_coupon_proto_rawDescGZIP(), []int{5}
}

func (x *CouponNewExternalIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CouponNewExternalIdRequest) GetCouponCampaignId() string {
	if x != nil {
		return x.CouponCampaignId
	}
	return ""
}

func (x *CouponNewExternalIdRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *CouponNewExternalIdRequest) GetNewExternalId() string {
	if x != nil {
		return x.NewExternalId
	}
	return ""
}

var File_io_single_use_coupons_coupon_proto protoreflect.FileDescriptor

var file_io_single_use_coupons_coupon_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x69, 0x6f, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x69, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x70, 0x61,
	0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x75,
	0x92, 0x41, 0x72, 0x0a, 0x70, 0x2a, 0x06, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x32, 0x4f, 0x48,
	0x6f, 0x6c, 0x64, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x20, 0x26, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x28, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x61, 0x20, 0x70, 0x61, 0x73, 0x73, 0x29, 0x2e, 0xd2, 0x01,
	0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0x83, 0x04, 0x0a, 0x11,
	0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x61, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5f, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x22, 0x73, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6f,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x73, 0x43, 0x73, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x43, 0x73, 0x76, 0x22, 0x9e, 0x01, 0x0a, 0x1a, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4e, 0x65, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x2a, 0x2c, 0x0a, 0x0c, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x4e, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x42, 0x7c, 0x0a, 0x21, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x5a, 0x37,
	0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67,
	0x6f, 0x2f, 0x69, 0x6f, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0xaa, 0x02, 0x1d, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69,
	0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_single_use_coupons_coupon_proto_rawDescOnce sync.Once
	file_io_single_use_coupons_coupon_proto_rawDescData []byte
)

func file_io_single_use_coupons_coupon_proto_rawDescGZIP() []byte {
	file_io_single_use_coupons_coupon_proto_rawDescOnce.Do(func() {
		file_io_single_use_coupons_coupon_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_single_use_coupons_coupon_proto_rawDesc), len(file_io_single_use_coupons_coupon_proto_rawDesc)))
	})
	return file_io_single_use_coupons_coupon_proto_rawDescData
}

var file_io_single_use_coupons_coupon_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_io_single_use_coupons_coupon_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_io_single_use_coupons_coupon_proto_goTypes = []any{
	(CouponStatus)(0),                  // 0: single_use_coupons.CouponStatus
	(*Coupon)(nil),                     // 1: single_use_coupons.Coupon
	(*RedemptionDetails)(nil),          // 2: single_use_coupons.RedemptionDetails
	(*ExternalIdRequest)(nil),          // 3: single_use_coupons.ExternalIdRequest
	(*ListRequestDeprecated)(nil),      // 4: single_use_coupons.ListRequestDeprecated
	(*ListRequest)(nil),                // 5: single_use_coupons.ListRequest
	(*CouponNewExternalIdRequest)(nil), // 6: single_use_coupons.CouponNewExternalIdRequest
	nil,                                // 7: single_use_coupons.Coupon.MetaDataEntry
	nil,                                // 8: single_use_coupons.RedemptionDetails.MetaDataEntry
	(*io.Person)(nil),                  // 9: io.Person
	(*timestamppb.Timestamp)(nil),      // 10: google.protobuf.Timestamp
	(*io.PassOverrides)(nil),           // 11: io.PassOverrides
	(*io.Metadata)(nil),                // 12: io.Metadata
	(*io.Pagination)(nil),              // 13: io.Pagination
	(*io.Filters)(nil),                 // 14: io.Filters
}
var file_io_single_use_coupons_coupon_proto_depIdxs = []int32{
	9,  // 0: single_use_coupons.Coupon.person:type_name -> io.Person
	7,  // 1: single_use_coupons.Coupon.metaData:type_name -> single_use_coupons.Coupon.MetaDataEntry
	0,  // 2: single_use_coupons.Coupon.status:type_name -> single_use_coupons.CouponStatus
	10, // 3: single_use_coupons.Coupon.expiryDate:type_name -> google.protobuf.Timestamp
	2,  // 4: single_use_coupons.Coupon.redemptionDetails:type_name -> single_use_coupons.RedemptionDetails
	11, // 5: single_use_coupons.Coupon.passOverrides:type_name -> io.PassOverrides
	12, // 6: single_use_coupons.Coupon.passMetaData:type_name -> io.Metadata
	10, // 7: single_use_coupons.Coupon.created:type_name -> google.protobuf.Timestamp
	10, // 8: single_use_coupons.Coupon.updated:type_name -> google.protobuf.Timestamp
	10, // 9: single_use_coupons.RedemptionDetails.redemptionDate:type_name -> google.protobuf.Timestamp
	8,  // 10: single_use_coupons.RedemptionDetails.metaData:type_name -> single_use_coupons.RedemptionDetails.MetaDataEntry
	13, // 11: single_use_coupons.ListRequestDeprecated.pagination:type_name -> io.Pagination
	14, // 12: single_use_coupons.ListRequest.filters:type_name -> io.Filters
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_io_single_use_coupons_coupon_proto_init() }
func file_io_single_use_coupons_coupon_proto_init() {
	if File_io_single_use_coupons_coupon_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_single_use_coupons_coupon_proto_rawDesc), len(file_io_single_use_coupons_coupon_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_single_use_coupons_coupon_proto_goTypes,
		DependencyIndexes: file_io_single_use_coupons_coupon_proto_depIdxs,
		EnumInfos:         file_io_single_use_coupons_coupon_proto_enumTypes,
		MessageInfos:      file_io_single_use_coupons_coupon_proto_msgTypes,
	}.Build()
	File_io_single_use_coupons_coupon_proto = out.File
	file_io_single_use_coupons_coupon_proto_goTypes = nil
	file_io_single_use_coupons_coupon_proto_depIdxs = nil
}

