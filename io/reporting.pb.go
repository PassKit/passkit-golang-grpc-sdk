//*
// Reporting
//
// Analytics reports for your digital pass performance.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/common/reporting.proto

package io

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Period int32

const (
	// Show individual data by day.
	Period_DAY Period = 0
	// Default response will be in months.
	Period_MONTH Period = 1
	// Show individual data by year.
	Period_YEAR Period = 2
)

// Enum value maps for Period.
var (
	Period_name = map[int32]string{
		0: "DAY",
		1: "MONTH",
		2: "YEAR",
	}
	Period_value = map[string]int32{
		"DAY":   0,
		"MONTH": 1,
		"YEAR":  2,
	}
)

func (x Period) Enum() *Period {
	p := new(Period)
	*p = x
	return p
}

func (x Period) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Period) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_reporting_proto_enumTypes[0].Descriptor()
}

func (Period) Type() protoreflect.EnumType {
	return &file_io_common_reporting_proto_enumTypes[0]
}

func (x Period) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Period.Descriptor instead.
func (Period) EnumDescriptor() ([]byte, []int) {
	return file_io_common_reporting_proto_rawDescGZIP(), []int{0}
}

type AnalyticsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Period that the response data is grouped by by: per DAY, MONTH or YEAR.
	Period Period `protobuf:"varint,1,opt,name=period,proto3,enum=io.Period" json:"period,omitempty"`
	// Total number of passes created during the requested period.
	Created uint32 `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`
	// Total number of passes installed during the requested period.
	Installed uint32 `protobuf:"varint,3,opt,name=installed,proto3" json:"installed,omitempty"`
	// Total number of passes deleted during the requested period.
	Deleted uint32 `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Total number of passes invalidated during the requested period.
	Invalidated uint32 `protobuf:"varint,5,opt,name=invalidated,proto3" json:"invalidated,omitempty"`
	// Total number of passes installed for each device type.
	DeviceBreakdown *DeviceBreakdown `protobuf:"bytes,6,opt,name=deviceBreakdown,proto3" json:"deviceBreakdown,omitempty"`
	// Total number of passes installed for each distribution source.
	UtmSourceBreakdown map[string]uint32 `protobuf:"bytes,7,rep,name=utmSourceBreakdown,proto3" json:"utmSourceBreakdown,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Breakdown of data by day, month or year.
	Data []*ChartDataPoints `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty"`
	// Breakdown of data by utm medium.
	UtmMediumBreakdown map[string]uint32 `protobuf:"bytes,9,rep,name=utmMediumBreakdown,proto3" json:"utmMediumBreakdown,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Breakdown of data by utm name.
	UtmNameBreakdown map[string]uint32 `protobuf:"bytes,10,rep,name=utmNameBreakdown,proto3" json:"utmNameBreakdown,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Breakdown of data by utm term.
	UtmTermBreakdown map[string]uint32 `protobuf:"bytes,11,rep,name=utmTermBreakdown,proto3" json:"utmTermBreakdown,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Breakdown of data by utm content.
	UtmContentBreakdown map[string]uint32 `protobuf:"bytes,12,rep,name=utmContentBreakdown,proto3" json:"utmContentBreakdown,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AnalyticsResponse) Reset() {
	*x = AnalyticsResponse{}
	mi := &file_io_common_reporting_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsResponse) ProtoMessage() {}

func (x *AnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_reporting_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsResponse.ProtoReflect.Descriptor instead.
func (*AnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_io_common_reporting_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyticsResponse) GetPeriod() Period {
	if x != nil {
		return x.Period
	}
	return Period_DAY
}

func (x *AnalyticsResponse) GetCreated() uint32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *AnalyticsResponse) GetInstalled() uint32 {
	if x != nil {
		return x.Installed
	}
	return 0
}

func (x *AnalyticsResponse) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *AnalyticsResponse) GetInvalidated() uint32 {
	if x != nil {
		return x.Invalidated
	}
	return 0
}

func (x *AnalyticsResponse) GetDeviceBreakdown() *DeviceBreakdown {
	if x != nil {
		return x.DeviceBreakdown
	}
	return nil
}

func (x *AnalyticsResponse) GetUtmSourceBreakdown() map[string]uint32 {
	if x != nil {
		return x.UtmSourceBreakdown
	}
	return nil
}

func (x *AnalyticsResponse) GetData() []*ChartDataPoints {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AnalyticsResponse) GetUtmMediumBreakdown() map[string]uint32 {
	if x != nil {
		return x.UtmMediumBreakdown
	}
	return nil
}

func (x *AnalyticsResponse) GetUtmNameBreakdown() map[string]uint32 {
	if x != nil {
		return x.UtmNameBreakdown
	}
	return nil
}

func (x *AnalyticsResponse) GetUtmTermBreakdown() map[string]uint32 {
	if x != nil {
		return x.UtmTermBreakdown
	}
	return nil
}

func (x *AnalyticsResponse) GetUtmContentBreakdown() map[string]uint32 {
	if x != nil {
		return x.UtmContentBreakdown
	}
	return nil
}

type DeviceBreakdown struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total number of passes installed in Apple Wallet.
	AppleWallet uint32 `protobuf:"varint,1,opt,name=appleWallet,proto3" json:"appleWallet,omitempty"`
	// Total number of passes installed in Google Pay.
	GooglePay uint32 `protobuf:"varint,2,opt,name=googlePay,proto3" json:"googlePay,omitempty"`
	// Total number of passes installed in Other Wallet.
	OtherWallet   uint32 `protobuf:"varint,3,opt,name=otherWallet,proto3" json:"otherWallet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceBreakdown) Reset() {
	*x = DeviceBreakdown{}
	mi := &file_io_common_reporting_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceBreakdown) ProtoMessage() {}

func (x *DeviceBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_reporting_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceBreakdown.ProtoReflect.Descriptor instead.
func (*DeviceBreakdown) Descriptor() ([]byte, []int) {
	return file_io_common_reporting_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceBreakdown) GetAppleWallet() uint32 {
	if x != nil {
		return x.AppleWallet
	}
	return 0
}

func (x *DeviceBreakdown) GetGooglePay() uint32 {
	if x != nil {
		return x.GooglePay
	}
	return 0
}

func (x *DeviceBreakdown) GetOtherWallet() uint32 {
	if x != nil {
		return x.OtherWallet
	}
	return 0
}

type ChartDataPoints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ie. January, Monday
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Daily, monthly or yearly total of pass created.
	Created uint32 `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`
	// Daily, monthly or yearly total of pass installed.
	Installed uint32 `protobuf:"varint,3,opt,name=installed,proto3" json:"installed,omitempty"`
	// Daily, monthly or yearly total of pass updated.
	Updated uint32 `protobuf:"varint,4,opt,name=updated,proto3" json:"updated,omitempty"`
	// Daily, monthly or yearly total of pass deleted.
	Deleted uint32 `protobuf:"varint,5,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Daily, monthly or yearly total of pass invalidated.
	Invalidated uint32 `protobuf:"varint,6,opt,name=invalidated,proto3" json:"invalidated,omitempty"`
	// Daily, monthly or yearly total of custom data (in case this field used by a protocol; it can put whatever is preferred in here).
	Custom        uint32 `protobuf:"varint,7,opt,name=custom,proto3" json:"custom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChartDataPoints) Reset() {
	*x = ChartDataPoints{}
	mi := &file_io_common_reporting_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartDataPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartDataPoints) ProtoMessage() {}

func (x *ChartDataPoints) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_reporting_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartDataPoints.ProtoReflect.Descriptor instead.
func (*ChartDataPoints) Descriptor() ([]byte, []int) {
	return file_io_common_reporting_proto_rawDescGZIP(), []int{2}
}

func (x *ChartDataPoints) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChartDataPoints) GetCreated() uint32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ChartDataPoints) GetInstalled() uint32 {
	if x != nil {
		return x.Installed
	}
	return 0
}

func (x *ChartDataPoints) GetUpdated() uint32 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *ChartDataPoints) GetDeleted() uint32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *ChartDataPoints) GetInvalidated() uint32 {
	if x != nil {
		return x.Invalidated
	}
	return 0
}

func (x *ChartDataPoints) GetCustom() uint32 {
	if x != nil {
		return x.Custom
	}
	return 0
}

type AnalyticsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The protocol that you are requesting analytics for, i.e. MEMBERSHIP, SINGLE_USE_COUPON, EVENT_TICKETS, FLIGHTS, etc.
	// @tag: validateGeneric:"required"
	Protocol PassProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty" validateGeneric:"required"`
	// The ID of the highest level element in the protocol. For Membership this is the Program ID, for coupons this is the Campaign ID, For Event Tickets this is Production, For Flight this is CarrierCode.
	// @tag: validateGeneric:"required"
	ClassId string `protobuf:"bytes,2,opt,name=classId,proto3" json:"classId,omitempty" validateGeneric:"required"`
	// The Period to group the response data by: per DAY, MONTH or YEAR.
	// @tag: validateGeneric:"omitempty"
	Period Period `protobuf:"varint,3,opt,name=period,proto3,enum=io.Period" json:"period,omitempty" validateGeneric:"omitempty"`
	// Start date sets the oldest date of the data to be shown.
	// @tag: validateGeneric:"required"
	StartDate string `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty" validateGeneric:"required"`
	// End date sets the latest date of the data to be shown.
	// @tag: validateGeneric:"required"
	EndDate string `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty" validateGeneric:"required"`
	// Timezone in IANA format; defaults to UTC if not provided.
	// @tag: validateGeneric:"omitempty"
	Timezone string `protobuf:"bytes,6,opt,name=timezone,proto3" json:"timezone,omitempty" validateGeneric:"omitempty"`
	// @tag: validateGeneric:"omitempty"
	//
	// Types that are valid to be assigned to Filter:
	//
	//	*AnalyticsRequest_Coupon
	//	*AnalyticsRequest_Flight
	//	*AnalyticsRequest_EventTicket
	Filter        isAnalyticsRequest_Filter `protobuf_oneof:"filter" validateGeneric:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyticsRequest) Reset() {
	*x = AnalyticsRequest{}
	mi := &file_io_common_reporting_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsRequest) ProtoMessage() {}

func (x *AnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_reporting_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsRequest.ProtoReflect.Descriptor instead.
func (*AnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_io_common_reporting_proto_rawDescGZIP(), []int{3}
}

func (x *AnalyticsRequest) GetProtocol() PassProtocol {
	if x != nil {
		return x.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

func (x *AnalyticsRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *AnalyticsRequest) GetPeriod() Period {
	if x != nil {
		return x.Period
	}
	return Period_DAY
}

func (x *AnalyticsRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *AnalyticsRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *AnalyticsRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *AnalyticsRequest) GetFilter() isAnalyticsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *AnalyticsRequest) GetCoupon() *CouponAnalyticsFilter {
	if x != nil {
		if x, ok := x.Filter.(*AnalyticsRequest_Coupon); ok {
			return x.Coupon
		}
	}
	return nil
}

func (x *AnalyticsRequest) GetFlight() *FlightAnalyticsFilter {
	if x != nil {
		if x, ok := x.Filter.(*AnalyticsRequest_Flight); ok {
			return x.Flight
		}
	}
	return nil
}

func (x *AnalyticsRequest) GetEventTicket() *EventTicketAnalyticsFilter {
	if x != nil {
		if x, ok := x.Filter.(*AnalyticsRequest_EventTicket); ok {
			return x.EventTicket
		}
	}
	return nil
}

type isAnalyticsRequest_Filter interface {
	isAnalyticsRequest_Filter()
}

type AnalyticsRequest_Coupon struct {
	Coupon *CouponAnalyticsFilter `protobuf:"bytes,15,opt,name=coupon,proto3,oneof"`
}

type AnalyticsRequest_Flight struct {
	Flight *FlightAnalyticsFilter `protobuf:"bytes,16,opt,name=flight,proto3,oneof"`
}

type AnalyticsRequest_EventTicket struct {
	EventTicket *EventTicketAnalyticsFilter `protobuf:"bytes,17,opt,name=eventTicket,proto3,oneof"`
}

func (*AnalyticsRequest_Coupon) isAnalyticsRequest_Filter() {}

func (*AnalyticsRequest_Flight) isAnalyticsRequest_Filter() {}

func (*AnalyticsRequest_EventTicket) isAnalyticsRequest_Filter() {}

type CouponAnalyticsFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OfferId       string                 `protobuf:"bytes,1,opt,name=offerId,proto3" json:"offerId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CouponAnalyticsFilter) Reset() {
	*x = CouponAnalyticsFilter{}
	mi := &file_io_common_reporting_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CouponAnalyticsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponAnalyticsFilter) ProtoMessage() {}

func (x *CouponAnalyticsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_reporting_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponAnalyticsFilter.ProtoReflect.Descriptor instead.
func (*CouponAnalyticsFilter) Descriptor() ([]byte, []int) {
	return file_io_common_reporting_proto_rawDescGZIP(), []int{4}
}

func (x *CouponAnalyticsFilter) GetOfferId() string {
	if x != nil {
		return x.OfferId
	}
	return ""
}

// FlightAnalyticsFilter filter analytics by flight or/and flight designator.
// FlightNumber, departureDate, boardingPoint and deplaningPoint are required to filter by flight.
type FlightAnalyticsFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required_with=DepartureDate BoardingPoint DeplaningPoint"
	FlightNumber string `protobuf:"bytes,1,opt,name=flightNumber,proto3" json:"flightNumber,omitempty" validateGeneric:"required_with=DepartureDate BoardingPoint DeplaningPoint"`
	// @tag: validateGeneric:"required_with=BoardingPoint DeplaningPoint"
	DepartureDate *Date `protobuf:"bytes,2,opt,name=departureDate,proto3" json:"departureDate,omitempty" validateGeneric:"required_with=BoardingPoint DeplaningPoint"`
	// @tag: validateGeneric:"required_with=DepartureDate DeplaningPoint"
	BoardingPoint string `protobuf:"bytes,3,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty" validateGeneric:"required_with=DepartureDate DeplaningPoint"`
	// @tag: validateGeneric:"required_with=DepartureDate BoardingPoint"
	DeplaningPoint string `protobuf:"bytes,4,opt,name=deplaningPoint,proto3" json:"deplaningPoint,omitempty" validateGeneric:"required_with=DepartureDate BoardingPoint"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FlightAnalyticsFilter) Reset() {
	*x = FlightAnalyticsFilter{}
	mi := &file_io_common_reporting_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlightAnalyticsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightAnalyticsFilter) ProtoMessage() {}

func (x *FlightAnalyticsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_reporting_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightAnalyticsFilter.ProtoReflect.Descriptor instead.
func (*FlightAnalyticsFilter) Descriptor() ([]byte, []int) {
	return file_io_common_reporting_proto_rawDescGZIP(), []int{5}
}

func (x *FlightAnalyticsFilter) GetFlightNumber() string {
	if x != nil {
		return x.FlightNumber
	}
	return ""
}

func (x *FlightAnalyticsFilter) GetDepartureDate() *Date {
	if x != nil {
		return x.DepartureDate
	}
	return nil
}

func (x *FlightAnalyticsFilter) GetBoardingPoint() string {
	if x != nil {
		return x.BoardingPoint
	}
	return ""
}

func (x *FlightAnalyticsFilter) GetDeplaningPoint() string {
	if x != nil {
		return x.DeplaningPoint
	}
	return ""
}

type EventTicketAnalyticsFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TicketTypeId  string                 `protobuf:"bytes,1,opt,name=ticketTypeId,proto3" json:"ticketTypeId,omitempty"`
	TicketTypeUid string                 `protobuf:"bytes,2,opt,name=ticketTypeUid,proto3" json:"ticketTypeUid,omitempty"`
	VenueId       string                 `protobuf:"bytes,3,opt,name=venueId,proto3" json:"venueId,omitempty"`
	VenueUid      string                 `protobuf:"bytes,4,opt,name=venueUid,proto3" json:"venueUid,omitempty"`
	EventId       string                 `protobuf:"bytes,5,opt,name=eventId,proto3" json:"eventId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventTicketAnalyticsFilter) Reset() {
	*x = EventTicketAnalyticsFilter{}
	mi := &file_io_common_reporting_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTicketAnalyticsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTicketAnalyticsFilter) ProtoMessage() {}

func (x *EventTicketAnalyticsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_reporting_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTicketAnalyticsFilter.ProtoReflect.Descriptor instead.
func (*EventTicketAnalyticsFilter) Descriptor() ([]byte, []int) {
	return file_io_common_reporting_proto_rawDescGZIP(), []int{6}
}

func (x *EventTicketAnalyticsFilter) GetTicketTypeId() string {
	if x != nil {
		return x.TicketTypeId
	}
	return ""
}

func (x *EventTicketAnalyticsFilter) GetTicketTypeUid() string {
	if x != nil {
		return x.TicketTypeUid
	}
	return ""
}

func (x *EventTicketAnalyticsFilter) GetVenueId() string {
	if x != nil {
		return x.VenueId
	}
	return ""
}

func (x *EventTicketAnalyticsFilter) GetVenueUid() string {
	if x != nil {
		return x.VenueUid
	}
	return ""
}

func (x *EventTicketAnalyticsFilter) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

var File_io_common_reporting_proto protoreflect.FileDescriptor

var file_io_common_reporting_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x69, 0x6f, 0x1a,
	0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x08, 0x0a, 0x11, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x5d, 0x0a, 0x12, 0x75, 0x74, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x74, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x5d, 0x0a, 0x12, 0x75, 0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x55, 0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x75, 0x74, 0x6d, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x57,
	0x0a, 0x10, 0x75, 0x74, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x55, 0x74, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x75, 0x74, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x57, 0x0a, 0x10, 0x75, 0x74, 0x6d, 0x54, 0x65,
	0x72, 0x6d, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x74, 0x6d, 0x54, 0x65, 0x72, 0x6d,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x75, 0x74, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x60, 0x0a, 0x13, 0x75, 0x74, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x69, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x74, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x75,
	0x74, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x1a, 0x45, 0x0a, 0x17, 0x55, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x55, 0x74, 0x6d,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x43, 0x0a, 0x15, 0x55, 0x74, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x55, 0x74, 0x6d, 0x54, 0x65, 0x72, 0x6d,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x55, 0x74,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x73, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x50, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x50, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0xfa, 0x03, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69,
	0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x2e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x3a, 0x6e, 0x92, 0x41, 0x6b, 0x0a, 0x69, 0x2a,
	0x11, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x3f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2c, 0x20,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2e, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0xd2, 0x01,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x31, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x70,
	0x6c, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x22, 0xb6, 0x01, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x55, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2a, 0x26, 0x0a, 0x06, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x45, 0x41, 0x52,
	0x10, 0x02, 0x42, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x24, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61,
	0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0xaa, 0x02, 0x0c, 0x50,
	0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_io_common_reporting_proto_rawDescOnce sync.Once
	file_io_common_reporting_proto_rawDescData []byte
)

func file_io_common_reporting_proto_rawDescGZIP() []byte {
	file_io_common_reporting_proto_rawDescOnce.Do(func() {
		file_io_common_reporting_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_common_reporting_proto_rawDesc), len(file_io_common_reporting_proto_rawDesc)))
	})
	return file_io_common_reporting_proto_rawDescData
}

var file_io_common_reporting_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_io_common_reporting_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_io_common_reporting_proto_goTypes = []any{
	(Period)(0),                        // 0: io.Period
	(*AnalyticsResponse)(nil),          // 1: io.AnalyticsResponse
	(*DeviceBreakdown)(nil),            // 2: io.DeviceBreakdown
	(*ChartDataPoints)(nil),            // 3: io.ChartDataPoints
	(*AnalyticsRequest)(nil),           // 4: io.AnalyticsRequest
	(*CouponAnalyticsFilter)(nil),      // 5: io.CouponAnalyticsFilter
	(*FlightAnalyticsFilter)(nil),      // 6: io.FlightAnalyticsFilter
	(*EventTicketAnalyticsFilter)(nil), // 7: io.EventTicketAnalyticsFilter
	nil,                                // 8: io.AnalyticsResponse.UtmSourceBreakdownEntry
	nil,                                // 9: io.AnalyticsResponse.UtmMediumBreakdownEntry
	nil,                                // 10: io.AnalyticsResponse.UtmNameBreakdownEntry
	nil,                                // 11: io.AnalyticsResponse.UtmTermBreakdownEntry
	nil,                                // 12: io.AnalyticsResponse.UtmContentBreakdownEntry
	(PassProtocol)(0),                  // 13: io.PassProtocol
	(*Date)(nil),                       // 14: io.Date
}
var file_io_common_reporting_proto_depIdxs = []int32{
	0,  // 0: io.AnalyticsResponse.period:type_name -> io.Period
	2,  // 1: io.AnalyticsResponse.deviceBreakdown:type_name -> io.DeviceBreakdown
	8,  // 2: io.AnalyticsResponse.utmSourceBreakdown:type_name -> io.AnalyticsResponse.UtmSourceBreakdownEntry
	3,  // 3: io.AnalyticsResponse.data:type_name -> io.ChartDataPoints
	9,  // 4: io.AnalyticsResponse.utmMediumBreakdown:type_name -> io.AnalyticsResponse.UtmMediumBreakdownEntry
	10, // 5: io.AnalyticsResponse.utmNameBreakdown:type_name -> io.AnalyticsResponse.UtmNameBreakdownEntry
	11, // 6: io.AnalyticsResponse.utmTermBreakdown:type_name -> io.AnalyticsResponse.UtmTermBreakdownEntry
	12, // 7: io.AnalyticsResponse.utmContentBreakdown:type_name -> io.AnalyticsResponse.UtmContentBreakdownEntry
	13, // 8: io.AnalyticsRequest.protocol:type_name -> io.PassProtocol
	0,  // 9: io.AnalyticsRequest.period:type_name -> io.Period
	5,  // 10: io.AnalyticsRequest.coupon:type_name -> io.CouponAnalyticsFilter
	6,  // 11: io.AnalyticsRequest.flight:type_name -> io.FlightAnalyticsFilter
	7,  // 12: io.AnalyticsRequest.eventTicket:type_name -> io.EventTicketAnalyticsFilter
	14, // 13: io.FlightAnalyticsFilter.departureDate:type_name -> io.Date
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_io_common_reporting_proto_init() }
func file_io_common_reporting_proto_init() {
	if File_io_common_reporting_proto != nil {
		return
	}
	file_io_common_protocols_proto_init()
	file_io_common_common_objects_proto_init()
	file_io_common_reporting_proto_msgTypes[3].OneofWrappers = []any{
		(*AnalyticsRequest_Coupon)(nil),
		(*AnalyticsRequest_Flight)(nil),
		(*AnalyticsRequest_EventTicket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_common_reporting_proto_rawDesc), len(file_io_common_reporting_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_common_reporting_proto_goTypes,
		DependencyIndexes: file_io_common_reporting_proto_depIdxs,
		EnumInfos:         file_io_common_reporting_proto_enumTypes,
		MessageInfos:      file_io_common_reporting_proto_msgTypes,
	}.Build()
	File_io_common_reporting_proto = out.File
	file_io_common_reporting_proto_goTypes = nil
	file_io_common_reporting_proto_depIdxs = nil
}
