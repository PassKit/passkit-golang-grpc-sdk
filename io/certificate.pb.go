// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/certificate/certificate.proto

package io

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CertificateData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PassTypeId    string                 `protobuf:"bytes,1,opt,name=passTypeId,proto3" json:"passTypeId,omitempty"`
	TeamId        string                 `protobuf:"bytes,2,opt,name=teamId,proto3" json:"teamId,omitempty"`
	TeamName      string                 `protobuf:"bytes,3,opt,name=teamName,proto3" json:"teamName,omitempty"`
	SerialNumber  string                 `protobuf:"bytes,4,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	ValidFrom     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=validFrom,proto3" json:"validFrom,omitempty"`
	ValidTo       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=validTo,proto3" json:"validTo,omitempty"`
	Modulus       string                 `protobuf:"bytes,7,opt,name=modulus,proto3" json:"modulus,omitempty"`
	NfcCapable    bool                   `protobuf:"varint,8,opt,name=nfcCapable,proto3" json:"nfcCapable,omitempty"`
	OwnerUsername string                 `protobuf:"bytes,9,opt,name=ownerUsername,proto3" json:"ownerUsername,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateData) Reset() {
	*x = CertificateData{}
	mi := &file_io_certificate_certificate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateData) ProtoMessage() {}

func (x *CertificateData) ProtoReflect() protoreflect.Message {
	mi := &file_io_certificate_certificate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateData.ProtoReflect.Descriptor instead.
func (*CertificateData) Descriptor() ([]byte, []int) {
	return file_io_certificate_certificate_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateData) GetPassTypeId() string {
	if x != nil {
		return x.PassTypeId
	}
	return ""
}

func (x *CertificateData) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *CertificateData) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *CertificateData) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *CertificateData) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *CertificateData) GetValidTo() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidTo
	}
	return nil
}

func (x *CertificateData) GetModulus() string {
	if x != nil {
		return x.Modulus
	}
	return ""
}

func (x *CertificateData) GetNfcCapable() bool {
	if x != nil {
		return x.NfcCapable
	}
	return false
}

func (x *CertificateData) GetOwnerUsername() string {
	if x != nil {
		return x.OwnerUsername
	}
	return ""
}

type PrivateKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Expiry        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	PrivateKey    []byte                 `protobuf:"bytes,4,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrivateKeyRequest) Reset() {
	*x = PrivateKeyRequest{}
	mi := &file_io_certificate_certificate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKeyRequest) ProtoMessage() {}

func (x *PrivateKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_certificate_certificate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKeyRequest.ProtoReflect.Descriptor instead.
func (*PrivateKeyRequest) Descriptor() ([]byte, []int) {
	return file_io_certificate_certificate_proto_rawDescGZIP(), []int{1}
}

func (x *PrivateKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrivateKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PrivateKeyRequest) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *PrivateKeyRequest) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type TLSCertificateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Certificate   []byte                 `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	CaChain       []byte                 `protobuf:"bytes,2,opt,name=caChain,proto3" json:"caChain,omitempty"`
	PrivateKey    []byte                 `protobuf:"bytes,3,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSCertificateRequest) Reset() {
	*x = TLSCertificateRequest{}
	mi := &file_io_certificate_certificate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSCertificateRequest) ProtoMessage() {}

func (x *TLSCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_certificate_certificate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSCertificateRequest.ProtoReflect.Descriptor instead.
func (*TLSCertificateRequest) Descriptor() ([]byte, []int) {
	return file_io_certificate_certificate_proto_rawDescGZIP(), []int{2}
}

func (x *TLSCertificateRequest) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *TLSCertificateRequest) GetCaChain() []byte {
	if x != nil {
		return x.CaChain
	}
	return nil
}

func (x *TLSCertificateRequest) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type TLSCertificateData struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Id                      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CommonName              string                 `protobuf:"bytes,2,opt,name=commonName,proto3" json:"commonName,omitempty"`
	SerialNumber            string                 `protobuf:"bytes,3,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	ValidFrom               *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=validFrom,proto3" json:"validFrom,omitempty"`
	ValidTo                 *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=validTo,proto3" json:"validTo,omitempty"`
	Modulus                 string                 `protobuf:"bytes,6,opt,name=modulus,proto3" json:"modulus,omitempty"`
	SubjectAlternativeNames []string               `protobuf:"bytes,7,rep,name=subjectAlternativeNames,proto3" json:"subjectAlternativeNames,omitempty"`
	OwnerUsername           string                 `protobuf:"bytes,8,opt,name=ownerUsername,proto3" json:"ownerUsername,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TLSCertificateData) Reset() {
	*x = TLSCertificateData{}
	mi := &file_io_certificate_certificate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSCertificateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSCertificateData) ProtoMessage() {}

func (x *TLSCertificateData) ProtoReflect() protoreflect.Message {
	mi := &file_io_certificate_certificate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSCertificateData.ProtoReflect.Descriptor instead.
func (*TLSCertificateData) Descriptor() ([]byte, []int) {
	return file_io_certificate_certificate_proto_rawDescGZIP(), []int{3}
}

func (x *TLSCertificateData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TLSCertificateData) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *TLSCertificateData) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TLSCertificateData) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *TLSCertificateData) GetValidTo() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidTo
	}
	return nil
}

func (x *TLSCertificateData) GetModulus() string {
	if x != nil {
		return x.Modulus
	}
	return ""
}

func (x *TLSCertificateData) GetSubjectAlternativeNames() []string {
	if x != nil {
		return x.SubjectAlternativeNames
	}
	return nil
}

func (x *TLSCertificateData) GetOwnerUsername() string {
	if x != nil {
		return x.OwnerUsername
	}
	return ""
}

type PrivateKeyData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Expiry        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	OwnerUsername string                 `protobuf:"bytes,5,opt,name=ownerUsername,proto3" json:"ownerUsername,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrivateKeyData) Reset() {
	*x = PrivateKeyData{}
	mi := &file_io_certificate_certificate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateKeyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKeyData) ProtoMessage() {}

func (x *PrivateKeyData) ProtoReflect() protoreflect.Message {
	mi := &file_io_certificate_certificate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKeyData.ProtoReflect.Descriptor instead.
func (*PrivateKeyData) Descriptor() ([]byte, []int) {
	return file_io_certificate_certificate_proto_rawDescGZIP(), []int{4}
}

func (x *PrivateKeyData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PrivateKeyData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrivateKeyData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PrivateKeyData) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *PrivateKeyData) GetOwnerUsername() string {
	if x != nil {
		return x.OwnerUsername
	}
	return ""
}

type PassTypeIdentifier struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PassTypeId    string                 `protobuf:"bytes,1,opt,name=passTypeId,proto3" json:"passTypeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PassTypeIdentifier) Reset() {
	*x = PassTypeIdentifier{}
	mi := &file_io_certificate_certificate_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassTypeIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassTypeIdentifier) ProtoMessage() {}

func (x *PassTypeIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_io_certificate_certificate_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassTypeIdentifier.ProtoReflect.Descriptor instead.
func (*PassTypeIdentifier) Descriptor() ([]byte, []int) {
	return file_io_certificate_certificate_proto_rawDescGZIP(), []int{5}
}

func (x *PassTypeIdentifier) GetPassTypeId() string {
	if x != nil {
		return x.PassTypeId
	}
	return ""
}

type CertificateSigningRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Csr           string                 `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateSigningRequest) Reset() {
	*x = CertificateSigningRequest{}
	mi := &file_io_certificate_certificate_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateSigningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateSigningRequest) ProtoMessage() {}

func (x *CertificateSigningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_certificate_certificate_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateSigningRequest.ProtoReflect.Descriptor instead.
func (*CertificateSigningRequest) Descriptor() ([]byte, []int) {
	return file_io_certificate_certificate_proto_rawDescGZIP(), []int{6}
}

func (x *CertificateSigningRequest) GetCsr() string {
	if x != nil {
		return x.Csr
	}
	return ""
}

type NFCSigningCredentialsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	PrivateKeyId  string                 `protobuf:"bytes,2,opt,name=privateKeyId,proto3" json:"privateKeyId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NFCSigningCredentialsRequest) Reset() {
	*x = NFCSigningCredentialsRequest{}
	mi := &file_io_certificate_certificate_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NFCSigningCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFCSigningCredentialsRequest) ProtoMessage() {}

func (x *NFCSigningCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_certificate_certificate_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFCSigningCredentialsRequest.ProtoReflect.Descriptor instead.
func (*NFCSigningCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_io_certificate_certificate_proto_rawDescGZIP(), []int{7}
}

func (x *NFCSigningCredentialsRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *NFCSigningCredentialsRequest) GetPrivateKeyId() string {
	if x != nil {
		return x.PrivateKeyId
	}
	return ""
}

var File_io_certificate_certificate_proto protoreflect.FileDescriptor

var file_io_certificate_certificate_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x69, 0x6f, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x69, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x02, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x34, 0x0a,
	0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6e, 0x66, 0x63, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6e, 0x66, 0x63, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x22, 0x73, 0x0a, 0x15, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x61, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x61, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xd2, 0x02, 0x0a, 0x12, 0x54, 0x4c, 0x53,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x34, 0x0a,
	0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb0, 0x01,
	0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x34, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x73, 0x72, 0x22, 0x5e, 0x0a, 0x1c, 0x4e, 0x46, 0x43, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x42, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73,
	0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x24, 0x73, 0x74, 0x61, 0x73, 0x68,
	0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0xaa,
	0x02, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_certificate_certificate_proto_rawDescOnce sync.Once
	file_io_certificate_certificate_proto_rawDescData []byte
)

func file_io_certificate_certificate_proto_rawDescGZIP() []byte {
	file_io_certificate_certificate_proto_rawDescOnce.Do(func() {
		file_io_certificate_certificate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_certificate_certificate_proto_rawDesc), len(file_io_certificate_certificate_proto_rawDesc)))
	})
	return file_io_certificate_certificate_proto_rawDescData
}

var file_io_certificate_certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_io_certificate_certificate_proto_goTypes = []any{
	(*CertificateData)(nil),              // 0: io.CertificateData
	(*PrivateKeyRequest)(nil),            // 1: io.PrivateKeyRequest
	(*TLSCertificateRequest)(nil),        // 2: io.TLSCertificateRequest
	(*TLSCertificateData)(nil),           // 3: io.TLSCertificateData
	(*PrivateKeyData)(nil),               // 4: io.PrivateKeyData
	(*PassTypeIdentifier)(nil),           // 5: io.PassTypeIdentifier
	(*CertificateSigningRequest)(nil),    // 6: io.CertificateSigningRequest
	(*NFCSigningCredentialsRequest)(nil), // 7: io.NFCSigningCredentialsRequest
	(*timestamppb.Timestamp)(nil),        // 8: google.protobuf.Timestamp
}
var file_io_certificate_certificate_proto_depIdxs = []int32{
	8, // 0: io.CertificateData.validFrom:type_name -> google.protobuf.Timestamp
	8, // 1: io.CertificateData.validTo:type_name -> google.protobuf.Timestamp
	8, // 2: io.PrivateKeyRequest.expiry:type_name -> google.protobuf.Timestamp
	8, // 3: io.TLSCertificateData.validFrom:type_name -> google.protobuf.Timestamp
	8, // 4: io.TLSCertificateData.validTo:type_name -> google.protobuf.Timestamp
	8, // 5: io.PrivateKeyData.expiry:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_io_certificate_certificate_proto_init() }
func file_io_certificate_certificate_proto_init() {
	if File_io_certificate_certificate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_certificate_certificate_proto_rawDesc), len(file_io_certificate_certificate_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_certificate_certificate_proto_goTypes,
		DependencyIndexes: file_io_certificate_certificate_proto_depIdxs,
		MessageInfos:      file_io_certificate_certificate_proto_msgTypes,
	}.Build()
	File_io_certificate_certificate_proto = out.File
	file_io_certificate_certificate_proto_goTypes = nil
	file_io_certificate_certificate_proto_depIdxs = nil
}
