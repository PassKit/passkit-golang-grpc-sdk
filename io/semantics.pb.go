// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/common/semantics.proto

package io

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_EVENT_TYPE_NONE             EventType = 0
	EventType_EVENT_TYPE_GENERIC          EventType = 1
	EventType_EVENT_TYPE_MOVIE            EventType = 2
	EventType_EVENT_TYPE_CONFERENCE       EventType = 3
	EventType_EVENT_TYPE_CONVENTION       EventType = 4
	EventType_EVENT_TYPE_WORKSHOP         EventType = 5
	EventType_EVENT_TYPE_SOCIAL_GATHERING EventType = 6
	EventType_EVENT_TYPE_SPORTS           EventType = 7
	EventType_EVENT_TYPE_LIVE_PERFORMANCE EventType = 8
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_NONE",
		1: "EVENT_TYPE_GENERIC",
		2: "EVENT_TYPE_MOVIE",
		3: "EVENT_TYPE_CONFERENCE",
		4: "EVENT_TYPE_CONVENTION",
		5: "EVENT_TYPE_WORKSHOP",
		6: "EVENT_TYPE_SOCIAL_GATHERING",
		7: "EVENT_TYPE_SPORTS",
		8: "EVENT_TYPE_LIVE_PERFORMANCE",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_NONE":             0,
		"EVENT_TYPE_GENERIC":          1,
		"EVENT_TYPE_MOVIE":            2,
		"EVENT_TYPE_CONFERENCE":       3,
		"EVENT_TYPE_CONVENTION":       4,
		"EVENT_TYPE_WORKSHOP":         5,
		"EVENT_TYPE_SOCIAL_GATHERING": 6,
		"EVENT_TYPE_SPORTS":           7,
		"EVENT_TYPE_LIVE_PERFORMANCE": 8,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_semantics_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_io_common_semantics_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_io_common_semantics_proto_rawDescGZIP(), []int{0}
}

type SemanticCurrencyAmount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        float32                `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
	CurrencyCode  int32                  `protobuf:"varint,2,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemanticCurrencyAmount) Reset() {
	*x = SemanticCurrencyAmount{}
	mi := &file_io_common_semantics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemanticCurrencyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticCurrencyAmount) ProtoMessage() {}

func (x *SemanticCurrencyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_semantics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticCurrencyAmount.ProtoReflect.Descriptor instead.
func (*SemanticCurrencyAmount) Descriptor() ([]byte, []int) {
	return file_io_common_semantics_proto_rawDescGZIP(), []int{0}
}

func (x *SemanticCurrencyAmount) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SemanticCurrencyAmount) GetCurrencyCode() int32 {
	if x != nil {
		return x.CurrencyCode
	}
	return 0
}

type SemanticLocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      float64                `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemanticLocation) Reset() {
	*x = SemanticLocation{}
	mi := &file_io_common_semantics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemanticLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticLocation) ProtoMessage() {}

func (x *SemanticLocation) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_semantics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticLocation.ProtoReflect.Descriptor instead.
func (*SemanticLocation) Descriptor() ([]byte, []int) {
	return file_io_common_semantics_proto_rawDescGZIP(), []int{1}
}

func (x *SemanticLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *SemanticLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type SemanticPersonName struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	FamilyName string                 `protobuf:"bytes,1,opt,name=familyName,proto3" json:"familyName,omitempty"`
	GivenName  string                 `protobuf:"bytes,2,opt,name=givenName,proto3" json:"givenName,omitempty"`
	MiddleName string                 `protobuf:"bytes,3,opt,name=middleName,proto3" json:"middleName,omitempty"`
	NamePrefix string                 `protobuf:"bytes,4,opt,name=namePrefix,proto3" json:"namePrefix,omitempty"`
	NameSuffix string                 `protobuf:"bytes,5,opt,name=nameSuffix,proto3" json:"nameSuffix,omitempty"`
	Nickname   string                 `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// The phonetic representation of the person’s name.
	PhoneticRepresentation string `protobuf:"bytes,7,opt,name=phoneticRepresentation,proto3" json:"phoneticRepresentation,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SemanticPersonName) Reset() {
	*x = SemanticPersonName{}
	mi := &file_io_common_semantics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemanticPersonName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticPersonName) ProtoMessage() {}

func (x *SemanticPersonName) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_semantics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticPersonName.ProtoReflect.Descriptor instead.
func (*SemanticPersonName) Descriptor() ([]byte, []int) {
	return file_io_common_semantics_proto_rawDescGZIP(), []int{2}
}

func (x *SemanticPersonName) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *SemanticPersonName) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *SemanticPersonName) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *SemanticPersonName) GetNamePrefix() string {
	if x != nil {
		return x.NamePrefix
	}
	return ""
}

func (x *SemanticPersonName) GetNameSuffix() string {
	if x != nil {
		return x.NameSuffix
	}
	return ""
}

func (x *SemanticPersonName) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SemanticPersonName) GetPhoneticRepresentation() string {
	if x != nil {
		return x.PhoneticRepresentation
	}
	return ""
}

type SemanticSeat struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SeatDescription  string                 `protobuf:"bytes,1,opt,name=seatDescription,proto3" json:"seatDescription,omitempty"`
	SeatIdentifier   string                 `protobuf:"bytes,2,opt,name=seatIdentifier,proto3" json:"seatIdentifier,omitempty"`
	SeatNumber       string                 `protobuf:"bytes,3,opt,name=seatNumber,proto3" json:"seatNumber,omitempty"`
	SeatRow          string                 `protobuf:"bytes,4,opt,name=seatRow,proto3" json:"seatRow,omitempty"`
	SeatSection      string                 `protobuf:"bytes,5,opt,name=seatSection,proto3" json:"seatSection,omitempty"`
	SeatType         string                 `protobuf:"bytes,6,opt,name=seatType,proto3" json:"seatType,omitempty"`
	SeatSectionColor string                 `protobuf:"bytes,7,opt,name=seatSectionColor,proto3" json:"seatSectionColor,omitempty"`
	SeatLevel        string                 `protobuf:"bytes,8,opt,name=seatLevel,proto3" json:"seatLevel,omitempty"`
	SeatAisle        string                 `protobuf:"bytes,9,opt,name=seatAisle,proto3" json:"seatAisle,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SemanticSeat) Reset() {
	*x = SemanticSeat{}
	mi := &file_io_common_semantics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemanticSeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticSeat) ProtoMessage() {}

func (x *SemanticSeat) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_semantics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticSeat.ProtoReflect.Descriptor instead.
func (*SemanticSeat) Descriptor() ([]byte, []int) {
	return file_io_common_semantics_proto_rawDescGZIP(), []int{3}
}

func (x *SemanticSeat) GetSeatDescription() string {
	if x != nil {
		return x.SeatDescription
	}
	return ""
}

func (x *SemanticSeat) GetSeatIdentifier() string {
	if x != nil {
		return x.SeatIdentifier
	}
	return ""
}

func (x *SemanticSeat) GetSeatNumber() string {
	if x != nil {
		return x.SeatNumber
	}
	return ""
}

func (x *SemanticSeat) GetSeatRow() string {
	if x != nil {
		return x.SeatRow
	}
	return ""
}

func (x *SemanticSeat) GetSeatSection() string {
	if x != nil {
		return x.SeatSection
	}
	return ""
}

func (x *SemanticSeat) GetSeatType() string {
	if x != nil {
		return x.SeatType
	}
	return ""
}

func (x *SemanticSeat) GetSeatSectionColor() string {
	if x != nil {
		return x.SeatSectionColor
	}
	return ""
}

func (x *SemanticSeat) GetSeatLevel() string {
	if x != nil {
		return x.SeatLevel
	}
	return ""
}

func (x *SemanticSeat) GetSeatAisle() string {
	if x != nil {
		return x.SeatAisle
	}
	return ""
}

type SemanticWifiNetwork struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Ssid          string                 `protobuf:"bytes,2,opt,name=ssid,proto3" json:"ssid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemanticWifiNetwork) Reset() {
	*x = SemanticWifiNetwork{}
	mi := &file_io_common_semantics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemanticWifiNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticWifiNetwork) ProtoMessage() {}

func (x *SemanticWifiNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_semantics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticWifiNetwork.ProtoReflect.Descriptor instead.
func (*SemanticWifiNetwork) Descriptor() ([]byte, []int) {
	return file_io_common_semantics_proto_rawDescGZIP(), []int{4}
}

func (x *SemanticWifiNetwork) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SemanticWifiNetwork) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

type SemanticEventDateInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Date and time of the event.
	Date *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Indicates whether the pass omit displaying the time label i.e. just show the date.
	IgnoreTimeComponents bool `protobuf:"varint,2,opt,name=ignoreTimeComponents,proto3" json:"ignoreTimeComponents,omitempty"`
	// The time zone in which the event takes place.
	TimeZone      string `protobuf:"bytes,3,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemanticEventDateInfo) Reset() {
	*x = SemanticEventDateInfo{}
	mi := &file_io_common_semantics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemanticEventDateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticEventDateInfo) ProtoMessage() {}

func (x *SemanticEventDateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_semantics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticEventDateInfo.ProtoReflect.Descriptor instead.
func (*SemanticEventDateInfo) Descriptor() ([]byte, []int) {
	return file_io_common_semantics_proto_rawDescGZIP(), []int{5}
}

func (x *SemanticEventDateInfo) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *SemanticEventDateInfo) GetIgnoreTimeComponents() bool {
	if x != nil {
		return x.IgnoreTimeComponents
	}
	return false
}

func (x *SemanticEventDateInfo) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

type EventSemanticTags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Apple ID(s) for the artists featuring in an event. If the ID is not known or provided for a given artist, the ID can be found in the iTunes share URL.
	ArtistIds []string `protobuf:"bytes,1,rep,name=artistIds,proto3" json:"artistIds,omitempty"`
	// On tickets leveraging the team sports template, the logo text is hardcoded to be HOME TEAM ABBREVIATION vs AWAY TEAM ABBREVIATION. The abbreviations are fetched from the homeTeamAbbreviation and awayTeamAbbreviation semantic tags respectively.
	AwayTeamAbbreviation          string           `protobuf:"bytes,2,opt,name=awayTeamAbbreviation,proto3" json:"awayTeamAbbreviation,omitempty"`
	LocalizedAwayTeamAbbreviation *LocalizedString `protobuf:"bytes,3,opt,name=localizedAwayTeamAbbreviation,proto3" json:"localizedAwayTeamAbbreviation,omitempty"`
	// The home location of the away team. Use this key only for a sports event ticket.
	AwayTeamLocation          string           `protobuf:"bytes,4,opt,name=awayTeamLocation,proto3" json:"awayTeamLocation,omitempty"`
	LocalizedAwayTeamLocation *LocalizedString `protobuf:"bytes,5,opt,name=localizedAwayTeamLocation,proto3" json:"localizedAwayTeamLocation,omitempty"`
	// The name of the away team. Use this key only for a sports event ticket.
	AwayTeamName          string           `protobuf:"bytes,6,opt,name=awayTeamName,proto3" json:"awayTeamName,omitempty"`
	LocalizedAwayTeamName *LocalizedString `protobuf:"bytes,7,opt,name=localizedAwayTeamName,proto3" json:"localizedAwayTeamName,omitempty"`
	// The date and time the event ends. Use this key for any type of event ticket. If not provided, the end date value from the event object will be used.
	EventEndDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=eventEndDate,proto3" json:"eventEndDate,omitempty"`
	// The full name of the event, such as the title of a movie. Use this key for any type of event ticket.  Use if the event name requires localization, otherwise the production name will be used.
	EventName          string           `protobuf:"bytes,9,opt,name=eventName,proto3" json:"eventName,omitempty"`
	LocalizedEventName *LocalizedString `protobuf:"bytes,10,opt,name=localizedEventName,proto3" json:"localizedEventName,omitempty"`
	// // The date and time the event starts. Use this key for any type of event ticket. If not provided, the scheduled or actual start date value from the event object will be used.
	EventStartDate *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=eventStartDate,proto3" json:"eventStartDate,omitempty"`
	// The genre of the performance, such as “Classical”. Use this key for any type of event ticket.
	Genre          string           `protobuf:"bytes,12,opt,name=genre,proto3" json:"genre,omitempty"`
	LocalizedGenre *LocalizedString `protobuf:"bytes,13,opt,name=localizedGenre,proto3" json:"localizedGenre,omitempty"`
	// On tickets leveraging the team sports template, the logo text is hardcoded to be HOME TEAM ABBREVIATION vs AWAY TEAM ABBREVIATION. The abbreviations are fetched from the homeTeamAbbreviation and awayTeamAbbreviation semantic tags respectively.
	HomeTeamAbbreviation          string           `protobuf:"bytes,14,opt,name=homeTeamAbbreviation,proto3" json:"homeTeamAbbreviation,omitempty"`
	LocalizedHomeTeamAbbreviation *LocalizedString `protobuf:"bytes,15,opt,name=localizedHomeTeamAbbreviation,proto3" json:"localizedHomeTeamAbbreviation,omitempty"`
	// The home location of the home team. Use this key only for a sports event ticket.
	HomeTeamLocation          string           `protobuf:"bytes,16,opt,name=homeTeamLocation,proto3" json:"homeTeamLocation,omitempty"`
	LocalizedHomeTeamLocation *LocalizedString `protobuf:"bytes,17,opt,name=localizedHomeTeamLocation,proto3" json:"localizedHomeTeamLocation,omitempty"`
	// The name of the home team. Use this key only for a sports event ticket.
	HomeTeamName          string           `protobuf:"bytes,18,opt,name=homeTeamName,proto3" json:"homeTeamName,omitempty"`
	LocalizedHomeTeamName *LocalizedString `protobuf:"bytes,19,opt,name=localizedHomeTeamName,proto3" json:"localizedHomeTeamName,omitempty"`
	// The abbreviated league name for a sports event. Use this key only for a sports event ticket.
	LeagueAbbreviation          string           `protobuf:"bytes,20,opt,name=leagueAbbreviation,proto3" json:"leagueAbbreviation,omitempty"`
	LocalizedLeagueAbbreviation *LocalizedString `protobuf:"bytes,21,opt,name=localizedLeagueAbbreviation,proto3" json:"localizedLeagueAbbreviation,omitempty"`
	// The full league name for a sports event. Use this key only for a sports event ticket.
	LeagueName          string           `protobuf:"bytes,22,opt,name=leagueName,proto3" json:"leagueName,omitempty"`
	LocalizedLeagueName *LocalizedString `protobuf:"bytes,23,opt,name=localizedLeagueName,proto3" json:"localizedLeagueName,omitempty"`
	// An array of the full names of the performers and opening acts at the event, in decreasing order of significance.
	PerformerNames []string `protobuf:"bytes,24,rep,name=performerNames,proto3" json:"performerNames,omitempty"`
	// A Boolean value that determines whether the user’s device remains silent during an event or transit journey. The system may override the key and determine the length of the period of silence.
	SilenceRequested bool `protobuf:"varint,25,opt,name=silenceRequested,proto3" json:"silenceRequested,omitempty"`
	// The commonly used name of the sport. Use this key only for a sports event ticket.
	SportName          string           `protobuf:"bytes,26,opt,name=sportName,proto3" json:"sportName,omitempty"`
	LocalizedSportName *LocalizedString `protobuf:"bytes,27,opt,name=localizedSportName,proto3" json:"localizedSportName,omitempty"`
	// An object that represents the geographic coordinates of the venue.
	VenueLocation *SemanticLocation `protobuf:"bytes,28,opt,name=venueLocation,proto3" json:"venueLocation,omitempty"`
	// The phone number for enquiries about the venue’s ticketed event.
	VenuePhoneNumber string `protobuf:"bytes,29,opt,name=venuePhoneNumber,proto3" json:"venuePhoneNumber,omitempty"`
	// The full name of the room where the ticketed event is to take place. If a room is provided in the seat information, this value will be overwritten.
	VenueRoom          string           `protobuf:"bytes,30,opt,name=venueRoom,proto3" json:"venueRoom,omitempty"`
	LocalizedVenueRoom *LocalizedString `protobuf:"bytes,31,opt,name=localizedVenueRoom,proto3" json:"localizedVenueRoom,omitempty"`
	// An array of objects that represent the WiFi networks associated with the event; for example, the network name and password associated with a developer conference.
	WifiAccess []*SemanticWifiNetwork `protobuf:"bytes,32,rep,name=wifiAccess,proto3" json:"wifiAccess,omitempty"`
	// The name of the city or hosting region of the venue.
	VenueRegionName          string           `protobuf:"bytes,33,opt,name=venueRegionName,proto3" json:"venueRegionName,omitempty"`
	LocalizedVenueRegionName *LocalizedString `protobuf:"bytes,34,opt,name=localizedVenueRegionName,proto3" json:"localizedVenueRegionName,omitempty"`
	// Boolean value indicating that whether tailgating is allowed at the venue.
	TailgatingAllowed bool `protobuf:"varint,35,opt,name=tailgatingAllowed,proto3" json:"tailgatingAllowed,omitempty"`
	// Details of the entrance if further information is required.
	EntranceDescription          string           `protobuf:"bytes,36,opt,name=entranceDescription,proto3" json:"entranceDescription,omitempty"`
	LocalizedEntranceDescription *LocalizedString `protobuf:"bytes,37,opt,name=localizedEntranceDescription,proto3" json:"localizedEntranceDescription,omitempty"`
	// Time the gates to the venue open.
	VenueGatesOpenDate *timestamppb.Timestamp `protobuf:"bytes,38,opt,name=venueGatesOpenDate,proto3" json:"venueGatesOpenDate,omitempty"`
	// Time the fan zone opens.
	VenueFanZoneOpenDate *timestamppb.Timestamp `protobuf:"bytes,39,opt,name=venueFanZoneOpenDate,proto3" json:"venueFanZoneOpenDate,omitempty"`
	// Time the parking lots open.
	VenueParkingLotsOpenDate *timestamppb.Timestamp `protobuf:"bytes,40,opt,name=venueParkingLotsOpenDate,proto3" json:"venueParkingLotsOpenDate,omitempty"`
	// Time when the box office opens.
	VenueBoxOfficeOpenDate *timestamppb.Timestamp `protobuf:"bytes,41,opt,name=venueBoxOfficeOpenDate,proto3" json:"venueBoxOfficeOpenDate,omitempty"`
	// Time when the venue opens. Use if none of the more specific values above apply.
	VenueOpenDate *timestamppb.Timestamp `protobuf:"bytes,42,opt,name=venueOpenDate,proto3" json:"venueOpenDate,omitempty"`
	// Time when the venue closes.
	VenueCloseDate *timestamppb.Timestamp `protobuf:"bytes,43,opt,name=venueCloseDate,proto3" json:"venueCloseDate,omitempty"`
	// The Apple ID(s) for playlists applicable to the event. If the ID is not known or provided for a given playlist, the ID can be found in the iTunes share URL.
	PlaylistIds []string `protobuf:"bytes,44,rep,name=playlistIds,proto3" json:"playlistIds,omitempty"`
	// The Apple ID(s) for the albums for artists featuring in an event. If the ID is not known or provided for a given album, the ID can be found in the iTunes share URL.
	AlbumIds []string `protobuf:"bytes,45,rep,name=albumIds,proto3" json:"albumIds,omitempty"`
	// Additional information for the start date of the event.
	EventStartDateInfo *SemanticEventDateInfo `protobuf:"bytes,46,opt,name=eventStartDateInfo,proto3" json:"eventStartDateInfo,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EventSemanticTags) Reset() {
	*x = EventSemanticTags{}
	mi := &file_io_common_semantics_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSemanticTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSemanticTags) ProtoMessage() {}

func (x *EventSemanticTags) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_semantics_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSemanticTags.ProtoReflect.Descriptor instead.
func (*EventSemanticTags) Descriptor() ([]byte, []int) {
	return file_io_common_semantics_proto_rawDescGZIP(), []int{6}
}

func (x *EventSemanticTags) GetArtistIds() []string {
	if x != nil {
		return x.ArtistIds
	}
	return nil
}

func (x *EventSemanticTags) GetAwayTeamAbbreviation() string {
	if x != nil {
		return x.AwayTeamAbbreviation
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedAwayTeamAbbreviation() *LocalizedString {
	if x != nil {
		return x.LocalizedAwayTeamAbbreviation
	}
	return nil
}

func (x *EventSemanticTags) GetAwayTeamLocation() string {
	if x != nil {
		return x.AwayTeamLocation
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedAwayTeamLocation() *LocalizedString {
	if x != nil {
		return x.LocalizedAwayTeamLocation
	}
	return nil
}

func (x *EventSemanticTags) GetAwayTeamName() string {
	if x != nil {
		return x.AwayTeamName
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedAwayTeamName() *LocalizedString {
	if x != nil {
		return x.LocalizedAwayTeamName
	}
	return nil
}

func (x *EventSemanticTags) GetEventEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EventEndDate
	}
	return nil
}

func (x *EventSemanticTags) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedEventName() *LocalizedString {
	if x != nil {
		return x.LocalizedEventName
	}
	return nil
}

func (x *EventSemanticTags) GetEventStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EventStartDate
	}
	return nil
}

func (x *EventSemanticTags) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedGenre() *LocalizedString {
	if x != nil {
		return x.LocalizedGenre
	}
	return nil
}

func (x *EventSemanticTags) GetHomeTeamAbbreviation() string {
	if x != nil {
		return x.HomeTeamAbbreviation
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedHomeTeamAbbreviation() *LocalizedString {
	if x != nil {
		return x.LocalizedHomeTeamAbbreviation
	}
	return nil
}

func (x *EventSemanticTags) GetHomeTeamLocation() string {
	if x != nil {
		return x.HomeTeamLocation
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedHomeTeamLocation() *LocalizedString {
	if x != nil {
		return x.LocalizedHomeTeamLocation
	}
	return nil
}

func (x *EventSemanticTags) GetHomeTeamName() string {
	if x != nil {
		return x.HomeTeamName
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedHomeTeamName() *LocalizedString {
	if x != nil {
		return x.LocalizedHomeTeamName
	}
	return nil
}

func (x *EventSemanticTags) GetLeagueAbbreviation() string {
	if x != nil {
		return x.LeagueAbbreviation
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedLeagueAbbreviation() *LocalizedString {
	if x != nil {
		return x.LocalizedLeagueAbbreviation
	}
	return nil
}

func (x *EventSemanticTags) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedLeagueName() *LocalizedString {
	if x != nil {
		return x.LocalizedLeagueName
	}
	return nil
}

func (x *EventSemanticTags) GetPerformerNames() []string {
	if x != nil {
		return x.PerformerNames
	}
	return nil
}

func (x *EventSemanticTags) GetSilenceRequested() bool {
	if x != nil {
		return x.SilenceRequested
	}
	return false
}

func (x *EventSemanticTags) GetSportName() string {
	if x != nil {
		return x.SportName
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedSportName() *LocalizedString {
	if x != nil {
		return x.LocalizedSportName
	}
	return nil
}

func (x *EventSemanticTags) GetVenueLocation() *SemanticLocation {
	if x != nil {
		return x.VenueLocation
	}
	return nil
}

func (x *EventSemanticTags) GetVenuePhoneNumber() string {
	if x != nil {
		return x.VenuePhoneNumber
	}
	return ""
}

func (x *EventSemanticTags) GetVenueRoom() string {
	if x != nil {
		return x.VenueRoom
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedVenueRoom() *LocalizedString {
	if x != nil {
		return x.LocalizedVenueRoom
	}
	return nil
}

func (x *EventSemanticTags) GetWifiAccess() []*SemanticWifiNetwork {
	if x != nil {
		return x.WifiAccess
	}
	return nil
}

func (x *EventSemanticTags) GetVenueRegionName() string {
	if x != nil {
		return x.VenueRegionName
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedVenueRegionName() *LocalizedString {
	if x != nil {
		return x.LocalizedVenueRegionName
	}
	return nil
}

func (x *EventSemanticTags) GetTailgatingAllowed() bool {
	if x != nil {
		return x.TailgatingAllowed
	}
	return false
}

func (x *EventSemanticTags) GetEntranceDescription() string {
	if x != nil {
		return x.EntranceDescription
	}
	return ""
}

func (x *EventSemanticTags) GetLocalizedEntranceDescription() *LocalizedString {
	if x != nil {
		return x.LocalizedEntranceDescription
	}
	return nil
}

func (x *EventSemanticTags) GetVenueGatesOpenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueGatesOpenDate
	}
	return nil
}

func (x *EventSemanticTags) GetVenueFanZoneOpenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueFanZoneOpenDate
	}
	return nil
}

func (x *EventSemanticTags) GetVenueParkingLotsOpenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueParkingLotsOpenDate
	}
	return nil
}

func (x *EventSemanticTags) GetVenueBoxOfficeOpenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueBoxOfficeOpenDate
	}
	return nil
}

func (x *EventSemanticTags) GetVenueOpenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueOpenDate
	}
	return nil
}

func (x *EventSemanticTags) GetVenueCloseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueCloseDate
	}
	return nil
}

func (x *EventSemanticTags) GetPlaylistIds() []string {
	if x != nil {
		return x.PlaylistIds
	}
	return nil
}

func (x *EventSemanticTags) GetAlbumIds() []string {
	if x != nil {
		return x.AlbumIds
	}
	return nil
}

func (x *EventSemanticTags) GetEventStartDateInfo() *SemanticEventDateInfo {
	if x != nil {
		return x.EventStartDateInfo
	}
	return nil
}

type SemanticTags struct {
	state                                   protoimpl.MessageState  `protogen:"open.v1"`
	AdmissionLevel                          string                  `protobuf:"bytes,1,opt,name=admissionLevel,proto3" json:"admissionLevel,omitempty"`
	LocalizedAdmissionLevel                 *LocalizedString        `protobuf:"bytes,2,opt,name=localizedAdmissionLevel,proto3" json:"localizedAdmissionLevel,omitempty"`
	AdmissionLevelAbbreviation              string                  `protobuf:"bytes,3,opt,name=admissionLevelAbbreviation,proto3" json:"admissionLevelAbbreviation,omitempty"`
	LocalizedAdmissionLevelAbbreviation     *LocalizedString        `protobuf:"bytes,4,opt,name=localizedAdmissionLevelAbbreviation,proto3" json:"localizedAdmissionLevelAbbreviation,omitempty"`
	AdditionalTicketAttributes              string                  `protobuf:"bytes,5,opt,name=additionalTicketAttributes,proto3" json:"additionalTicketAttributes,omitempty"`
	LocalizedAdditionalTicketAttributes     *LocalizedString        `protobuf:"bytes,6,opt,name=localizedAdditionalTicketAttributes,proto3" json:"localizedAdditionalTicketAttributes,omitempty"`
	AirlineCode                             string                  `protobuf:"bytes,7,opt,name=airlineCode,proto3" json:"airlineCode,omitempty"`
	LocalizedAirlineCode                    *LocalizedString        `protobuf:"bytes,8,opt,name=localizedAirlineCode,proto3" json:"localizedAirlineCode,omitempty"`
	AttendeeName                            string                  `protobuf:"bytes,9,opt,name=attendeeName,proto3" json:"attendeeName,omitempty"`
	LocalizedAttendeeName                   *LocalizedString        `protobuf:"bytes,10,opt,name=localizedAttendeeName,proto3" json:"localizedAttendeeName,omitempty"`
	ArtistIds                               []string                `protobuf:"bytes,11,rep,name=artistIds,proto3" json:"artistIds,omitempty"`
	AwayTeamAbbreviation                    string                  `protobuf:"bytes,12,opt,name=awayTeamAbbreviation,proto3" json:"awayTeamAbbreviation,omitempty"`
	LocalizedAwayTeamAbbreviation           *LocalizedString        `protobuf:"bytes,13,opt,name=localizedAwayTeamAbbreviation,proto3" json:"localizedAwayTeamAbbreviation,omitempty"`
	AwayTeamLocation                        string                  `protobuf:"bytes,14,opt,name=awayTeamLocation,proto3" json:"awayTeamLocation,omitempty"`
	LocalizedAwayTeamLocation               *LocalizedString        `protobuf:"bytes,15,opt,name=localizedAwayTeamLocation,proto3" json:"localizedAwayTeamLocation,omitempty"`
	AwayTeamName                            string                  `protobuf:"bytes,16,opt,name=awayTeamName,proto3" json:"awayTeamName,omitempty"`
	LocalizedAwayTeamName                   *LocalizedString        `protobuf:"bytes,17,opt,name=localizedAwayTeamName,proto3" json:"localizedAwayTeamName,omitempty"`
	Balance                                 *SemanticCurrencyAmount `protobuf:"bytes,18,opt,name=balance,proto3" json:"balance,omitempty"`
	BoardingGroup                           string                  `protobuf:"bytes,19,opt,name=boardingGroup,proto3" json:"boardingGroup,omitempty"`
	LocalizedBoardingGroup                  *LocalizedString        `protobuf:"bytes,20,opt,name=localizedBoardingGroup,proto3" json:"localizedBoardingGroup,omitempty"`
	BoardingSequenceNumber                  string                  `protobuf:"bytes,21,opt,name=boardingSequenceNumber,proto3" json:"boardingSequenceNumber,omitempty"`
	CarNumber                               string                  `protobuf:"bytes,22,opt,name=carNumber,proto3" json:"carNumber,omitempty"`
	LocalizedCarNumber                      *LocalizedString        `protobuf:"bytes,23,opt,name=localizedCarNumber,proto3" json:"localizedCarNumber,omitempty"`
	ConfirmationNumber                      string                  `protobuf:"bytes,24,opt,name=confirmationNumber,proto3" json:"confirmationNumber,omitempty"`
	LocalizedConfirmationNumber             *LocalizedString        `protobuf:"bytes,25,opt,name=localizedConfirmationNumber,proto3" json:"localizedConfirmationNumber,omitempty"`
	CurrentArrivalDate                      *timestamppb.Timestamp  `protobuf:"bytes,26,opt,name=currentArrivalDate,proto3" json:"currentArrivalDate,omitempty"`
	CurrentBoardingDate                     *timestamppb.Timestamp  `protobuf:"bytes,27,opt,name=currentBoardingDate,proto3" json:"currentBoardingDate,omitempty"`
	CurrentDepartureDate                    *timestamppb.Timestamp  `protobuf:"bytes,28,opt,name=currentDepartureDate,proto3" json:"currentDepartureDate,omitempty"`
	DepartureAirportCode                    string                  `protobuf:"bytes,29,opt,name=departureAirportCode,proto3" json:"departureAirportCode,omitempty"`
	LocalizedDepartureAirportCode           *LocalizedString        `protobuf:"bytes,30,opt,name=localizedDepartureAirportCode,proto3" json:"localizedDepartureAirportCode,omitempty"`
	DepartureAirportName                    string                  `protobuf:"bytes,31,opt,name=departureAirportName,proto3" json:"departureAirportName,omitempty"`
	LocalizedDepartureAirportName           *LocalizedString        `protobuf:"bytes,32,opt,name=localizedDepartureAirportName,proto3" json:"localizedDepartureAirportName,omitempty"`
	DepartureGate                           string                  `protobuf:"bytes,33,opt,name=departureGate,proto3" json:"departureGate,omitempty"`
	LocalizedDepartureGate                  *LocalizedString        `protobuf:"bytes,34,opt,name=localizedDepartureGate,proto3" json:"localizedDepartureGate,omitempty"`
	DepartureLocation                       string                  `protobuf:"bytes,35,opt,name=departureLocation,proto3" json:"departureLocation,omitempty"`
	LocalizedDepartureLocation              *LocalizedString        `protobuf:"bytes,36,opt,name=localizedDepartureLocation,proto3" json:"localizedDepartureLocation,omitempty"`
	DepartureLocationDescription            string                  `protobuf:"bytes,37,opt,name=departureLocationDescription,proto3" json:"departureLocationDescription,omitempty"`
	LocalizedDepartureLocationDescription   *LocalizedString        `protobuf:"bytes,38,opt,name=localizedDepartureLocationDescription,proto3" json:"localizedDepartureLocationDescription,omitempty"`
	DeparturePlatform                       string                  `protobuf:"bytes,39,opt,name=departurePlatform,proto3" json:"departurePlatform,omitempty"`
	LocalizedDeparturePlatform              *LocalizedString        `protobuf:"bytes,40,opt,name=localizedDeparturePlatform,proto3" json:"localizedDeparturePlatform,omitempty"`
	DepartureStationName                    string                  `protobuf:"bytes,41,opt,name=departureStationName,proto3" json:"departureStationName,omitempty"`
	LocalizedDepartureStationName           *LocalizedString        `protobuf:"bytes,42,opt,name=localizedDepartureStationName,proto3" json:"localizedDepartureStationName,omitempty"`
	DepartureTerminal                       string                  `protobuf:"bytes,43,opt,name=departureTerminal,proto3" json:"departureTerminal,omitempty"`
	LocalizedDepartureTerminal              *LocalizedString        `protobuf:"bytes,44,opt,name=localizedDepartureTerminal,proto3" json:"localizedDepartureTerminal,omitempty"`
	DestinationAirportCode                  string                  `protobuf:"bytes,45,opt,name=destinationAirportCode,proto3" json:"destinationAirportCode,omitempty"`
	LocalizedDestinationAirportCode         *LocalizedString        `protobuf:"bytes,46,opt,name=localizedDestinationAirportCode,proto3" json:"localizedDestinationAirportCode,omitempty"`
	DestinationAirportName                  string                  `protobuf:"bytes,47,opt,name=destinationAirportName,proto3" json:"destinationAirportName,omitempty"`
	LocalizedDestinationAirportName         *LocalizedString        `protobuf:"bytes,48,opt,name=localizedDestinationAirportName,proto3" json:"localizedDestinationAirportName,omitempty"`
	DestinationGate                         string                  `protobuf:"bytes,49,opt,name=destinationGate,proto3" json:"destinationGate,omitempty"`
	LocalizedDestinationGate                *LocalizedString        `protobuf:"bytes,50,opt,name=localizedDestinationGate,proto3" json:"localizedDestinationGate,omitempty"`
	DestinationLocation                     string                  `protobuf:"bytes,51,opt,name=destinationLocation,proto3" json:"destinationLocation,omitempty"`
	LocalizedDestinationLocation            *LocalizedString        `protobuf:"bytes,52,opt,name=localizedDestinationLocation,proto3" json:"localizedDestinationLocation,omitempty"`
	DestinationLocationDescription          string                  `protobuf:"bytes,53,opt,name=destinationLocationDescription,proto3" json:"destinationLocationDescription,omitempty"`
	LocalizedDestinationLocationDescription *LocalizedString        `protobuf:"bytes,54,opt,name=localizedDestinationLocationDescription,proto3" json:"localizedDestinationLocationDescription,omitempty"`
	DestinationPlatform                     string                  `protobuf:"bytes,55,opt,name=destinationPlatform,proto3" json:"destinationPlatform,omitempty"`
	LocalizedDestinationPlatform            *LocalizedString        `protobuf:"bytes,56,opt,name=localizedDestinationPlatform,proto3" json:"localizedDestinationPlatform,omitempty"`
	DestinationStationName                  string                  `protobuf:"bytes,57,opt,name=destinationStationName,proto3" json:"destinationStationName,omitempty"`
	LocalizedDestinationStationName         *LocalizedString        `protobuf:"bytes,58,opt,name=localizedDestinationStationName,proto3" json:"localizedDestinationStationName,omitempty"`
	DestinationTerminal                     string                  `protobuf:"bytes,59,opt,name=destinationTerminal,proto3" json:"destinationTerminal,omitempty"`
	LocalizedDestinationTerminal            *LocalizedString        `protobuf:"bytes,60,opt,name=localizedDestinationTerminal,proto3" json:"localizedDestinationTerminal,omitempty"`
	Duration                                uint64                  `protobuf:"varint,61,opt,name=duration,proto3" json:"duration,omitempty"`
	EventEndDate                            *timestamppb.Timestamp  `protobuf:"bytes,62,opt,name=eventEndDate,proto3" json:"eventEndDate,omitempty"`
	EventName                               string                  `protobuf:"bytes,63,opt,name=eventName,proto3" json:"eventName,omitempty"`
	LocalizedEventName                      *LocalizedString        `protobuf:"bytes,64,opt,name=localizedEventName,proto3" json:"localizedEventName,omitempty"`
	EventStartDate                          *timestamppb.Timestamp  `protobuf:"bytes,65,opt,name=eventStartDate,proto3" json:"eventStartDate,omitempty"`
	EventStartDateInfo                      *SemanticEventDateInfo  `protobuf:"bytes,66,opt,name=eventStartDateInfo,proto3" json:"eventStartDateInfo,omitempty"`
	EventType                               EventType               `protobuf:"varint,67,opt,name=eventType,proto3,enum=io.EventType" json:"eventType,omitempty"`
	FlightCode                              string                  `protobuf:"bytes,68,opt,name=flightCode,proto3" json:"flightCode,omitempty"`
	LocalizedFlightCode                     *LocalizedString        `protobuf:"bytes,69,opt,name=localizedFlightCode,proto3" json:"localizedFlightCode,omitempty"`
	FlightNumber                            uint32                  `protobuf:"varint,70,opt,name=flightNumber,proto3" json:"flightNumber,omitempty"`
	Genre                                   string                  `protobuf:"bytes,71,opt,name=genre,proto3" json:"genre,omitempty"`
	LocalizedGenre                          *LocalizedString        `protobuf:"bytes,72,opt,name=localizedGenre,proto3" json:"localizedGenre,omitempty"`
	HomeTeamAbbreviation                    string                  `protobuf:"bytes,73,opt,name=homeTeamAbbreviation,proto3" json:"homeTeamAbbreviation,omitempty"`
	LocalizedHomeTeamAbbreviation           *LocalizedString        `protobuf:"bytes,74,opt,name=localizedHomeTeamAbbreviation,proto3" json:"localizedHomeTeamAbbreviation,omitempty"`
	HomeTeamLocation                        string                  `protobuf:"bytes,75,opt,name=homeTeamLocation,proto3" json:"homeTeamLocation,omitempty"`
	LocalizedHomeTeamLocation               *LocalizedString        `protobuf:"bytes,76,opt,name=localizedHomeTeamLocation,proto3" json:"localizedHomeTeamLocation,omitempty"`
	HomeTeamName                            string                  `protobuf:"bytes,77,opt,name=homeTeamName,proto3" json:"homeTeamName,omitempty"`
	LocalizedHomeTeamName                   *LocalizedString        `protobuf:"bytes,78,opt,name=localizedHomeTeamName,proto3" json:"localizedHomeTeamName,omitempty"`
	LeagueAbbreviation                      string                  `protobuf:"bytes,79,opt,name=leagueAbbreviation,proto3" json:"leagueAbbreviation,omitempty"`
	LocalizedLeagueAbbreviation             *LocalizedString        `protobuf:"bytes,80,opt,name=localizedLeagueAbbreviation,proto3" json:"localizedLeagueAbbreviation,omitempty"`
	LeagueName                              string                  `protobuf:"bytes,81,opt,name=leagueName,proto3" json:"leagueName,omitempty"`
	LocalizedLeagueName                     *LocalizedString        `protobuf:"bytes,82,opt,name=localizedLeagueName,proto3" json:"localizedLeagueName,omitempty"`
	MembershipProgramName                   string                  `protobuf:"bytes,83,opt,name=membershipProgramName,proto3" json:"membershipProgramName,omitempty"`
	LocalizedMembershipProgramName          *LocalizedString        `protobuf:"bytes,84,opt,name=localizedMembershipProgramName,proto3" json:"localizedMembershipProgramName,omitempty"`
	MembershipProgramNumber                 string                  `protobuf:"bytes,85,opt,name=membershipProgramNumber,proto3" json:"membershipProgramNumber,omitempty"`
	OriginalArrivalDate                     *timestamppb.Timestamp  `protobuf:"bytes,86,opt,name=originalArrivalDate,proto3" json:"originalArrivalDate,omitempty"`
	OriginalBoardingDate                    *timestamppb.Timestamp  `protobuf:"bytes,87,opt,name=originalBoardingDate,proto3" json:"originalBoardingDate,omitempty"`
	OriginalDepartureDate                   *timestamppb.Timestamp  `protobuf:"bytes,88,opt,name=originalDepartureDate,proto3" json:"originalDepartureDate,omitempty"`
	PassengerName                           *SemanticPersonName     `protobuf:"bytes,89,opt,name=passengerName,proto3" json:"passengerName,omitempty"`
	PerformerNames                          []string                `protobuf:"bytes,90,rep,name=performerNames,proto3" json:"performerNames,omitempty"`
	PriorityStatus                          string                  `protobuf:"bytes,91,opt,name=priorityStatus,proto3" json:"priorityStatus,omitempty"`
	LocalizedPriorityStatus                 *LocalizedString        `protobuf:"bytes,92,opt,name=localizedPriorityStatus,proto3" json:"localizedPriorityStatus,omitempty"`
	AlbumIds                                []string                `protobuf:"bytes,93,rep,name=albumIds,proto3" json:"albumIds,omitempty"`
	PlaylistIds                             []string                `protobuf:"bytes,94,rep,name=playlistIds,proto3" json:"playlistIds,omitempty"`
	Seats                                   []*SemanticSeat         `protobuf:"bytes,95,rep,name=seats,proto3" json:"seats,omitempty"`
	SecurityScreening                       string                  `protobuf:"bytes,96,opt,name=securityScreening,proto3" json:"securityScreening,omitempty"`
	LocalizedSecurityScreening              *LocalizedString        `protobuf:"bytes,97,opt,name=localizedSecurityScreening,proto3" json:"localizedSecurityScreening,omitempty"`
	SilenceRequested                        bool                    `protobuf:"varint,98,opt,name=silenceRequested,proto3" json:"silenceRequested,omitempty"`
	SportName                               string                  `protobuf:"bytes,99,opt,name=sportName,proto3" json:"sportName,omitempty"`
	LocalizedSportName                      *LocalizedString        `protobuf:"bytes,100,opt,name=localizedSportName,proto3" json:"localizedSportName,omitempty"`
	TotalPrice                              *SemanticCurrencyAmount `protobuf:"bytes,101,opt,name=totalPrice,proto3" json:"totalPrice,omitempty"`
	TransitProvider                         string                  `protobuf:"bytes,102,opt,name=transitProvider,proto3" json:"transitProvider,omitempty"`
	LocalizedTransitProvider                *LocalizedString        `protobuf:"bytes,103,opt,name=localizedTransitProvider,proto3" json:"localizedTransitProvider,omitempty"`
	TransitStatus                           string                  `protobuf:"bytes,104,opt,name=transitStatus,proto3" json:"transitStatus,omitempty"`
	LocalizedTransitStatus                  *LocalizedString        `protobuf:"bytes,105,opt,name=localizedTransitStatus,proto3" json:"localizedTransitStatus,omitempty"`
	TransitStatusReason                     string                  `protobuf:"bytes,106,opt,name=transitStatusReason,proto3" json:"transitStatusReason,omitempty"`
	LocalizedTransitStatusReason            *LocalizedString        `protobuf:"bytes,107,opt,name=localizedTransitStatusReason,proto3" json:"localizedTransitStatusReason,omitempty"`
	VehicleName                             string                  `protobuf:"bytes,108,opt,name=vehicleName,proto3" json:"vehicleName,omitempty"`
	LocalizedVehicleName                    *LocalizedString        `protobuf:"bytes,109,opt,name=localizedVehicleName,proto3" json:"localizedVehicleName,omitempty"`
	VehicleNumber                           string                  `protobuf:"bytes,110,opt,name=vehicleNumber,proto3" json:"vehicleNumber,omitempty"`
	LocalizedVehicleNumber                  *LocalizedString        `protobuf:"bytes,111,opt,name=localizedVehicleNumber,proto3" json:"localizedVehicleNumber,omitempty"`
	VehicleType                             string                  `protobuf:"bytes,112,opt,name=vehicleType,proto3" json:"vehicleType,omitempty"`
	LocalizedVehicleType                    *LocalizedString        `protobuf:"bytes,113,opt,name=localizedVehicleType,proto3" json:"localizedVehicleType,omitempty"`
	VenueBoxOfficeOpenDate                  *timestamppb.Timestamp  `protobuf:"bytes,114,opt,name=venueBoxOfficeOpenDate,proto3" json:"venueBoxOfficeOpenDate,omitempty"`
	VenueCloseDate                          *timestamppb.Timestamp  `protobuf:"bytes,115,opt,name=venueCloseDate,proto3" json:"venueCloseDate,omitempty"`
	VenueDoorsOpenDate                      *timestamppb.Timestamp  `protobuf:"bytes,116,opt,name=venueDoorsOpenDate,proto3" json:"venueDoorsOpenDate,omitempty"`
	VenueEntrance                           string                  `protobuf:"bytes,117,opt,name=venueEntrance,proto3" json:"venueEntrance,omitempty"`
	LocalizedVenueEntrance                  *LocalizedString        `protobuf:"bytes,118,opt,name=localizedVenueEntrance,proto3" json:"localizedVenueEntrance,omitempty"`
	VenueLocation                           *SemanticLocation       `protobuf:"bytes,119,opt,name=venueLocation,proto3" json:"venueLocation,omitempty"`
	VenueName                               string                  `protobuf:"bytes,120,opt,name=venueName,proto3" json:"venueName,omitempty"`
	LocalizedVenueName                      *LocalizedString        `protobuf:"bytes,121,opt,name=localizedVenueName,proto3" json:"localizedVenueName,omitempty"`
	VenuePhoneNumber                        string                  `protobuf:"bytes,122,opt,name=venuePhone_number,json=venuePhoneNumber,proto3" json:"venuePhone_number,omitempty"`
	LocalizedVenuePhoneNumber               *LocalizedString        `protobuf:"bytes,123,opt,name=localizedVenuePhoneNumber,proto3" json:"localizedVenuePhoneNumber,omitempty"`
	VenueRegionName                         string                  `protobuf:"bytes,124,opt,name=venueRegionName,proto3" json:"venueRegionName,omitempty"`
	LocalizedVenueRegionName                *LocalizedString        `protobuf:"bytes,125,opt,name=localizedVenueRegionName,proto3" json:"localizedVenueRegionName,omitempty"`
	VenueRoom                               string                  `protobuf:"bytes,126,opt,name=venueRoom,proto3" json:"venueRoom,omitempty"`
	LocalizedVenueRoom                      *LocalizedString        `protobuf:"bytes,127,opt,name=localizedVenueRoom,proto3" json:"localizedVenueRoom,omitempty"`
	WifiAccess                              []*SemanticWifiNetwork  `protobuf:"bytes,128,rep,name=wifiAccess,proto3" json:"wifiAccess,omitempty"`
	VenueFanZoneOpenDate                    *timestamppb.Timestamp  `protobuf:"bytes,129,opt,name=venueFanZoneOpenDate,proto3" json:"venueFanZoneOpenDate,omitempty"`
	VenueGatesOpenDate                      *timestamppb.Timestamp  `protobuf:"bytes,130,opt,name=venueGatesOpenDate,proto3" json:"venueGatesOpenDate,omitempty"`
	VenueParkingLotsOpenDate                *timestamppb.Timestamp  `protobuf:"bytes,131,opt,name=venueParkingLotsOpenDate,proto3" json:"venueParkingLotsOpenDate,omitempty"`
	VenueEntranceDoor                       string                  `protobuf:"bytes,132,opt,name=venueEntranceDoor,proto3" json:"venueEntranceDoor,omitempty"`
	LocalizedVenueEntranceDoor              *LocalizedString        `protobuf:"bytes,133,opt,name=localizedVenueEntranceDoor,proto3" json:"localizedVenueEntranceDoor,omitempty"`
	VenueEntranceGate                       string                  `protobuf:"bytes,134,opt,name=venueEntranceGate,proto3" json:"venueEntranceGate,omitempty"`
	LocalizedVenueEntranceGate              *LocalizedString        `protobuf:"bytes,135,opt,name=localizedVenueEntranceGate,proto3" json:"localizedVenueEntranceGate,omitempty"`
	VenueEntrancePortal                     string                  `protobuf:"bytes,136,opt,name=venueEntrancePortal,proto3" json:"venueEntrancePortal,omitempty"`
	LocalizedVenueEntrancePortal            *LocalizedString        `protobuf:"bytes,137,opt,name=localizedVenueEntrancePortal,proto3" json:"localizedVenueEntrancePortal,omitempty"`
	EntranceDescription                     string                  `protobuf:"bytes,138,opt,name=entranceDescription,proto3" json:"entranceDescription,omitempty"`
	LocalizedEntranceDescription            *LocalizedString        `protobuf:"bytes,139,opt,name=localizedEntranceDescription,proto3" json:"localizedEntranceDescription,omitempty"`
	TailgatingAllowed                       bool                    `protobuf:"varint,140,opt,name=tailgatingAllowed,proto3" json:"tailgatingAllowed,omitempty"`
	unknownFields                           protoimpl.UnknownFields
	sizeCache                               protoimpl.SizeCache
}

func (x *SemanticTags) Reset() {
	*x = SemanticTags{}
	mi := &file_io_common_semantics_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemanticTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTags) ProtoMessage() {}

func (x *SemanticTags) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_semantics_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTags.ProtoReflect.Descriptor instead.
func (*SemanticTags) Descriptor() ([]byte, []int) {
	return file_io_common_semantics_proto_rawDescGZIP(), []int{7}
}

func (x *SemanticTags) GetAdmissionLevel() string {
	if x != nil {
		return x.AdmissionLevel
	}
	return ""
}

func (x *SemanticTags) GetLocalizedAdmissionLevel() *LocalizedString {
	if x != nil {
		return x.LocalizedAdmissionLevel
	}
	return nil
}

func (x *SemanticTags) GetAdmissionLevelAbbreviation() string {
	if x != nil {
		return x.AdmissionLevelAbbreviation
	}
	return ""
}

func (x *SemanticTags) GetLocalizedAdmissionLevelAbbreviation() *LocalizedString {
	if x != nil {
		return x.LocalizedAdmissionLevelAbbreviation
	}
	return nil
}

func (x *SemanticTags) GetAdditionalTicketAttributes() string {
	if x != nil {
		return x.AdditionalTicketAttributes
	}
	return ""
}

func (x *SemanticTags) GetLocalizedAdditionalTicketAttributes() *LocalizedString {
	if x != nil {
		return x.LocalizedAdditionalTicketAttributes
	}
	return nil
}

func (x *SemanticTags) GetAirlineCode() string {
	if x != nil {
		return x.AirlineCode
	}
	return ""
}

func (x *SemanticTags) GetLocalizedAirlineCode() *LocalizedString {
	if x != nil {
		return x.LocalizedAirlineCode
	}
	return nil
}

func (x *SemanticTags) GetAttendeeName() string {
	if x != nil {
		return x.AttendeeName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedAttendeeName() *LocalizedString {
	if x != nil {
		return x.LocalizedAttendeeName
	}
	return nil
}

func (x *SemanticTags) GetArtistIds() []string {
	if x != nil {
		return x.ArtistIds
	}
	return nil
}

func (x *SemanticTags) GetAwayTeamAbbreviation() string {
	if x != nil {
		return x.AwayTeamAbbreviation
	}
	return ""
}

func (x *SemanticTags) GetLocalizedAwayTeamAbbreviation() *LocalizedString {
	if x != nil {
		return x.LocalizedAwayTeamAbbreviation
	}
	return nil
}

func (x *SemanticTags) GetAwayTeamLocation() string {
	if x != nil {
		return x.AwayTeamLocation
	}
	return ""
}

func (x *SemanticTags) GetLocalizedAwayTeamLocation() *LocalizedString {
	if x != nil {
		return x.LocalizedAwayTeamLocation
	}
	return nil
}

func (x *SemanticTags) GetAwayTeamName() string {
	if x != nil {
		return x.AwayTeamName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedAwayTeamName() *LocalizedString {
	if x != nil {
		return x.LocalizedAwayTeamName
	}
	return nil
}

func (x *SemanticTags) GetBalance() *SemanticCurrencyAmount {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *SemanticTags) GetBoardingGroup() string {
	if x != nil {
		return x.BoardingGroup
	}
	return ""
}

func (x *SemanticTags) GetLocalizedBoardingGroup() *LocalizedString {
	if x != nil {
		return x.LocalizedBoardingGroup
	}
	return nil
}

func (x *SemanticTags) GetBoardingSequenceNumber() string {
	if x != nil {
		return x.BoardingSequenceNumber
	}
	return ""
}

func (x *SemanticTags) GetCarNumber() string {
	if x != nil {
		return x.CarNumber
	}
	return ""
}

func (x *SemanticTags) GetLocalizedCarNumber() *LocalizedString {
	if x != nil {
		return x.LocalizedCarNumber
	}
	return nil
}

func (x *SemanticTags) GetConfirmationNumber() string {
	if x != nil {
		return x.ConfirmationNumber
	}
	return ""
}

func (x *SemanticTags) GetLocalizedConfirmationNumber() *LocalizedString {
	if x != nil {
		return x.LocalizedConfirmationNumber
	}
	return nil
}

func (x *SemanticTags) GetCurrentArrivalDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentArrivalDate
	}
	return nil
}

func (x *SemanticTags) GetCurrentBoardingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentBoardingDate
	}
	return nil
}

func (x *SemanticTags) GetCurrentDepartureDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentDepartureDate
	}
	return nil
}

func (x *SemanticTags) GetDepartureAirportCode() string {
	if x != nil {
		return x.DepartureAirportCode
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDepartureAirportCode() *LocalizedString {
	if x != nil {
		return x.LocalizedDepartureAirportCode
	}
	return nil
}

func (x *SemanticTags) GetDepartureAirportName() string {
	if x != nil {
		return x.DepartureAirportName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDepartureAirportName() *LocalizedString {
	if x != nil {
		return x.LocalizedDepartureAirportName
	}
	return nil
}

func (x *SemanticTags) GetDepartureGate() string {
	if x != nil {
		return x.DepartureGate
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDepartureGate() *LocalizedString {
	if x != nil {
		return x.LocalizedDepartureGate
	}
	return nil
}

func (x *SemanticTags) GetDepartureLocation() string {
	if x != nil {
		return x.DepartureLocation
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDepartureLocation() *LocalizedString {
	if x != nil {
		return x.LocalizedDepartureLocation
	}
	return nil
}

func (x *SemanticTags) GetDepartureLocationDescription() string {
	if x != nil {
		return x.DepartureLocationDescription
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDepartureLocationDescription() *LocalizedString {
	if x != nil {
		return x.LocalizedDepartureLocationDescription
	}
	return nil
}

func (x *SemanticTags) GetDeparturePlatform() string {
	if x != nil {
		return x.DeparturePlatform
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDeparturePlatform() *LocalizedString {
	if x != nil {
		return x.LocalizedDeparturePlatform
	}
	return nil
}

func (x *SemanticTags) GetDepartureStationName() string {
	if x != nil {
		return x.DepartureStationName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDepartureStationName() *LocalizedString {
	if x != nil {
		return x.LocalizedDepartureStationName
	}
	return nil
}

func (x *SemanticTags) GetDepartureTerminal() string {
	if x != nil {
		return x.DepartureTerminal
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDepartureTerminal() *LocalizedString {
	if x != nil {
		return x.LocalizedDepartureTerminal
	}
	return nil
}

func (x *SemanticTags) GetDestinationAirportCode() string {
	if x != nil {
		return x.DestinationAirportCode
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDestinationAirportCode() *LocalizedString {
	if x != nil {
		return x.LocalizedDestinationAirportCode
	}
	return nil
}

func (x *SemanticTags) GetDestinationAirportName() string {
	if x != nil {
		return x.DestinationAirportName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDestinationAirportName() *LocalizedString {
	if x != nil {
		return x.LocalizedDestinationAirportName
	}
	return nil
}

func (x *SemanticTags) GetDestinationGate() string {
	if x != nil {
		return x.DestinationGate
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDestinationGate() *LocalizedString {
	if x != nil {
		return x.LocalizedDestinationGate
	}
	return nil
}

func (x *SemanticTags) GetDestinationLocation() string {
	if x != nil {
		return x.DestinationLocation
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDestinationLocation() *LocalizedString {
	if x != nil {
		return x.LocalizedDestinationLocation
	}
	return nil
}

func (x *SemanticTags) GetDestinationLocationDescription() string {
	if x != nil {
		return x.DestinationLocationDescription
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDestinationLocationDescription() *LocalizedString {
	if x != nil {
		return x.LocalizedDestinationLocationDescription
	}
	return nil
}

func (x *SemanticTags) GetDestinationPlatform() string {
	if x != nil {
		return x.DestinationPlatform
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDestinationPlatform() *LocalizedString {
	if x != nil {
		return x.LocalizedDestinationPlatform
	}
	return nil
}

func (x *SemanticTags) GetDestinationStationName() string {
	if x != nil {
		return x.DestinationStationName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDestinationStationName() *LocalizedString {
	if x != nil {
		return x.LocalizedDestinationStationName
	}
	return nil
}

func (x *SemanticTags) GetDestinationTerminal() string {
	if x != nil {
		return x.DestinationTerminal
	}
	return ""
}

func (x *SemanticTags) GetLocalizedDestinationTerminal() *LocalizedString {
	if x != nil {
		return x.LocalizedDestinationTerminal
	}
	return nil
}

func (x *SemanticTags) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SemanticTags) GetEventEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EventEndDate
	}
	return nil
}

func (x *SemanticTags) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedEventName() *LocalizedString {
	if x != nil {
		return x.LocalizedEventName
	}
	return nil
}

func (x *SemanticTags) GetEventStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EventStartDate
	}
	return nil
}

func (x *SemanticTags) GetEventStartDateInfo() *SemanticEventDateInfo {
	if x != nil {
		return x.EventStartDateInfo
	}
	return nil
}

func (x *SemanticTags) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_NONE
}

func (x *SemanticTags) GetFlightCode() string {
	if x != nil {
		return x.FlightCode
	}
	return ""
}

func (x *SemanticTags) GetLocalizedFlightCode() *LocalizedString {
	if x != nil {
		return x.LocalizedFlightCode
	}
	return nil
}

func (x *SemanticTags) GetFlightNumber() uint32 {
	if x != nil {
		return x.FlightNumber
	}
	return 0
}

func (x *SemanticTags) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *SemanticTags) GetLocalizedGenre() *LocalizedString {
	if x != nil {
		return x.LocalizedGenre
	}
	return nil
}

func (x *SemanticTags) GetHomeTeamAbbreviation() string {
	if x != nil {
		return x.HomeTeamAbbreviation
	}
	return ""
}

func (x *SemanticTags) GetLocalizedHomeTeamAbbreviation() *LocalizedString {
	if x != nil {
		return x.LocalizedHomeTeamAbbreviation
	}
	return nil
}

func (x *SemanticTags) GetHomeTeamLocation() string {
	if x != nil {
		return x.HomeTeamLocation
	}
	return ""
}

func (x *SemanticTags) GetLocalizedHomeTeamLocation() *LocalizedString {
	if x != nil {
		return x.LocalizedHomeTeamLocation
	}
	return nil
}

func (x *SemanticTags) GetHomeTeamName() string {
	if x != nil {
		return x.HomeTeamName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedHomeTeamName() *LocalizedString {
	if x != nil {
		return x.LocalizedHomeTeamName
	}
	return nil
}

func (x *SemanticTags) GetLeagueAbbreviation() string {
	if x != nil {
		return x.LeagueAbbreviation
	}
	return ""
}

func (x *SemanticTags) GetLocalizedLeagueAbbreviation() *LocalizedString {
	if x != nil {
		return x.LocalizedLeagueAbbreviation
	}
	return nil
}

func (x *SemanticTags) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedLeagueName() *LocalizedString {
	if x != nil {
		return x.LocalizedLeagueName
	}
	return nil
}

func (x *SemanticTags) GetMembershipProgramName() string {
	if x != nil {
		return x.MembershipProgramName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedMembershipProgramName() *LocalizedString {
	if x != nil {
		return x.LocalizedMembershipProgramName
	}
	return nil
}

func (x *SemanticTags) GetMembershipProgramNumber() string {
	if x != nil {
		return x.MembershipProgramNumber
	}
	return ""
}

func (x *SemanticTags) GetOriginalArrivalDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OriginalArrivalDate
	}
	return nil
}

func (x *SemanticTags) GetOriginalBoardingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OriginalBoardingDate
	}
	return nil
}

func (x *SemanticTags) GetOriginalDepartureDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OriginalDepartureDate
	}
	return nil
}

func (x *SemanticTags) GetPassengerName() *SemanticPersonName {
	if x != nil {
		return x.PassengerName
	}
	return nil
}

func (x *SemanticTags) GetPerformerNames() []string {
	if x != nil {
		return x.PerformerNames
	}
	return nil
}

func (x *SemanticTags) GetPriorityStatus() string {
	if x != nil {
		return x.PriorityStatus
	}
	return ""
}

func (x *SemanticTags) GetLocalizedPriorityStatus() *LocalizedString {
	if x != nil {
		return x.LocalizedPriorityStatus
	}
	return nil
}

func (x *SemanticTags) GetAlbumIds() []string {
	if x != nil {
		return x.AlbumIds
	}
	return nil
}

func (x *SemanticTags) GetPlaylistIds() []string {
	if x != nil {
		return x.PlaylistIds
	}
	return nil
}

func (x *SemanticTags) GetSeats() []*SemanticSeat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *SemanticTags) GetSecurityScreening() string {
	if x != nil {
		return x.SecurityScreening
	}
	return ""
}

func (x *SemanticTags) GetLocalizedSecurityScreening() *LocalizedString {
	if x != nil {
		return x.LocalizedSecurityScreening
	}
	return nil
}

func (x *SemanticTags) GetSilenceRequested() bool {
	if x != nil {
		return x.SilenceRequested
	}
	return false
}

func (x *SemanticTags) GetSportName() string {
	if x != nil {
		return x.SportName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedSportName() *LocalizedString {
	if x != nil {
		return x.LocalizedSportName
	}
	return nil
}

func (x *SemanticTags) GetTotalPrice() *SemanticCurrencyAmount {
	if x != nil {
		return x.TotalPrice
	}
	return nil
}

func (x *SemanticTags) GetTransitProvider() string {
	if x != nil {
		return x.TransitProvider
	}
	return ""
}

func (x *SemanticTags) GetLocalizedTransitProvider() *LocalizedString {
	if x != nil {
		return x.LocalizedTransitProvider
	}
	return nil
}

func (x *SemanticTags) GetTransitStatus() string {
	if x != nil {
		return x.TransitStatus
	}
	return ""
}

func (x *SemanticTags) GetLocalizedTransitStatus() *LocalizedString {
	if x != nil {
		return x.LocalizedTransitStatus
	}
	return nil
}

func (x *SemanticTags) GetTransitStatusReason() string {
	if x != nil {
		return x.TransitStatusReason
	}
	return ""
}

func (x *SemanticTags) GetLocalizedTransitStatusReason() *LocalizedString {
	if x != nil {
		return x.LocalizedTransitStatusReason
	}
	return nil
}

func (x *SemanticTags) GetVehicleName() string {
	if x != nil {
		return x.VehicleName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedVehicleName() *LocalizedString {
	if x != nil {
		return x.LocalizedVehicleName
	}
	return nil
}

func (x *SemanticTags) GetVehicleNumber() string {
	if x != nil {
		return x.VehicleNumber
	}
	return ""
}

func (x *SemanticTags) GetLocalizedVehicleNumber() *LocalizedString {
	if x != nil {
		return x.LocalizedVehicleNumber
	}
	return nil
}

func (x *SemanticTags) GetVehicleType() string {
	if x != nil {
		return x.VehicleType
	}
	return ""
}

func (x *SemanticTags) GetLocalizedVehicleType() *LocalizedString {
	if x != nil {
		return x.LocalizedVehicleType
	}
	return nil
}

func (x *SemanticTags) GetVenueBoxOfficeOpenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueBoxOfficeOpenDate
	}
	return nil
}

func (x *SemanticTags) GetVenueCloseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueCloseDate
	}
	return nil
}

func (x *SemanticTags) GetVenueDoorsOpenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueDoorsOpenDate
	}
	return nil
}

func (x *SemanticTags) GetVenueEntrance() string {
	if x != nil {
		return x.VenueEntrance
	}
	return ""
}

func (x *SemanticTags) GetLocalizedVenueEntrance() *LocalizedString {
	if x != nil {
		return x.LocalizedVenueEntrance
	}
	return nil
}

func (x *SemanticTags) GetVenueLocation() *SemanticLocation {
	if x != nil {
		return x.VenueLocation
	}
	return nil
}

func (x *SemanticTags) GetVenueName() string {
	if x != nil {
		return x.VenueName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedVenueName() *LocalizedString {
	if x != nil {
		return x.LocalizedVenueName
	}
	return nil
}

func (x *SemanticTags) GetVenuePhoneNumber() string {
	if x != nil {
		return x.VenuePhoneNumber
	}
	return ""
}

func (x *SemanticTags) GetLocalizedVenuePhoneNumber() *LocalizedString {
	if x != nil {
		return x.LocalizedVenuePhoneNumber
	}
	return nil
}

func (x *SemanticTags) GetVenueRegionName() string {
	if x != nil {
		return x.VenueRegionName
	}
	return ""
}

func (x *SemanticTags) GetLocalizedVenueRegionName() *LocalizedString {
	if x != nil {
		return x.LocalizedVenueRegionName
	}
	return nil
}

func (x *SemanticTags) GetVenueRoom() string {
	if x != nil {
		return x.VenueRoom
	}
	return ""
}

func (x *SemanticTags) GetLocalizedVenueRoom() *LocalizedString {
	if x != nil {
		return x.LocalizedVenueRoom
	}
	return nil
}

func (x *SemanticTags) GetWifiAccess() []*SemanticWifiNetwork {
	if x != nil {
		return x.WifiAccess
	}
	return nil
}

func (x *SemanticTags) GetVenueFanZoneOpenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueFanZoneOpenDate
	}
	return nil
}

func (x *SemanticTags) GetVenueGatesOpenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueGatesOpenDate
	}
	return nil
}

func (x *SemanticTags) GetVenueParkingLotsOpenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.VenueParkingLotsOpenDate
	}
	return nil
}

func (x *SemanticTags) GetVenueEntranceDoor() string {
	if x != nil {
		return x.VenueEntranceDoor
	}
	return ""
}

func (x *SemanticTags) GetLocalizedVenueEntranceDoor() *LocalizedString {
	if x != nil {
		return x.LocalizedVenueEntranceDoor
	}
	return nil
}

func (x *SemanticTags) GetVenueEntranceGate() string {
	if x != nil {
		return x.VenueEntranceGate
	}
	return ""
}

func (x *SemanticTags) GetLocalizedVenueEntranceGate() *LocalizedString {
	if x != nil {
		return x.LocalizedVenueEntranceGate
	}
	return nil
}

func (x *SemanticTags) GetVenueEntrancePortal() string {
	if x != nil {
		return x.VenueEntrancePortal
	}
	return ""
}

func (x *SemanticTags) GetLocalizedVenueEntrancePortal() *LocalizedString {
	if x != nil {
		return x.LocalizedVenueEntrancePortal
	}
	return nil
}

func (x *SemanticTags) GetEntranceDescription() string {
	if x != nil {
		return x.EntranceDescription
	}
	return ""
}

func (x *SemanticTags) GetLocalizedEntranceDescription() *LocalizedString {
	if x != nil {
		return x.LocalizedEntranceDescription
	}
	return nil
}

func (x *SemanticTags) GetTailgatingAllowed() bool {
	if x != nil {
		return x.TailgatingAllowed
	}
	return false
}

var File_io_common_semantics_proto protoreflect.FileDescriptor

var file_io_common_semantics_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x69, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54,
	0x0a, 0x16, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x10, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x02, 0x0a, 0x0c,
	0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x65, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x52, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x61, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x61, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x74, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x61, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x74, 0x41, 0x69, 0x73, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x41, 0x69, 0x73, 0x6c, 0x65, 0x22, 0x45,
	0x0a, 0x13, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x73, 0x69, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x22, 0x99, 0x15, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x62, 0x72,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x1d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x62,
	0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41,
	0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x77, 0x61, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x3b,
	0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x6f, 0x6d, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x59, 0x0a, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x62,
	0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x6f,
	0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x6d,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x62, 0x62, 0x72,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x62, 0x62, 0x72, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x0d, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x56, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56,
	0x65, 0x6e, 0x75, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x37, 0x0a, 0x0a, 0x77, 0x69, 0x66, 0x69,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69,
	0x6f, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0a, 0x77, 0x69, 0x66, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x18, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e,
	0x75, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x74, 0x61, 0x69, 0x6c, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x61, 0x69, 0x6c, 0x67, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x1c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x47, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x4e, 0x0a, 0x14, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x46, 0x61, 0x6e, 0x5a, 0x6f, 0x6e,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x46, 0x61, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x56, 0x0a, 0x18, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x4c, 0x6f, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x18, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x42, 0x6f, 0x78, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x42, 0x6f, 0x78, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x0d, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64,
	0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64,
	0x73, 0x12, 0x49, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x69, 0x6f, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x45, 0x0a,
	0x0c, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4d, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x23, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41,
	0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x23, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41,
	0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x23, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x23, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x74,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x77,
	0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59,
	0x0a, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x77, 0x61, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x62,
	0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x77, 0x61,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x77, 0x61, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x15,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x77, 0x61, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x4b, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x36, 0x0a, 0x16, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x43, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x1b, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4c,
	0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x14,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x59, 0x0a, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x59, 0x0a, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65,
	0x12, 0x4b, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x1a, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x25, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x25, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x53, 0x0a,
	0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x53, 0x0a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x1f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x1f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x69, 0x72, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x1f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x18,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x57, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6d, 0x0a, 0x27, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x27, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x57, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x1f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x1f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x49, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f,
	0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x69, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x62,
	0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x1d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x62,
	0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f, 0x6d,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x62, 0x62, 0x72,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1b, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x62, 0x62,
	0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x1e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x1e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x55,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c, 0x0a,
	0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x0d, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x59,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x5a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x17, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x5d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x73, 0x18, 0x5e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74,
	0x73, 0x18, 0x5f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x53,
	0x0a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x61, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4b, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x57,
	0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x6b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x14, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x52, 0x0a, 0x16, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x42, 0x6f, 0x78, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x42, 0x6f, 0x78, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x44, 0x6f, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x12, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x6f, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65,
	0x6e, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x7a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x56, 0x65, 0x6e, 0x75, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4f, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e,
	0x75, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x7d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x7e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x75,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x38, 0x0a, 0x0a, 0x77, 0x69, 0x66, 0x69, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x80, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x2e, 0x53,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x0a, 0x77, 0x69, 0x66, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4f,
	0x0a, 0x14, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x46, 0x61, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x46, 0x61, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x4b, 0x0a, 0x12, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x47, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x18,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x18, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6f, 0x72, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x6f, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f,
	0x6f, 0x72, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x11, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x18,
	0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x1a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65,
	0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x13, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x12, 0x58, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56,
	0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x13,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x58, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x11, 0x74, 0x61, 0x69,
	0x6c, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x8c,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x61, 0x69, 0x6c, 0x67, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2a, 0xf6, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49,
	0x43, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x41,
	0x54, 0x48, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x07,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x49, 0x56, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x08, 0x42, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x24, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73,
	0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0xaa, 0x02, 0x0c, 0x50, 0x61,
	0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_io_common_semantics_proto_rawDescOnce sync.Once
	file_io_common_semantics_proto_rawDescData []byte
)

func file_io_common_semantics_proto_rawDescGZIP() []byte {
	file_io_common_semantics_proto_rawDescOnce.Do(func() {
		file_io_common_semantics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_common_semantics_proto_rawDesc), len(file_io_common_semantics_proto_rawDesc)))
	})
	return file_io_common_semantics_proto_rawDescData
}

var file_io_common_semantics_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_io_common_semantics_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_io_common_semantics_proto_goTypes = []any{
	(EventType)(0),                 // 0: io.EventType
	(*SemanticCurrencyAmount)(nil), // 1: io.SemanticCurrencyAmount
	(*SemanticLocation)(nil),       // 2: io.SemanticLocation
	(*SemanticPersonName)(nil),     // 3: io.SemanticPersonName
	(*SemanticSeat)(nil),           // 4: io.SemanticSeat
	(*SemanticWifiNetwork)(nil),    // 5: io.SemanticWifiNetwork
	(*SemanticEventDateInfo)(nil),  // 6: io.SemanticEventDateInfo
	(*EventSemanticTags)(nil),      // 7: io.EventSemanticTags
	(*SemanticTags)(nil),           // 8: io.SemanticTags
	(*timestamppb.Timestamp)(nil),  // 9: google.protobuf.Timestamp
	(*LocalizedString)(nil),        // 10: io.LocalizedString
}
var file_io_common_semantics_proto_depIdxs = []int32{
	9,   // 0: io.SemanticEventDateInfo.date:type_name -> google.protobuf.Timestamp
	10,  // 1: io.EventSemanticTags.localizedAwayTeamAbbreviation:type_name -> io.LocalizedString
	10,  // 2: io.EventSemanticTags.localizedAwayTeamLocation:type_name -> io.LocalizedString
	10,  // 3: io.EventSemanticTags.localizedAwayTeamName:type_name -> io.LocalizedString
	9,   // 4: io.EventSemanticTags.eventEndDate:type_name -> google.protobuf.Timestamp
	10,  // 5: io.EventSemanticTags.localizedEventName:type_name -> io.LocalizedString
	9,   // 6: io.EventSemanticTags.eventStartDate:type_name -> google.protobuf.Timestamp
	10,  // 7: io.EventSemanticTags.localizedGenre:type_name -> io.LocalizedString
	10,  // 8: io.EventSemanticTags.localizedHomeTeamAbbreviation:type_name -> io.LocalizedString
	10,  // 9: io.EventSemanticTags.localizedHomeTeamLocation:type_name -> io.LocalizedString
	10,  // 10: io.EventSemanticTags.localizedHomeTeamName:type_name -> io.LocalizedString
	10,  // 11: io.EventSemanticTags.localizedLeagueAbbreviation:type_name -> io.LocalizedString
	10,  // 12: io.EventSemanticTags.localizedLeagueName:type_name -> io.LocalizedString
	10,  // 13: io.EventSemanticTags.localizedSportName:type_name -> io.LocalizedString
	2,   // 14: io.EventSemanticTags.venueLocation:type_name -> io.SemanticLocation
	10,  // 15: io.EventSemanticTags.localizedVenueRoom:type_name -> io.LocalizedString
	5,   // 16: io.EventSemanticTags.wifiAccess:type_name -> io.SemanticWifiNetwork
	10,  // 17: io.EventSemanticTags.localizedVenueRegionName:type_name -> io.LocalizedString
	10,  // 18: io.EventSemanticTags.localizedEntranceDescription:type_name -> io.LocalizedString
	9,   // 19: io.EventSemanticTags.venueGatesOpenDate:type_name -> google.protobuf.Timestamp
	9,   // 20: io.EventSemanticTags.venueFanZoneOpenDate:type_name -> google.protobuf.Timestamp
	9,   // 21: io.EventSemanticTags.venueParkingLotsOpenDate:type_name -> google.protobuf.Timestamp
	9,   // 22: io.EventSemanticTags.venueBoxOfficeOpenDate:type_name -> google.protobuf.Timestamp
	9,   // 23: io.EventSemanticTags.venueOpenDate:type_name -> google.protobuf.Timestamp
	9,   // 24: io.EventSemanticTags.venueCloseDate:type_name -> google.protobuf.Timestamp
	6,   // 25: io.EventSemanticTags.eventStartDateInfo:type_name -> io.SemanticEventDateInfo
	10,  // 26: io.SemanticTags.localizedAdmissionLevel:type_name -> io.LocalizedString
	10,  // 27: io.SemanticTags.localizedAdmissionLevelAbbreviation:type_name -> io.LocalizedString
	10,  // 28: io.SemanticTags.localizedAdditionalTicketAttributes:type_name -> io.LocalizedString
	10,  // 29: io.SemanticTags.localizedAirlineCode:type_name -> io.LocalizedString
	10,  // 30: io.SemanticTags.localizedAttendeeName:type_name -> io.LocalizedString
	10,  // 31: io.SemanticTags.localizedAwayTeamAbbreviation:type_name -> io.LocalizedString
	10,  // 32: io.SemanticTags.localizedAwayTeamLocation:type_name -> io.LocalizedString
	10,  // 33: io.SemanticTags.localizedAwayTeamName:type_name -> io.LocalizedString
	1,   // 34: io.SemanticTags.balance:type_name -> io.SemanticCurrencyAmount
	10,  // 35: io.SemanticTags.localizedBoardingGroup:type_name -> io.LocalizedString
	10,  // 36: io.SemanticTags.localizedCarNumber:type_name -> io.LocalizedString
	10,  // 37: io.SemanticTags.localizedConfirmationNumber:type_name -> io.LocalizedString
	9,   // 38: io.SemanticTags.currentArrivalDate:type_name -> google.protobuf.Timestamp
	9,   // 39: io.SemanticTags.currentBoardingDate:type_name -> google.protobuf.Timestamp
	9,   // 40: io.SemanticTags.currentDepartureDate:type_name -> google.protobuf.Timestamp
	10,  // 41: io.SemanticTags.localizedDepartureAirportCode:type_name -> io.LocalizedString
	10,  // 42: io.SemanticTags.localizedDepartureAirportName:type_name -> io.LocalizedString
	10,  // 43: io.SemanticTags.localizedDepartureGate:type_name -> io.LocalizedString
	10,  // 44: io.SemanticTags.localizedDepartureLocation:type_name -> io.LocalizedString
	10,  // 45: io.SemanticTags.localizedDepartureLocationDescription:type_name -> io.LocalizedString
	10,  // 46: io.SemanticTags.localizedDeparturePlatform:type_name -> io.LocalizedString
	10,  // 47: io.SemanticTags.localizedDepartureStationName:type_name -> io.LocalizedString
	10,  // 48: io.SemanticTags.localizedDepartureTerminal:type_name -> io.LocalizedString
	10,  // 49: io.SemanticTags.localizedDestinationAirportCode:type_name -> io.LocalizedString
	10,  // 50: io.SemanticTags.localizedDestinationAirportName:type_name -> io.LocalizedString
	10,  // 51: io.SemanticTags.localizedDestinationGate:type_name -> io.LocalizedString
	10,  // 52: io.SemanticTags.localizedDestinationLocation:type_name -> io.LocalizedString
	10,  // 53: io.SemanticTags.localizedDestinationLocationDescription:type_name -> io.LocalizedString
	10,  // 54: io.SemanticTags.localizedDestinationPlatform:type_name -> io.LocalizedString
	10,  // 55: io.SemanticTags.localizedDestinationStationName:type_name -> io.LocalizedString
	10,  // 56: io.SemanticTags.localizedDestinationTerminal:type_name -> io.LocalizedString
	9,   // 57: io.SemanticTags.eventEndDate:type_name -> google.protobuf.Timestamp
	10,  // 58: io.SemanticTags.localizedEventName:type_name -> io.LocalizedString
	9,   // 59: io.SemanticTags.eventStartDate:type_name -> google.protobuf.Timestamp
	6,   // 60: io.SemanticTags.eventStartDateInfo:type_name -> io.SemanticEventDateInfo
	0,   // 61: io.SemanticTags.eventType:type_name -> io.EventType
	10,  // 62: io.SemanticTags.localizedFlightCode:type_name -> io.LocalizedString
	10,  // 63: io.SemanticTags.localizedGenre:type_name -> io.LocalizedString
	10,  // 64: io.SemanticTags.localizedHomeTeamAbbreviation:type_name -> io.LocalizedString
	10,  // 65: io.SemanticTags.localizedHomeTeamLocation:type_name -> io.LocalizedString
	10,  // 66: io.SemanticTags.localizedHomeTeamName:type_name -> io.LocalizedString
	10,  // 67: io.SemanticTags.localizedLeagueAbbreviation:type_name -> io.LocalizedString
	10,  // 68: io.SemanticTags.localizedLeagueName:type_name -> io.LocalizedString
	10,  // 69: io.SemanticTags.localizedMembershipProgramName:type_name -> io.LocalizedString
	9,   // 70: io.SemanticTags.originalArrivalDate:type_name -> google.protobuf.Timestamp
	9,   // 71: io.SemanticTags.originalBoardingDate:type_name -> google.protobuf.Timestamp
	9,   // 72: io.SemanticTags.originalDepartureDate:type_name -> google.protobuf.Timestamp
	3,   // 73: io.SemanticTags.passengerName:type_name -> io.SemanticPersonName
	10,  // 74: io.SemanticTags.localizedPriorityStatus:type_name -> io.LocalizedString
	4,   // 75: io.SemanticTags.seats:type_name -> io.SemanticSeat
	10,  // 76: io.SemanticTags.localizedSecurityScreening:type_name -> io.LocalizedString
	10,  // 77: io.SemanticTags.localizedSportName:type_name -> io.LocalizedString
	1,   // 78: io.SemanticTags.totalPrice:type_name -> io.SemanticCurrencyAmount
	10,  // 79: io.SemanticTags.localizedTransitProvider:type_name -> io.LocalizedString
	10,  // 80: io.SemanticTags.localizedTransitStatus:type_name -> io.LocalizedString
	10,  // 81: io.SemanticTags.localizedTransitStatusReason:type_name -> io.LocalizedString
	10,  // 82: io.SemanticTags.localizedVehicleName:type_name -> io.LocalizedString
	10,  // 83: io.SemanticTags.localizedVehicleNumber:type_name -> io.LocalizedString
	10,  // 84: io.SemanticTags.localizedVehicleType:type_name -> io.LocalizedString
	9,   // 85: io.SemanticTags.venueBoxOfficeOpenDate:type_name -> google.protobuf.Timestamp
	9,   // 86: io.SemanticTags.venueCloseDate:type_name -> google.protobuf.Timestamp
	9,   // 87: io.SemanticTags.venueDoorsOpenDate:type_name -> google.protobuf.Timestamp
	10,  // 88: io.SemanticTags.localizedVenueEntrance:type_name -> io.LocalizedString
	2,   // 89: io.SemanticTags.venueLocation:type_name -> io.SemanticLocation
	10,  // 90: io.SemanticTags.localizedVenueName:type_name -> io.LocalizedString
	10,  // 91: io.SemanticTags.localizedVenuePhoneNumber:type_name -> io.LocalizedString
	10,  // 92: io.SemanticTags.localizedVenueRegionName:type_name -> io.LocalizedString
	10,  // 93: io.SemanticTags.localizedVenueRoom:type_name -> io.LocalizedString
	5,   // 94: io.SemanticTags.wifiAccess:type_name -> io.SemanticWifiNetwork
	9,   // 95: io.SemanticTags.venueFanZoneOpenDate:type_name -> google.protobuf.Timestamp
	9,   // 96: io.SemanticTags.venueGatesOpenDate:type_name -> google.protobuf.Timestamp
	9,   // 97: io.SemanticTags.venueParkingLotsOpenDate:type_name -> google.protobuf.Timestamp
	10,  // 98: io.SemanticTags.localizedVenueEntranceDoor:type_name -> io.LocalizedString
	10,  // 99: io.SemanticTags.localizedVenueEntranceGate:type_name -> io.LocalizedString
	10,  // 100: io.SemanticTags.localizedVenueEntrancePortal:type_name -> io.LocalizedString
	10,  // 101: io.SemanticTags.localizedEntranceDescription:type_name -> io.LocalizedString
	102, // [102:102] is the sub-list for method output_type
	102, // [102:102] is the sub-list for method input_type
	102, // [102:102] is the sub-list for extension type_name
	102, // [102:102] is the sub-list for extension extendee
	0,   // [0:102] is the sub-list for field type_name
}

func init() { file_io_common_semantics_proto_init() }
func file_io_common_semantics_proto_init() {
	if File_io_common_semantics_proto != nil {
		return
	}
	file_io_common_localization_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_common_semantics_proto_rawDesc), len(file_io_common_semantics_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_common_semantics_proto_goTypes,
		DependencyIndexes: file_io_common_semantics_proto_depIdxs,
		EnumInfos:         file_io_common_semantics_proto_enumTypes,
		MessageInfos:      file_io_common_semantics_proto_msgTypes,
	}.Build()
	File_io_common_semantics_proto = out.File
	file_io_common_semantics_proto_goTypes = nil
	file_io_common_semantics_proto_depIdxs = nil
}
