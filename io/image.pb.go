// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/image/image.proto

package io

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImageUse int32

const (
	// Mandatory icon, used in Apple Wallet lock screen (87px x 87px).
	ImageUse_icon ImageUse = 0
	// Logo is circle-cropped by Google Pay, a 15% safety margin is recommended (660px x 660px).
	ImageUse_logo ImageUse = 1
	// Apple logo can be used where a rectangular design is preferred for Apple Passes only.  If omitted, the square
	// logo image will be used.  (<=480px x 150px).
	ImageUse_appleLogo ImageUse = 2
	// Hero is the Google Pay strip and is also used in the dialog box when installing (1032px x 336px).
	ImageUse_hero ImageUse = 3
	// Apple Wallet strip image for EventTicket pass types (1125px x 294px).
	ImageUse_eventStrip ImageUse = 4
	// Apple Wallet strip image for other pass types with a  strip image (1125px x 432px).
	ImageUse_strip ImageUse = 5
	// Used on Membership passes and Apple event tickets with a background image
	// (>=320 x >=320 in a ratio range of 2:3-3:2).
	ImageUse_thumbnail ImageUse = 6
	// used only be Apple Event Ticket designs, this image is blurred to form a background and so can be a low quality
	// image.  Note it may also be slightly cropped on some devices (180px x 220px).
	ImageUse_background ImageUse = 7
	// displays above the barcode for Apple Wallet Boarding pass tickets (858px x 45px).
	ImageUse_footer ImageUse = 8
	// Google Pay - used to denote a security program on boarding pass types (E.g. TSA PreCheckÂ®).  Width of 1600px is.
	// shared with the boarding privilege logo (<=1600px x 80px).
	ImageUse_security ImageUse = 9
	// Google Pay - used to denote a boarding privilege.  Width of 1600px is shared with the security program logo.
	// (<=1600px x 80px)
	ImageUse_privilege ImageUse = 10
	// Google Pay - used to denote airline alliance on boarding pass types (<=1600px x 80px).
	ImageUse_airlineAlliance ImageUse = 11
	// For Apple Pay NFC passes whitelisted for personalization. Image is displayed after terms are presented
	// (<=450px x 120px).
	ImageUse_personalization ImageUse = 12
	// used on a landing page or email.  Image has no size constraints and will be treated as @2x pixel density.
	ImageUse_banner ImageUse = 13
	// used for Google Pay in wallet promotional messages - for Apple Pay, the message will be rendered on a mobile
	// website (1860px x <=930px).
	ImageUse_message ImageUse = 14
	// used for user Profile images (300px x 300px).
	ImageUse_profile ImageUse = 15
	// used for user App images in Google Pay (Google approval required, 300px x 300px).
	ImageUse_appImage ImageUse = 16
	// used for custom stamped images.
	ImageUse_stampedImage ImageUse = 18
	// used for custom unstamped images.
	ImageUse_unstampedImage ImageUse = 19
	// used for stamp / punch card type images. Indicates that the image has a stamp image config record.
	ImageUse_stampImage ImageUse = 20
	// used for rectangular Google Wallet pass header image (1280px x 400px).
	ImageUse_wideLogo ImageUse = 21
	// used in the bottom right hand footer inset of an Apple poster Event Ticket (<=405px x 36px).
	ImageUse_secondaryLogo ImageUse = 22
	// used in the background of Apple poster Event Tickets. Image should be a compelling visual representation of the event (1074px x 1344px).
	ImageUse_artwork ImageUse = 23
	// used in the top left hand corner for Apple poster style Event tickets (<=378px x 30px)
	ImageUse_posterLogo ImageUse = 24
	// used to present a venue map for an Apple poster style Event Ticket.  Width should be Ratio should be at least 1074px wide and have a 16:9 or 4:5 to avoid cropping.
	ImageUse_venueMap ImageUse = 25
)

// Enum value maps for ImageUse.
var (
	ImageUse_name = map[int32]string{
		0:  "icon",
		1:  "logo",
		2:  "appleLogo",
		3:  "hero",
		4:  "eventStrip",
		5:  "strip",
		6:  "thumbnail",
		7:  "background",
		8:  "footer",
		9:  "security",
		10: "privilege",
		11: "airlineAlliance",
		12: "personalization",
		13: "banner",
		14: "message",
		15: "profile",
		16: "appImage",
		18: "stampedImage",
		19: "unstampedImage",
		20: "stampImage",
		21: "wideLogo",
		22: "secondaryLogo",
		23: "artwork",
		24: "posterLogo",
		25: "venueMap",
	}
	ImageUse_value = map[string]int32{
		"icon":            0,
		"logo":            1,
		"appleLogo":       2,
		"hero":            3,
		"eventStrip":      4,
		"strip":           5,
		"thumbnail":       6,
		"background":      7,
		"footer":          8,
		"security":        9,
		"privilege":       10,
		"airlineAlliance": 11,
		"personalization": 12,
		"banner":          13,
		"message":         14,
		"profile":         15,
		"appImage":        16,
		"stampedImage":    18,
		"unstampedImage":  19,
		"stampImage":      20,
		"wideLogo":        21,
		"secondaryLogo":   22,
		"artwork":         23,
		"posterLogo":      24,
		"venueMap":        25,
	}
)

func (x ImageUse) Enum() *ImageUse {
	p := new(ImageUse)
	*p = x
	return p
}

func (x ImageUse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageUse) Descriptor() protoreflect.EnumDescriptor {
	return file_io_image_image_proto_enumTypes[0].Descriptor()
}

func (ImageUse) Type() protoreflect.EnumType {
	return &file_io_image_image_proto_enumTypes[0]
}

func (x ImageUse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageUse.Descriptor instead.
func (ImageUse) EnumDescriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{0}
}

// See image 'Use' enum for descriptions and sizes.
type ImageIds struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Icon            string                 `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Logo            string                 `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`
	AppleLogo       string                 `protobuf:"bytes,3,opt,name=appleLogo,proto3" json:"appleLogo,omitempty"`
	Hero            string                 `protobuf:"bytes,4,opt,name=hero,proto3" json:"hero,omitempty"`
	EventStrip      string                 `protobuf:"bytes,5,opt,name=eventStrip,proto3" json:"eventStrip,omitempty"`
	Strip           string                 `protobuf:"bytes,6,opt,name=strip,proto3" json:"strip,omitempty"`
	Thumbnail       string                 `protobuf:"bytes,7,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Background      string                 `protobuf:"bytes,8,opt,name=background,proto3" json:"background,omitempty"`
	Footer          string                 `protobuf:"bytes,9,opt,name=footer,proto3" json:"footer,omitempty"`
	Security        string                 `protobuf:"bytes,10,opt,name=security,proto3" json:"security,omitempty"`
	Privilege       string                 `protobuf:"bytes,11,opt,name=privilege,proto3" json:"privilege,omitempty"`
	AirlineAlliance string                 `protobuf:"bytes,12,opt,name=airlineAlliance,proto3" json:"airlineAlliance,omitempty"`
	Personalization string                 `protobuf:"bytes,13,opt,name=personalization,proto3" json:"personalization,omitempty"`
	Banner          string                 `protobuf:"bytes,14,opt,name=banner,proto3" json:"banner,omitempty"`
	Message         string                 `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`
	Profile         string                 `protobuf:"bytes,16,opt,name=profile,proto3" json:"profile,omitempty"`
	AppImage        string                 `protobuf:"bytes,17,opt,name=appImage,proto3" json:"appImage,omitempty"`
	StampedImage    string                 `protobuf:"bytes,18,opt,name=stampedImage,proto3" json:"stampedImage,omitempty"`
	UnstampedImage  string                 `protobuf:"bytes,19,opt,name=unstampedImage,proto3" json:"unstampedImage,omitempty"`
	StampImage      string                 `protobuf:"bytes,20,opt,name=stampImage,proto3" json:"stampImage,omitempty"`
	WideLogo        string                 `protobuf:"bytes,21,opt,name=wideLogo,proto3" json:"wideLogo,omitempty"`
	SecondaryLogo   string                 `protobuf:"bytes,22,opt,name=secondaryLogo,proto3" json:"secondaryLogo,omitempty"`
	Artwork         string                 `protobuf:"bytes,23,opt,name=artwork,proto3" json:"artwork,omitempty"`
	PosterLogo      string                 `protobuf:"bytes,24,opt,name=posterLogo,proto3" json:"posterLogo,omitempty"`
	VenueMap        string                 `protobuf:"bytes,25,opt,name=venueMap,proto3" json:"venueMap,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ImageIds) Reset() {
	*x = ImageIds{}
	mi := &file_io_image_image_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageIds) ProtoMessage() {}

func (x *ImageIds) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageIds.ProtoReflect.Descriptor instead.
func (*ImageIds) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{0}
}

func (x *ImageIds) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ImageIds) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ImageIds) GetAppleLogo() string {
	if x != nil {
		return x.AppleLogo
	}
	return ""
}

func (x *ImageIds) GetHero() string {
	if x != nil {
		return x.Hero
	}
	return ""
}

func (x *ImageIds) GetEventStrip() string {
	if x != nil {
		return x.EventStrip
	}
	return ""
}

func (x *ImageIds) GetStrip() string {
	if x != nil {
		return x.Strip
	}
	return ""
}

func (x *ImageIds) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *ImageIds) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *ImageIds) GetFooter() string {
	if x != nil {
		return x.Footer
	}
	return ""
}

func (x *ImageIds) GetSecurity() string {
	if x != nil {
		return x.Security
	}
	return ""
}

func (x *ImageIds) GetPrivilege() string {
	if x != nil {
		return x.Privilege
	}
	return ""
}

func (x *ImageIds) GetAirlineAlliance() string {
	if x != nil {
		return x.AirlineAlliance
	}
	return ""
}

func (x *ImageIds) GetPersonalization() string {
	if x != nil {
		return x.Personalization
	}
	return ""
}

func (x *ImageIds) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *ImageIds) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ImageIds) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *ImageIds) GetAppImage() string {
	if x != nil {
		return x.AppImage
	}
	return ""
}

func (x *ImageIds) GetStampedImage() string {
	if x != nil {
		return x.StampedImage
	}
	return ""
}

func (x *ImageIds) GetUnstampedImage() string {
	if x != nil {
		return x.UnstampedImage
	}
	return ""
}

func (x *ImageIds) GetStampImage() string {
	if x != nil {
		return x.StampImage
	}
	return ""
}

func (x *ImageIds) GetWideLogo() string {
	if x != nil {
		return x.WideLogo
	}
	return ""
}

func (x *ImageIds) GetSecondaryLogo() string {
	if x != nil {
		return x.SecondaryLogo
	}
	return ""
}

func (x *ImageIds) GetArtwork() string {
	if x != nil {
		return x.Artwork
	}
	return ""
}

func (x *ImageIds) GetPosterLogo() string {
	if x != nil {
		return x.PosterLogo
	}
	return ""
}

func (x *ImageIds) GetVenueMap() string {
	if x != nil {
		return x.VenueMap
	}
	return ""
}

// Images strings can be either a base64 image or a url. See image 'Use' enum for descriptions and sizes.
type ImageData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mandatory icon, used in Apple Wallet lock screen (87px x 87px).
	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	// Logo is circle-cropped by Google Pay, a 15% safety margin is recommended (660px x 660px).
	Logo string `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`
	// Apple logo can be used where a rectangular design is preferred for Apple Passes only.  If ommitted, the square logo image will be used.  (<=480px x 150px).
	AppleLogo string `protobuf:"bytes,3,opt,name=appleLogo,proto3" json:"appleLogo,omitempty"`
	// Hero is the Google Pay strip and is also used in the dialog box when installing (1032px x 336px).
	Hero string `protobuf:"bytes,4,opt,name=hero,proto3" json:"hero,omitempty"`
	// Apple Wallet strip image for EventTicket pass types (1125px x 294px).
	EventStrip string `protobuf:"bytes,5,opt,name=eventStrip,proto3" json:"eventStrip,omitempty"`
	// Apple Wallet strip image for other pass types with a  strip image (1125px x 432px).
	Strip string `protobuf:"bytes,6,opt,name=strip,proto3" json:"strip,omitempty"`
	// Used on Membership passes and Apple event tickets with a background image (>=270px x >=270px in a ratio range of 2:3-3:2).
	Thumbnail string `protobuf:"bytes,7,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	// Used only be Apple Event Ticket designs, this image is blurred to form a background and so can be a low quality image.  Note it may also be slightly cropped on some devices (180px x 220px).
	Background string `protobuf:"bytes,8,opt,name=background,proto3" json:"background,omitempty"`
	// Displays above the barcode for Apple Wallet Boarding pass tickets (858px x 45px)
	Footer string `protobuf:"bytes,9,opt,name=footer,proto3" json:"footer,omitempty"`
	// Google Pay - used to denote a security program on boarding pass types (E.g. TSA PreCheckÂ®).  Width of 1600px is shared with the boarding privilege logo (<=1600px x 80px).
	Security string `protobuf:"bytes,10,opt,name=security,proto3" json:"security,omitempty"`
	// Google Pay - used to denote a boarding privilege.  Width of 1600px is shared with the security program logo (<=1600px x 80px).
	Privilege string `protobuf:"bytes,11,opt,name=privilege,proto3" json:"privilege,omitempty"`
	// Google Pay - used to denote airline alliance on boarding pass types (<=1600px x 80px).
	AirlineAlliance string `protobuf:"bytes,12,opt,name=airlineAlliance,proto3" json:"airlineAlliance,omitempty"`
	// For Apple Pay NFC passes whitelisted for personalization. Image is displayed after terms are presented (<=450px x 120px).
	Personalization string `protobuf:"bytes,13,opt,name=personalization,proto3" json:"personalization,omitempty"`
	// Used on a landing page or email.  Image has no size constraints and will be treated as @2x pixel density.
	Banner string `protobuf:"bytes,14,opt,name=banner,proto3" json:"banner,omitempty"`
	// Used for Google Pay in wallet promotional messages - for Apple Pay, the message will be rendered on a mobile website (1860px x <=930px).
	Message string `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`
	// Used for user Profile images (300px x 300px). Cannot be localized.
	Profile string `protobuf:"bytes,16,opt,name=profile,proto3" json:"profile,omitempty"`
	// Used for user app images in Google Pay Passes (300px x 300px). Cannot be localized.
	AppImage string `protobuf:"bytes,17,opt,name=appImage,proto3" json:"appImage,omitempty"`
	// Used for stamp and unstamped images for use with stamp/punch cards. Cannot be localized.
	StampedImage string `protobuf:"bytes,18,opt,name=stampedImage,proto3" json:"stampedImage,omitempty"`
	// Used for stamp and unstamped images for use with stamp/punch cards. Cannot be localized.
	UnstampedImage string `protobuf:"bytes,19,opt,name=unstampedImage,proto3" json:"unstampedImage,omitempty"`
	// Spec for a stamp image. Cannot be localized.
	StampConfig *StampImageConfig `protobuf:"bytes,20,opt,name=stampConfig,proto3" json:"stampConfig,omitempty"`
	// Used for rectangular Google Wallet pass header image (1280px x 400px).
	WideLogo string `protobuf:"bytes,21,opt,name=wideLogo,proto3" json:"wideLogo,omitempty"`
	// Used in the bottom right hand footer inset of an Apple poster Event Ticket (<=405px x 36px).
	SecondaryLogo string `protobuf:"bytes,22,opt,name=secondaryLogo,proto3" json:"secondaryLogo,omitempty"`
	// Used in the background of Apple poster Event Tickets. Image should be a compelling visual representation of the event (1074px x 1344px).
	Artwork string `protobuf:"bytes,23,opt,name=artwork,proto3" json:"artwork,omitempty"`
	// Used in the top left hand corner for Apple poster style Event tickets (<=378px x 90px)
	PosterLogo string `protobuf:"bytes,24,opt,name=posterLogo,proto3" json:"posterLogo,omitempty"`
	// Used to present a venue map for an Apple poster style Event Ticket.  Width should be Ratio should be at least 1320px wide and have a 16:9 or 4:5 to avoid cropping.
	VenueMap string `protobuf:"bytes,25,opt,name=venueMap,proto3" json:"venueMap,omitempty"`
	// Sets different icon images for non-default languages.
	LocalizedIcon *LocalizedString `protobuf:"bytes,31,opt,name=localizedIcon,proto3" json:"localizedIcon,omitempty"` // allow for future image types
	// Sets different logo images for non-default languages.
	LocalizedLogo *LocalizedString `protobuf:"bytes,32,opt,name=localizedLogo,proto3" json:"localizedLogo,omitempty"`
	// Sets different Apple Logo images for non-default languages.
	LocalizedAppleLogo *LocalizedString `protobuf:"bytes,33,opt,name=localizedAppleLogo,proto3" json:"localizedAppleLogo,omitempty"`
	// Sets different hero images for non-default languages.
	LocalizedHero *LocalizedString `protobuf:"bytes,34,opt,name=localizedHero,proto3" json:"localizedHero,omitempty"`
	// Sets different event strip images for non-default languages.
	LocalizedEventStrip *LocalizedString `protobuf:"bytes,35,opt,name=localizedEventStrip,proto3" json:"localizedEventStrip,omitempty"`
	// Sets different strip images for non-default languages.
	LocalizedStrip *LocalizedString `protobuf:"bytes,36,opt,name=localizedStrip,proto3" json:"localizedStrip,omitempty"`
	// Sets different thumbnail images for non-default languages.
	LocalizedThumbnail *LocalizedString `protobuf:"bytes,37,opt,name=localizedThumbnail,proto3" json:"localizedThumbnail,omitempty"`
	// Sets different background images for non-default languages.
	LocalizedBackground *LocalizedString `protobuf:"bytes,38,opt,name=localizedBackground,proto3" json:"localizedBackground,omitempty"`
	// Sets different footer images for non-default languages.
	LocalizedFooter *LocalizedString `protobuf:"bytes,39,opt,name=localizedFooter,proto3" json:"localizedFooter,omitempty"`
	// Sets different security images for non-default languages.
	LocalizedSecurity *LocalizedString `protobuf:"bytes,40,opt,name=localizedSecurity,proto3" json:"localizedSecurity,omitempty"`
	// Sets different privilege images for non-default languages.
	LocalizedPrivilege *LocalizedString `protobuf:"bytes,41,opt,name=localizedPrivilege,proto3" json:"localizedPrivilege,omitempty"`
	// Sets different airline alliance images for non-default languages.
	LocalizedAirlineAlliance *LocalizedString `protobuf:"bytes,42,opt,name=localizedAirlineAlliance,proto3" json:"localizedAirlineAlliance,omitempty"`
	// Sets different personalized images for non-default languages.
	LocalizedPersonalization *LocalizedString `protobuf:"bytes,43,opt,name=localizedPersonalization,proto3" json:"localizedPersonalization,omitempty"`
	// Sets different banner images for non-default languages.
	LocalizedBanner *LocalizedString `protobuf:"bytes,44,opt,name=localizedBanner,proto3" json:"localizedBanner,omitempty"`
	// Sets different message images for non-default languages.
	LocalizedMessage *LocalizedString `protobuf:"bytes,45,opt,name=localizedMessage,proto3" json:"localizedMessage,omitempty"`
	// Sets different wideLogo images for non-default languages.
	LocalizedWideLogo *LocalizedString `protobuf:"bytes,46,opt,name=localizedWideLogo,proto3" json:"localizedWideLogo,omitempty"`
	// Sets different secondaryLogo images for non-default languages.
	LocalizedSecondaryLogo *LocalizedString `protobuf:"bytes,47,opt,name=localizedSecondaryLogo,proto3" json:"localizedSecondaryLogo,omitempty"`
	// Sets different artwork images for non-default languages.
	LocalizedArtwork *LocalizedString `protobuf:"bytes,48,opt,name=localizedArtwork,proto3" json:"localizedArtwork,omitempty"`
	// Sets different posterLogo images for non-default languages.
	LocalizedPosterLogo *LocalizedString `protobuf:"bytes,49,opt,name=localizedPosterLogo,proto3" json:"localizedPosterLogo,omitempty"`
	// Sets different venueMap images for non-default languages.
	LocalizedVenueMap *LocalizedString `protobuf:"bytes,50,opt,name=localizedVenueMap,proto3" json:"localizedVenueMap,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	mi := &file_io_image_image_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{1}
}

func (x *ImageData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ImageData) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ImageData) GetAppleLogo() string {
	if x != nil {
		return x.AppleLogo
	}
	return ""
}

func (x *ImageData) GetHero() string {
	if x != nil {
		return x.Hero
	}
	return ""
}

func (x *ImageData) GetEventStrip() string {
	if x != nil {
		return x.EventStrip
	}
	return ""
}

func (x *ImageData) GetStrip() string {
	if x != nil {
		return x.Strip
	}
	return ""
}

func (x *ImageData) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *ImageData) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *ImageData) GetFooter() string {
	if x != nil {
		return x.Footer
	}
	return ""
}

func (x *ImageData) GetSecurity() string {
	if x != nil {
		return x.Security
	}
	return ""
}

func (x *ImageData) GetPrivilege() string {
	if x != nil {
		return x.Privilege
	}
	return ""
}

func (x *ImageData) GetAirlineAlliance() string {
	if x != nil {
		return x.AirlineAlliance
	}
	return ""
}

func (x *ImageData) GetPersonalization() string {
	if x != nil {
		return x.Personalization
	}
	return ""
}

func (x *ImageData) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *ImageData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ImageData) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *ImageData) GetAppImage() string {
	if x != nil {
		return x.AppImage
	}
	return ""
}

func (x *ImageData) GetStampedImage() string {
	if x != nil {
		return x.StampedImage
	}
	return ""
}

func (x *ImageData) GetUnstampedImage() string {
	if x != nil {
		return x.UnstampedImage
	}
	return ""
}

func (x *ImageData) GetStampConfig() *StampImageConfig {
	if x != nil {
		return x.StampConfig
	}
	return nil
}

func (x *ImageData) GetWideLogo() string {
	if x != nil {
		return x.WideLogo
	}
	return ""
}

func (x *ImageData) GetSecondaryLogo() string {
	if x != nil {
		return x.SecondaryLogo
	}
	return ""
}

func (x *ImageData) GetArtwork() string {
	if x != nil {
		return x.Artwork
	}
	return ""
}

func (x *ImageData) GetPosterLogo() string {
	if x != nil {
		return x.PosterLogo
	}
	return ""
}

func (x *ImageData) GetVenueMap() string {
	if x != nil {
		return x.VenueMap
	}
	return ""
}

func (x *ImageData) GetLocalizedIcon() *LocalizedString {
	if x != nil {
		return x.LocalizedIcon
	}
	return nil
}

func (x *ImageData) GetLocalizedLogo() *LocalizedString {
	if x != nil {
		return x.LocalizedLogo
	}
	return nil
}

func (x *ImageData) GetLocalizedAppleLogo() *LocalizedString {
	if x != nil {
		return x.LocalizedAppleLogo
	}
	return nil
}

func (x *ImageData) GetLocalizedHero() *LocalizedString {
	if x != nil {
		return x.LocalizedHero
	}
	return nil
}

func (x *ImageData) GetLocalizedEventStrip() *LocalizedString {
	if x != nil {
		return x.LocalizedEventStrip
	}
	return nil
}

func (x *ImageData) GetLocalizedStrip() *LocalizedString {
	if x != nil {
		return x.LocalizedStrip
	}
	return nil
}

func (x *ImageData) GetLocalizedThumbnail() *LocalizedString {
	if x != nil {
		return x.LocalizedThumbnail
	}
	return nil
}

func (x *ImageData) GetLocalizedBackground() *LocalizedString {
	if x != nil {
		return x.LocalizedBackground
	}
	return nil
}

func (x *ImageData) GetLocalizedFooter() *LocalizedString {
	if x != nil {
		return x.LocalizedFooter
	}
	return nil
}

func (x *ImageData) GetLocalizedSecurity() *LocalizedString {
	if x != nil {
		return x.LocalizedSecurity
	}
	return nil
}

func (x *ImageData) GetLocalizedPrivilege() *LocalizedString {
	if x != nil {
		return x.LocalizedPrivilege
	}
	return nil
}

func (x *ImageData) GetLocalizedAirlineAlliance() *LocalizedString {
	if x != nil {
		return x.LocalizedAirlineAlliance
	}
	return nil
}

func (x *ImageData) GetLocalizedPersonalization() *LocalizedString {
	if x != nil {
		return x.LocalizedPersonalization
	}
	return nil
}

func (x *ImageData) GetLocalizedBanner() *LocalizedString {
	if x != nil {
		return x.LocalizedBanner
	}
	return nil
}

func (x *ImageData) GetLocalizedMessage() *LocalizedString {
	if x != nil {
		return x.LocalizedMessage
	}
	return nil
}

func (x *ImageData) GetLocalizedWideLogo() *LocalizedString {
	if x != nil {
		return x.LocalizedWideLogo
	}
	return nil
}

func (x *ImageData) GetLocalizedSecondaryLogo() *LocalizedString {
	if x != nil {
		return x.LocalizedSecondaryLogo
	}
	return nil
}

func (x *ImageData) GetLocalizedArtwork() *LocalizedString {
	if x != nil {
		return x.LocalizedArtwork
	}
	return nil
}

func (x *ImageData) GetLocalizedPosterLogo() *LocalizedString {
	if x != nil {
		return x.LocalizedPosterLogo
	}
	return nil
}

func (x *ImageData) GetLocalizedVenueMap() *LocalizedString {
	if x != nil {
		return x.LocalizedVenueMap
	}
	return nil
}

type ImageRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Use           ImageUse               `protobuf:"varint,5,opt,name=use,proto3,enum=io.ImageUse" json:"use,omitempty"`
	Languages     []LanguageCode         `protobuf:"varint,6,rep,packed,name=languages,proto3,enum=io.LanguageCode" json:"languages,omitempty"`
	OwnerUsername string                 `protobuf:"bytes,7,opt,name=ownerUsername,proto3" json:"ownerUsername,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageRecord) Reset() {
	*x = ImageRecord{}
	mi := &file_io_image_image_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRecord) ProtoMessage() {}

func (x *ImageRecord) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRecord.ProtoReflect.Descriptor instead.
func (*ImageRecord) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{2}
}

func (x *ImageRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImageRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageRecord) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImageRecord) GetUse() ImageUse {
	if x != nil {
		return x.Use
	}
	return ImageUse_icon
}

func (x *ImageRecord) GetLanguages() []LanguageCode {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *ImageRecord) GetOwnerUsername() string {
	if x != nil {
		return x.OwnerUsername
	}
	return ""
}

func (x *ImageRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ImageRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ProfileImageInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Provide an image URL or base64 image data.
	ImageData     string `protobuf:"bytes,1,opt,name=imageData,proto3" json:"imageData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileImageInput) Reset() {
	*x = ProfileImageInput{}
	mi := &file_io_image_image_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileImageInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileImageInput) ProtoMessage() {}

func (x *ProfileImageInput) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileImageInput.ProtoReflect.Descriptor instead.
func (*ProfileImageInput) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{3}
}

func (x *ProfileImageInput) GetImageData() string {
	if x != nil {
		return x.ImageData
	}
	return ""
}

type MultipleImages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Images        []*ImageRecord         `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultipleImages) Reset() {
	*x = MultipleImages{}
	mi := &file_io_image_image_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultipleImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleImages) ProtoMessage() {}

func (x *MultipleImages) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleImages.ProtoReflect.Descriptor instead.
func (*MultipleImages) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{4}
}

func (x *MultipleImages) GetImages() []*ImageRecord {
	if x != nil {
		return x.Images
	}
	return nil
}

type StampImageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit Image Id.
	// @tag: validateGeneric:"required,uuidCompressedString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required,uuidCompressedString"`
	// a bitmask indicating the stamped status (E.g. a value of 22 indicates stamps 2, 3 and 5 are stamped).
	Status        uint64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StampImageRequest) Reset() {
	*x = StampImageRequest{}
	mi := &file_io_image_image_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StampImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StampImageRequest) ProtoMessage() {}

func (x *StampImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StampImageRequest.ProtoReflect.Descriptor instead.
func (*StampImageRequest) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{5}
}

func (x *StampImageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StampImageRequest) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CreateImageInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If multiple images types are uploaded, then the image type will be appended to the name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Image data can be either a base64 image or a url.
	ImageData     *ImageData `protobuf:"bytes,2,opt,name=imageData,proto3" json:"imageData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateImageInput) Reset() {
	*x = CreateImageInput{}
	mi := &file_io_image_image_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateImageInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageInput) ProtoMessage() {}

func (x *CreateImageInput) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageInput.ProtoReflect.Descriptor instead.
func (*CreateImageInput) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{6}
}

func (x *CreateImageInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateImageInput) GetImageData() *ImageData {
	if x != nil {
		return x.ImageData
	}
	return nil
}

type UpdateImageInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The image id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional, if omitted, the original name will remain the same.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional, if omitted, the original image will remain the same.
	ImageData string `protobuf:"bytes,3,opt,name=imageData,proto3" json:"imageData,omitempty"`
	// Optional, provided localizations will be added/replaced, existing omitted localizations will remain in place.
	LocalizedImageData *LocalizedString `protobuf:"bytes,4,opt,name=localizedImageData,proto3" json:"localizedImageData,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateImageInput) Reset() {
	*x = UpdateImageInput{}
	mi := &file_io_image_image_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateImageInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageInput) ProtoMessage() {}

func (x *UpdateImageInput) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageInput.ProtoReflect.Descriptor instead.
func (*UpdateImageInput) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateImageInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateImageInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateImageInput) GetImageData() string {
	if x != nil {
		return x.ImageData
	}
	return ""
}

func (x *UpdateImageInput) GetLocalizedImageData() *LocalizedString {
	if x != nil {
		return x.LocalizedImageData
	}
	return nil
}

type ImageBundle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Image         []byte                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageBundle) Reset() {
	*x = ImageBundle{}
	mi := &file_io_image_image_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageBundle) ProtoMessage() {}

func (x *ImageBundle) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageBundle.ProtoReflect.Descriptor instead.
func (*ImageBundle) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{8}
}

func (x *ImageBundle) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type LocalizedImageInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Image id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Language code of the image.
	LanguageCode  string `protobuf:"bytes,2,opt,name=languageCode,proto3" json:"languageCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalizedImageInput) Reset() {
	*x = LocalizedImageInput{}
	mi := &file_io_image_image_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalizedImageInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalizedImageInput) ProtoMessage() {}

func (x *LocalizedImageInput) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalizedImageInput.ProtoReflect.Descriptor instead.
func (*LocalizedImageInput) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{9}
}

func (x *LocalizedImageInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LocalizedImageInput) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

type StampImageConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateCreate:"isdefault" validateUpdate:"required,uuidCompressedString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateCreate:"isdefault" validateUpdate:"required,uuidCompressedString"`
	// @tag: validateGeneric:"omitempty,min=0,max=50"
	Padding float32 `protobuf:"fixed32,2,opt,name=padding,proto3" json:"padding,omitempty" validateGeneric:"omitempty,min=0,max=50"`
	// @tag: validateGeneric:"required,max=50"
	TotalStamps uint32 `protobuf:"varint,3,opt,name=totalStamps,proto3" json:"totalStamps,omitempty" validateGeneric:"required,max=50"`
	// @tag: validateGeneric:"required"
	StampImage string `protobuf:"bytes,4,opt,name=stampImage,proto3" json:"stampImage,omitempty" validateGeneric:"required"`
	// @tag: validateGeneric:"omitempty"
	UnstampImage string `protobuf:"bytes,5,opt,name=unstampImage,proto3" json:"unstampImage,omitempty" validateGeneric:"omitempty"`
	// @tag: validateGeneric:"required_without=BackgroundColor,omitempty"
	BackgroundImage string `protobuf:"bytes,6,opt,name=backgroundImage,proto3" json:"backgroundImage,omitempty" validateGeneric:"required_without=BackgroundColor,omitempty"`
	// @tag: validateGeneric:"required_without=BackgroundImage,omitempty,hexcolor"
	BackgroundColor string `protobuf:"bytes,7,opt,name=backgroundColor,proto3" json:"backgroundColor,omitempty" validateGeneric:"required_without=BackgroundImage,omitempty,hexcolor"`
	// @tag: validateGeneric:"required_with=BackgroundColor,omitempty,min=0,max=1"
	BackgroundOpacity float32 `protobuf:"fixed32,8,opt,name=backgroundOpacity,proto3" json:"backgroundOpacity,omitempty" validateGeneric:"required_with=BackgroundColor,omitempty,min=0,max=1"`
	// @tag: validateGeneric:"required,hexcolor"
	StampColor string `protobuf:"bytes,9,opt,name=stampColor,proto3" json:"stampColor,omitempty" validateGeneric:"required,hexcolor"`
	// @tag: validateGeneric:"required,omitempty,min=0,max=1"
	StampOpacity float32 `protobuf:"fixed32,10,opt,name=stampOpacity,proto3" json:"stampOpacity,omitempty" validateGeneric:"required,omitempty,min=0,max=1"`
	// @tag: validateGeneric:"omitempty,hexcolor"
	UnstampColor string `protobuf:"bytes,11,opt,name=unstampColor,proto3" json:"unstampColor,omitempty" validateGeneric:"omitempty,hexcolor"`
	// @tag: validateGeneric:"required_with=unstampColor,omitempty,min=0,max=1"
	UnstampOpacity float32 `protobuf:"fixed32,12,opt,name=unstampOpacity,proto3" json:"unstampOpacity,omitempty" validateGeneric:"required_with=unstampColor,omitempty,min=0,max=1"`
	Placeholders   bool    `protobuf:"varint,13,opt,name=placeholders,proto3" json:"placeholders,omitempty"`
	// @tag: validateGeneric:"required_with=Placeholders,omitempty,hexcolor"
	PlaceholderColor string `protobuf:"bytes,14,opt,name=placeholderColor,proto3" json:"placeholderColor,omitempty" validateGeneric:"required_with=Placeholders,omitempty,hexcolor"`
	// @tag: validateGeneric:"required_with=PlaceholderColor,omitempty,min=0,max=1"
	PlaceholderOpacity float32 `protobuf:"fixed32,15,opt,name=placeholderOpacity,proto3" json:"placeholderOpacity,omitempty" validateGeneric:"required_with=PlaceholderColor,omitempty,min=0,max=1"`
	// @tag: validateGeneric:"required_with=Placeholders,omitempty,hexcolor"
	PlaceholderBorderColor string `protobuf:"bytes,16,opt,name=placeholderBorderColor,proto3" json:"placeholderBorderColor,omitempty" validateGeneric:"required_with=Placeholders,omitempty,hexcolor"`
	// @tag: validateGeneric:"required_with=PlaceholderBorderColor,omitempty,min=0,max=1"
	PlaceholderBorderOpacity float32 `protobuf:"fixed32,17,opt,name=placeholderBorderOpacity,proto3" json:"placeholderBorderOpacity,omitempty" validateGeneric:"required_with=PlaceholderBorderColor,omitempty,min=0,max=1"`
	RewardPlaceholders       bool    `protobuf:"varint,18,opt,name=rewardPlaceholders,proto3" json:"rewardPlaceholders,omitempty"`
	// @tag: validateGeneric:"required_with=RewardPlaceholders,omitempty,hexcolor"
	RewardBorderColor string `protobuf:"bytes,19,opt,name=rewardBorderColor,proto3" json:"rewardBorderColor,omitempty" validateGeneric:"required_with=RewardPlaceholders,omitempty,hexcolor"`
	// @tag: validateGeneric:"required_with=RewardBorderColor,omitempty,min=0,max=1"
	RewardBorderOpacity float32 `protobuf:"fixed32,20,opt,name=rewardBorderOpacity,proto3" json:"rewardBorderOpacity,omitempty" validateGeneric:"required_with=RewardBorderColor,omitempty,min=0,max=1"`
	// @tag: validateGeneric:"required_with=RewardPositions,omitempty,hexcolor"
	RewardBackgroundColor string `protobuf:"bytes,21,opt,name=rewardBackgroundColor,proto3" json:"rewardBackgroundColor,omitempty" validateGeneric:"required_with=RewardPositions,omitempty,hexcolor"`
	// @tag: validateGeneric:"required_with=RewardBackgroundColor,omitempty,min=0,max=1"
	RewardBackgroundOpacity float32 `protobuf:"fixed32,22,opt,name=rewardBackgroundOpacity,proto3" json:"rewardBackgroundOpacity,omitempty" validateGeneric:"required_with=RewardBackgroundColor,omitempty,min=0,max=1"`
	// takes a bitmask of rewards positions.
	// @tag: validateGeneric:"omitempty"
	RewardPositions uint64 `protobuf:"varint,23,opt,name=rewardPositions,proto3" json:"rewardPositions,omitempty" validateGeneric:"omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StampImageConfig) Reset() {
	*x = StampImageConfig{}
	mi := &file_io_image_image_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StampImageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StampImageConfig) ProtoMessage() {}

func (x *StampImageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StampImageConfig.ProtoReflect.Descriptor instead.
func (*StampImageConfig) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{10}
}

func (x *StampImageConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StampImageConfig) GetPadding() float32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

func (x *StampImageConfig) GetTotalStamps() uint32 {
	if x != nil {
		return x.TotalStamps
	}
	return 0
}

func (x *StampImageConfig) GetStampImage() string {
	if x != nil {
		return x.StampImage
	}
	return ""
}

func (x *StampImageConfig) GetUnstampImage() string {
	if x != nil {
		return x.UnstampImage
	}
	return ""
}

func (x *StampImageConfig) GetBackgroundImage() string {
	if x != nil {
		return x.BackgroundImage
	}
	return ""
}

func (x *StampImageConfig) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *StampImageConfig) GetBackgroundOpacity() float32 {
	if x != nil {
		return x.BackgroundOpacity
	}
	return 0
}

func (x *StampImageConfig) GetStampColor() string {
	if x != nil {
		return x.StampColor
	}
	return ""
}

func (x *StampImageConfig) GetStampOpacity() float32 {
	if x != nil {
		return x.StampOpacity
	}
	return 0
}

func (x *StampImageConfig) GetUnstampColor() string {
	if x != nil {
		return x.UnstampColor
	}
	return ""
}

func (x *StampImageConfig) GetUnstampOpacity() float32 {
	if x != nil {
		return x.UnstampOpacity
	}
	return 0
}

func (x *StampImageConfig) GetPlaceholders() bool {
	if x != nil {
		return x.Placeholders
	}
	return false
}

func (x *StampImageConfig) GetPlaceholderColor() string {
	if x != nil {
		return x.PlaceholderColor
	}
	return ""
}

func (x *StampImageConfig) GetPlaceholderOpacity() float32 {
	if x != nil {
		return x.PlaceholderOpacity
	}
	return 0
}

func (x *StampImageConfig) GetPlaceholderBorderColor() string {
	if x != nil {
		return x.PlaceholderBorderColor
	}
	return ""
}

func (x *StampImageConfig) GetPlaceholderBorderOpacity() float32 {
	if x != nil {
		return x.PlaceholderBorderOpacity
	}
	return 0
}

func (x *StampImageConfig) GetRewardPlaceholders() bool {
	if x != nil {
		return x.RewardPlaceholders
	}
	return false
}

func (x *StampImageConfig) GetRewardBorderColor() string {
	if x != nil {
		return x.RewardBorderColor
	}
	return ""
}

func (x *StampImageConfig) GetRewardBorderOpacity() float32 {
	if x != nil {
		return x.RewardBorderOpacity
	}
	return 0
}

func (x *StampImageConfig) GetRewardBackgroundColor() string {
	if x != nil {
		return x.RewardBackgroundColor
	}
	return ""
}

func (x *StampImageConfig) GetRewardBackgroundOpacity() float32 {
	if x != nil {
		return x.RewardBackgroundOpacity
	}
	return 0
}

func (x *StampImageConfig) GetRewardPositions() uint64 {
	if x != nil {
		return x.RewardPositions
	}
	return 0
}

type StampImagePreviewRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required"
	StampImageConfig *StampImageConfig `protobuf:"bytes,1,opt,name=stampImageConfig,proto3" json:"stampImageConfig,omitempty" validateGeneric:"required"`
	// a bitmask indicating the stamped status (E.g. a value of 22 indicates stamps 2, 3 and 5 are stamped).
	Status        uint64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StampImagePreviewRequest) Reset() {
	*x = StampImagePreviewRequest{}
	mi := &file_io_image_image_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StampImagePreviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StampImagePreviewRequest) ProtoMessage() {}

func (x *StampImagePreviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StampImagePreviewRequest.ProtoReflect.Descriptor instead.
func (*StampImagePreviewRequest) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{11}
}

func (x *StampImagePreviewRequest) GetStampImageConfig() *StampImageConfig {
	if x != nil {
		return x.StampImageConfig
	}
	return nil
}

func (x *StampImagePreviewRequest) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type StampImagePreview struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Preview       string                 `protobuf:"bytes,1,opt,name=preview,proto3" json:"preview,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StampImagePreview) Reset() {
	*x = StampImagePreview{}
	mi := &file_io_image_image_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StampImagePreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StampImagePreview) ProtoMessage() {}

func (x *StampImagePreview) ProtoReflect() protoreflect.Message {
	mi := &file_io_image_image_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StampImagePreview.ProtoReflect.Descriptor instead.
func (*StampImagePreview) Descriptor() ([]byte, []int) {
	return file_io_image_image_proto_rawDescGZIP(), []int{12}
}

func (x *StampImagePreview) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

var File_io_image_image_proto protoreflect.FileDescriptor

var file_io_image_image_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x69, 0x6f, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x69, 0x6f, 0x1a, 0x1c, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x06, 0x0a, 0x08, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x65, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x72, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x72, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x72, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x75, 0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x09, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x20, 0x49, 0x64, 0x73, 0x32, 0x19, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x20, 0x62, 0x79,
	0x20, 0x69, 0x64, 0xd2, 0x01, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xa5, 0x11, 0x0a, 0x09, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65,
	0x72, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x72, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x72, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x69, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x64, 0x65,
	0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x64, 0x65,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x12, 0x39, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x63, 0x6f,
	0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x39, 0x0a, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x45, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70, 0x12, 0x3b, 0x0a,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x70, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x70, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12,
	0x45, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46,
	0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x4f, 0x0a,
	0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41,
	0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f,
	0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x41, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x57, 0x69, 0x64, 0x65,
	0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x57, 0x69, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x4b, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x3f, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x45, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x41, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x3a, 0x56, 0x92, 0x41, 0x53, 0x0a,
	0x51, 0x2a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x44, 0x61, 0x74, 0x61, 0x32, 0x43, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x65, 0x69, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x61, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x61, 0x73,
	0x65, 0x20, 0x36, 0x34, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x22, 0xad, 0x02, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x31, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x3b, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9d, 0x01,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6f, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x3a, 0x48, 0x92, 0x41, 0x45, 0x0a, 0x43, 0x2a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x32, 0x1a,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xd2, 0x01, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x01,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b,
	0x2a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x32, 0x30, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x73, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x2e, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x0b, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0xad, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x62, 0x92, 0x41,
	0x5f, 0x0a, 0x5d, 0x2a, 0x15, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x20, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x32, 0x30, 0x54, 0x68, 0x69, 0x73,
	0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x20,
	0x73, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x2e, 0xd2, 0x01, 0x02, 0x69,
	0x64, 0xd2, 0x01, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xd2, 0x07, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x75,
	0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x3a, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x74, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2a, 0xfa, 0x02, 0x0a, 0x08, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x65,
	0x72, 0x6f, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x70, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x74, 0x72, 0x69, 0x70, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x07, 0x12, 0x0a,
	0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x10, 0x0d, 0x12, 0x0b, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x75, 0x6e, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x77,
	0x69, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07,
	0x61, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x10, 0x18, 0x12, 0x0c, 0x0a, 0x08, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x4d, 0x61, 0x70, 0x10, 0x19, 0x42, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x24, 0x73, 0x74, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69,
	0x6f, 0xaa, 0x02, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_image_image_proto_rawDescOnce sync.Once
	file_io_image_image_proto_rawDescData []byte
)

func file_io_image_image_proto_rawDescGZIP() []byte {
	file_io_image_image_proto_rawDescOnce.Do(func() {
		file_io_image_image_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_image_image_proto_rawDesc), len(file_io_image_image_proto_rawDesc)))
	})
	return file_io_image_image_proto_rawDescData
}

var file_io_image_image_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_io_image_image_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_io_image_image_proto_goTypes = []any{
	(ImageUse)(0),                    // 0: io.ImageUse
	(*ImageIds)(nil),                 // 1: io.ImageIds
	(*ImageData)(nil),                // 2: io.ImageData
	(*ImageRecord)(nil),              // 3: io.ImageRecord
	(*ProfileImageInput)(nil),        // 4: io.ProfileImageInput
	(*MultipleImages)(nil),           // 5: io.MultipleImages
	(*StampImageRequest)(nil),        // 6: io.StampImageRequest
	(*CreateImageInput)(nil),         // 7: io.CreateImageInput
	(*UpdateImageInput)(nil),         // 8: io.UpdateImageInput
	(*ImageBundle)(nil),              // 9: io.ImageBundle
	(*LocalizedImageInput)(nil),      // 10: io.LocalizedImageInput
	(*StampImageConfig)(nil),         // 11: io.StampImageConfig
	(*StampImagePreviewRequest)(nil), // 12: io.StampImagePreviewRequest
	(*StampImagePreview)(nil),        // 13: io.StampImagePreview
	(*LocalizedString)(nil),          // 14: io.LocalizedString
	(LanguageCode)(0),                // 15: io.LanguageCode
	(*timestamppb.Timestamp)(nil),    // 16: google.protobuf.Timestamp
}
var file_io_image_image_proto_depIdxs = []int32{
	11, // 0: io.ImageData.stampConfig:type_name -> io.StampImageConfig
	14, // 1: io.ImageData.localizedIcon:type_name -> io.LocalizedString
	14, // 2: io.ImageData.localizedLogo:type_name -> io.LocalizedString
	14, // 3: io.ImageData.localizedAppleLogo:type_name -> io.LocalizedString
	14, // 4: io.ImageData.localizedHero:type_name -> io.LocalizedString
	14, // 5: io.ImageData.localizedEventStrip:type_name -> io.LocalizedString
	14, // 6: io.ImageData.localizedStrip:type_name -> io.LocalizedString
	14, // 7: io.ImageData.localizedThumbnail:type_name -> io.LocalizedString
	14, // 8: io.ImageData.localizedBackground:type_name -> io.LocalizedString
	14, // 9: io.ImageData.localizedFooter:type_name -> io.LocalizedString
	14, // 10: io.ImageData.localizedSecurity:type_name -> io.LocalizedString
	14, // 11: io.ImageData.localizedPrivilege:type_name -> io.LocalizedString
	14, // 12: io.ImageData.localizedAirlineAlliance:type_name -> io.LocalizedString
	14, // 13: io.ImageData.localizedPersonalization:type_name -> io.LocalizedString
	14, // 14: io.ImageData.localizedBanner:type_name -> io.LocalizedString
	14, // 15: io.ImageData.localizedMessage:type_name -> io.LocalizedString
	14, // 16: io.ImageData.localizedWideLogo:type_name -> io.LocalizedString
	14, // 17: io.ImageData.localizedSecondaryLogo:type_name -> io.LocalizedString
	14, // 18: io.ImageData.localizedArtwork:type_name -> io.LocalizedString
	14, // 19: io.ImageData.localizedPosterLogo:type_name -> io.LocalizedString
	14, // 20: io.ImageData.localizedVenueMap:type_name -> io.LocalizedString
	0,  // 21: io.ImageRecord.use:type_name -> io.ImageUse
	15, // 22: io.ImageRecord.languages:type_name -> io.LanguageCode
	16, // 23: io.ImageRecord.createdAt:type_name -> google.protobuf.Timestamp
	16, // 24: io.ImageRecord.updatedAt:type_name -> google.protobuf.Timestamp
	3,  // 25: io.MultipleImages.images:type_name -> io.ImageRecord
	2,  // 26: io.CreateImageInput.imageData:type_name -> io.ImageData
	14, // 27: io.UpdateImageInput.localizedImageData:type_name -> io.LocalizedString
	11, // 28: io.StampImagePreviewRequest.stampImageConfig:type_name -> io.StampImageConfig
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_io_image_image_proto_init() }
func file_io_image_image_proto_init() {
	if File_io_image_image_proto != nil {
		return
	}
	file_io_common_localization_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_image_image_proto_rawDesc), len(file_io_image_image_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_image_image_proto_goTypes,
		DependencyIndexes: file_io_image_image_proto_depIdxs,
		EnumInfos:         file_io_image_image_proto_enumTypes,
		MessageInfos:      file_io_image_image_proto_msgTypes,
	}.Build()
	File_io_image_image_proto = out.File
	file_io_image_image_proto_goTypes = nil
	file_io_image_image_proto_depIdxs = nil
}
