//*
// Pass Overrides
//
// Pass overrides over write the fields in the class. E.g. GPS locations can be stored in 2 levels: class level and object level. If you store in class level, GPS locations are effective to all pass holders belong to the class. If you store in object level (or pass level), GPS locations are effective only to particular pass holder.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/common/pass.proto

package io

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PassOverrides contains optional pass-object level details. Overrides any template level values.
type PassOverrides struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Image ID's of images to override for this pass.
	ImageIds *ImageIds `protobuf:"bytes,1,opt,name=imageIds,proto3" json:"imageIds,omitempty"`
	// A list of up to 10 GPS locations where this pass should be presented on the lock-screen.
	Locations []*GPSLocation `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
	// A list of up to 10 Beacon UUIDs that should trigger the pass to be presented on the lock-screen.
	Beacons []*Beacon `protobuf:"bytes,4,rep,name=beacons,proto3" json:"beacons,omitempty"`
	// A list of (personalized) links to be shown on the pass.
	Links []*Link `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty"`
	// Stores custom pass colors.
	Colors *Colors `protobuf:"bytes,6,opt,name=colors,proto3" json:"colors,omitempty"`
	// Deprecated - user appStoreIdentifiers.  A list of iTunes Store item identifiers for the associated apps. Only one item in the list is used — the first item identifier for an app compatible with the user's App Store account and device (hardware/iOS version). If the app is not installed, the link opens the App Store and shows the app. If the app is already installed, the link launches the app.
	AssociatedStoreIdentifiers []uint32 `protobuf:"varint,7,rep,packed,name=associatedStoreIdentifiers,proto3" json:"associatedStoreIdentifiers,omitempty"`
	// A list of iTunes Store item identifiers for the associated apps. Only one item in the list is used — the first item identifier for an app compatible with the user's App Store account and device (hardware/iOS version). If the app is not installed, the link opens the App Store and shows the app. If the app is already installed, the link launches the app.
	AppStoreIdentifiers []uint64 `protobuf:"varint,8,rep,packed,name=appStoreIdentifiers,proto3" json:"appStoreIdentifiers,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PassOverrides) Reset() {
	*x = PassOverrides{}
	mi := &file_io_common_pass_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassOverrides) ProtoMessage() {}

func (x *PassOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_pass_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassOverrides.ProtoReflect.Descriptor instead.
func (*PassOverrides) Descriptor() ([]byte, []int) {
	return file_io_common_pass_proto_rawDescGZIP(), []int{0}
}

func (x *PassOverrides) GetImageIds() *ImageIds {
	if x != nil {
		return x.ImageIds
	}
	return nil
}

func (x *PassOverrides) GetLocations() []*GPSLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *PassOverrides) GetBeacons() []*Beacon {
	if x != nil {
		return x.Beacons
	}
	return nil
}

func (x *PassOverrides) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *PassOverrides) GetColors() *Colors {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *PassOverrides) GetAssociatedStoreIdentifiers() []uint32 {
	if x != nil {
		return x.AssociatedStoreIdentifiers
	}
	return nil
}

func (x *PassOverrides) GetAppStoreIdentifiers() []uint64 {
	if x != nil {
		return x.AppStoreIdentifiers
	}
	return nil
}

type PassOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Apple         *AppleWalletSettings   `protobuf:"bytes,1,opt,name=apple,proto3" json:"apple,omitempty"`
	Google        *GooglePaySettings     `protobuf:"bytes,2,opt,name=google,proto3" json:"google,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PassOptions) Reset() {
	*x = PassOptions{}
	mi := &file_io_common_pass_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassOptions) ProtoMessage() {}

func (x *PassOptions) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_pass_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassOptions.ProtoReflect.Descriptor instead.
func (*PassOptions) Descriptor() ([]byte, []int) {
	return file_io_common_pass_proto_rawDescGZIP(), []int{1}
}

func (x *PassOptions) GetApple() *AppleWalletSettings {
	if x != nil {
		return x.Apple
	}
	return nil
}

func (x *PassOptions) GetGoogle() *GooglePaySettings {
	if x != nil {
		return x.Google
	}
	return nil
}

// Details of pass and pass holder.
type Pass struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The uuid of the pass.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The class id of the pass which it belongs to.
	ClassId string `protobuf:"bytes,2,opt,name=classId,proto3" json:"classId,omitempty"`
	// Protocol module which this pass was issued by.
	Protocol PassProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty"`
	// PII data of pass holder.
	PersonDetails *Person `protobuf:"bytes,4,opt,name=personDetails,proto3" json:"personDetails,omitempty"`
	// Pass meta data such as install ip, user agent and other lifecycle data.
	Metadata *Metadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Holds protocol specific data (e.g. tier points for Membership protocol, flight number for flight protocol)
	RecordData map[string]string `protobuf:"bytes,6,rep,name=recordData,proto3" json:"recordData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Will hold the external id of the object (as set by protocol)
	ExternalId    string `protobuf:"bytes,7,opt,name=externalId,proto3" json:"externalId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pass) Reset() {
	*x = Pass{}
	mi := &file_io_common_pass_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pass) ProtoMessage() {}

func (x *Pass) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_pass_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pass.ProtoReflect.Descriptor instead.
func (*Pass) Descriptor() ([]byte, []int) {
	return file_io_common_pass_proto_rawDescGZIP(), []int{2}
}

func (x *Pass) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pass) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *Pass) GetProtocol() PassProtocol {
	if x != nil {
		return x.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

func (x *Pass) GetPersonDetails() *Person {
	if x != nil {
		return x.PersonDetails
	}
	return nil
}

func (x *Pass) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Pass) GetRecordData() map[string]string {
	if x != nil {
		return x.RecordData
	}
	return nil
}

func (x *Pass) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

var File_io_common_pass_proto protoreflect.FileDescriptor

var file_io_common_pass_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x69, 0x6f, 0x1a, 0x14, 0x69, 0x6f, 0x2f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x02, 0x0a, 0x0d, 0x50,
	0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x69, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x47,
	0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x92, 0x41, 0x03, 0xa0,
	0x01, 0x0a, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a,
	0x07, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x69, 0x6f, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x06, 0x92, 0x41, 0x03, 0xa0,
	0x01, 0x0a, 0x52, 0x07, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x06, 0x92, 0x41, 0x03, 0xa0, 0x01, 0x0a, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1a, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x13, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22,
	0x6b, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x69, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x69, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22, 0xd3, 0x02, 0x0a,
	0x04, 0x50, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x30, 0x0a,
	0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x28, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x24, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61,
	0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0xaa, 0x02, 0x0c, 0x50,
	0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_io_common_pass_proto_rawDescOnce sync.Once
	file_io_common_pass_proto_rawDescData []byte
)

func file_io_common_pass_proto_rawDescGZIP() []byte {
	file_io_common_pass_proto_rawDescOnce.Do(func() {
		file_io_common_pass_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_common_pass_proto_rawDesc), len(file_io_common_pass_proto_rawDesc)))
	})
	return file_io_common_pass_proto_rawDescData
}

var file_io_common_pass_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_io_common_pass_proto_goTypes = []any{
	(*PassOverrides)(nil),       // 0: io.PassOverrides
	(*PassOptions)(nil),         // 1: io.PassOptions
	(*Pass)(nil),                // 2: io.Pass
	nil,                         // 3: io.Pass.RecordDataEntry
	(*ImageIds)(nil),            // 4: io.ImageIds
	(*GPSLocation)(nil),         // 5: io.GPSLocation
	(*Beacon)(nil),              // 6: io.Beacon
	(*Link)(nil),                // 7: io.Link
	(*Colors)(nil),              // 8: io.Colors
	(*AppleWalletSettings)(nil), // 9: io.AppleWalletSettings
	(*GooglePaySettings)(nil),   // 10: io.GooglePaySettings
	(PassProtocol)(0),           // 11: io.PassProtocol
	(*Person)(nil),              // 12: io.Person
	(*Metadata)(nil),            // 13: io.Metadata
}
var file_io_common_pass_proto_depIdxs = []int32{
	4,  // 0: io.PassOverrides.imageIds:type_name -> io.ImageIds
	5,  // 1: io.PassOverrides.locations:type_name -> io.GPSLocation
	6,  // 2: io.PassOverrides.beacons:type_name -> io.Beacon
	7,  // 3: io.PassOverrides.links:type_name -> io.Link
	8,  // 4: io.PassOverrides.colors:type_name -> io.Colors
	9,  // 5: io.PassOptions.apple:type_name -> io.AppleWalletSettings
	10, // 6: io.PassOptions.google:type_name -> io.GooglePaySettings
	11, // 7: io.Pass.protocol:type_name -> io.PassProtocol
	12, // 8: io.Pass.personDetails:type_name -> io.Person
	13, // 9: io.Pass.metadata:type_name -> io.Metadata
	3,  // 10: io.Pass.recordData:type_name -> io.Pass.RecordDataEntry
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_io_common_pass_proto_init() }
func file_io_common_pass_proto_init() {
	if File_io_common_pass_proto != nil {
		return
	}
	file_io_image_image_proto_init()
	file_io_common_links_proto_init()
	file_io_common_metrics_proto_init()
	file_io_common_personal_proto_init()
	file_io_common_protocols_proto_init()
	file_io_common_proximity_proto_init()
	file_io_common_template_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_common_pass_proto_rawDesc), len(file_io_common_pass_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_common_pass_proto_goTypes,
		DependencyIndexes: file_io_common_pass_proto_depIdxs,
		MessageInfos:      file_io_common_pass_proto_msgTypes,
	}.Build()
	File_io_common_pass_proto = out.File
	file_io_common_pass_proto_goTypes = nil
	file_io_common_pass_proto_depIdxs = nil
}
