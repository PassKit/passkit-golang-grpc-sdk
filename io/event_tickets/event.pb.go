//*
//Event is an instance of a Production and contains details to the particular showing: start & end times and venue,

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/event_tickets/event.proto

package event_tickets

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated event id (22 characters). No writable.
	// @tag: validateGeneric:"required" validateCreate:"isdefault" validateUpdate:"omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required" validateCreate:"isdefault" validateUpdate:"omitempty"`
	// The production that the event belongs to. In case of a create, only the production id needs to be provided.
	// @tag: validateGeneric:"-" validateCreate:"required" validateUpdate:"-"
	Production *Production `protobuf:"bytes,2,opt,name=production,proto3" json:"production,omitempty" validateGeneric:"-" validateCreate:"required" validateUpdate:"-"`
	// The venue details. In case of a create, venue.id or venue.uid needs to be provided. If the venue does not exist it will be created.
	// @tag: validateGeneric:"-" validateCreate:"required" validateUpdate:"-"
	Venue *Venue `protobuf:"bytes,3,opt,name=venue,proto3" json:"venue,omitempty" validateGeneric:"-" validateCreate:"required" validateUpdate:"-"`
	// The date/time when the doors open at the venue.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	DoorsOpen *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=doorsOpen,proto3" json:"doorsOpen,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The scheduled date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. Tickets can only be issued for events that are within 90 days of the ticket issue date.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	ScheduledStartDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=scheduledStartDate,proto3" json:"scheduledStartDate,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// The new date/time when the event starts. This field can be used when you need to set a new event start data/time.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	ActualStartDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=actualStartDate,proto3" json:"actualStartDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	EndDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=endDate,proto3" json:"endDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional relevant date for when the event starts. Used by Apple Wallet to trigger a lock-screen notification that there is an event coming up. Google Pay will always notify the user 3 hours before the event start date that they have an upcoming event.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	RelevantDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=relevantDate,proto3" json:"relevantDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The quota for the event. If set to 0, then it is unlimited. If the quota is reached no new tickets can be issued.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Quota *io.Quota `protobuf:"bytes,9,opt,name=quota,proto3" json:"quota,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Performance analytics for the event. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Metrics *io.Metrics `protobuf:"bytes,10,opt,name=metrics,proto3" json:"metrics,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// Event hours are for multi-day events for Apple poster style tickets. Each time period can be a maximum of 24 hours.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	RelevantDates []*EventHours `protobuf:"bytes,13,rep,name=relevantDates,proto3" json:"relevantDates,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Semantic Tags are used mainly by Apple poster event tickets to create a rich event guide on the back side of the pass.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	SemanticTags *io.EventSemanticTags `protobuf:"bytes,14,opt,name=semanticTags,proto3" json:"semanticTags,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date the event was created. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created,proto3" json:"created,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The date the event updated. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Updated       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated,proto3" json:"updated,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_io_event_tickets_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetProduction() *Production {
	if x != nil {
		return x.Production
	}
	return nil
}

func (x *Event) GetVenue() *Venue {
	if x != nil {
		return x.Venue
	}
	return nil
}

func (x *Event) GetDoorsOpen() *timestamppb.Timestamp {
	if x != nil {
		return x.DoorsOpen
	}
	return nil
}

func (x *Event) GetScheduledStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartDate
	}
	return nil
}

func (x *Event) GetActualStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualStartDate
	}
	return nil
}

func (x *Event) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Event) GetRelevantDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RelevantDate
	}
	return nil
}

func (x *Event) GetQuota() *io.Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *Event) GetMetrics() *io.Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Event) GetRelevantDates() []*EventHours {
	if x != nil {
		return x.RelevantDates
	}
	return nil
}

func (x *Event) GetSemanticTags() *io.EventSemanticTags {
	if x != nil {
		return x.SemanticTags
	}
	return nil
}

func (x *Event) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Event) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type EventHours struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventHours) Reset() {
	*x = EventHours{}
	mi := &file_io_event_tickets_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventHours) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventHours) ProtoMessage() {}

func (x *EventHours) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventHours.ProtoReflect.Descriptor instead.
func (*EventHours) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_event_proto_rawDescGZIP(), []int{1}
}

func (x *EventHours) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *EventHours) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type EventListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required"
	//
	// Types that are valid to be assigned to Production:
	//
	//	*EventListRequest_ProductionId
	//	*EventListRequest_ProductionUid
	Production isEventListRequest_Production `protobuf_oneof:"production" validateGeneric:"required"`
	// @tag: validateGeneric:"omitempty"
	VenueId string `protobuf:"bytes,3,opt,name=venueId,proto3" json:"venueId,omitempty" validateGeneric:"omitempty"`
	// @tag: validateGeneric:"omitempty"
	Filters       *io.Filters `protobuf:"bytes,4,opt,name=filters,proto3" json:"filters,omitempty" validateGeneric:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventListRequest) Reset() {
	*x = EventListRequest{}
	mi := &file_io_event_tickets_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventListRequest) ProtoMessage() {}

func (x *EventListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventListRequest.ProtoReflect.Descriptor instead.
func (*EventListRequest) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_event_proto_rawDescGZIP(), []int{2}
}

func (x *EventListRequest) GetProduction() isEventListRequest_Production {
	if x != nil {
		return x.Production
	}
	return nil
}

func (x *EventListRequest) GetProductionId() string {
	if x != nil {
		if x, ok := x.Production.(*EventListRequest_ProductionId); ok {
			return x.ProductionId
		}
	}
	return ""
}

func (x *EventListRequest) GetProductionUid() string {
	if x != nil {
		if x, ok := x.Production.(*EventListRequest_ProductionUid); ok {
			return x.ProductionUid
		}
	}
	return ""
}

func (x *EventListRequest) GetVenueId() string {
	if x != nil {
		return x.VenueId
	}
	return ""
}

func (x *EventListRequest) GetFilters() *io.Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type isEventListRequest_Production interface {
	isEventListRequest_Production()
}

type EventListRequest_ProductionId struct {
	// Production ID. Required if productionUid is not provided.
	// @tag: validateGeneric:"required_without=ProductionUid"
	ProductionId string `protobuf:"bytes,1,opt,name=productionId,proto3,oneof" validateGeneric:"required_without=ProductionUid"`
}

type EventListRequest_ProductionUid struct {
	// Production UID. Required if productionId is not provided.
	// @tag: validateGeneric:"required_without=ProductionId"
	ProductionUid string `protobuf:"bytes,2,opt,name=productionUid,proto3,oneof" validateGeneric:"required_without=ProductionId"`
}

func (*EventListRequest_ProductionId) isEventListRequest_Production() {}

func (*EventListRequest_ProductionUid) isEventListRequest_Production() {}

type GetEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required"
	//
	// Types that are valid to be assigned to Production:
	//
	//	*GetEventRequest_ProductionId
	//	*GetEventRequest_ProductionUid
	Production isGetEventRequest_Production `protobuf_oneof:"production" validateGeneric:"required"`
	// @tag: validateGeneric:"required"
	//
	// Types that are valid to be assigned to Venue:
	//
	//	*GetEventRequest_VenueId
	//	*GetEventRequest_VenueUid
	Venue isGetEventRequest_Venue `protobuf_oneof:"venue" validateGeneric:"required"`
	// Event scheduled start date.
	// @tag: validateGeneric:"required"
	ScheduledStartDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=scheduledStartDate,proto3" json:"scheduledStartDate,omitempty" validateGeneric:"required"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetEventRequest) Reset() {
	*x = GetEventRequest{}
	mi := &file_io_event_tickets_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventRequest) ProtoMessage() {}

func (x *GetEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventRequest.ProtoReflect.Descriptor instead.
func (*GetEventRequest) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_event_proto_rawDescGZIP(), []int{3}
}

func (x *GetEventRequest) GetProduction() isGetEventRequest_Production {
	if x != nil {
		return x.Production
	}
	return nil
}

func (x *GetEventRequest) GetProductionId() string {
	if x != nil {
		if x, ok := x.Production.(*GetEventRequest_ProductionId); ok {
			return x.ProductionId
		}
	}
	return ""
}

func (x *GetEventRequest) GetProductionUid() string {
	if x != nil {
		if x, ok := x.Production.(*GetEventRequest_ProductionUid); ok {
			return x.ProductionUid
		}
	}
	return ""
}

func (x *GetEventRequest) GetVenue() isGetEventRequest_Venue {
	if x != nil {
		return x.Venue
	}
	return nil
}

func (x *GetEventRequest) GetVenueId() string {
	if x != nil {
		if x, ok := x.Venue.(*GetEventRequest_VenueId); ok {
			return x.VenueId
		}
	}
	return ""
}

func (x *GetEventRequest) GetVenueUid() string {
	if x != nil {
		if x, ok := x.Venue.(*GetEventRequest_VenueUid); ok {
			return x.VenueUid
		}
	}
	return ""
}

func (x *GetEventRequest) GetScheduledStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartDate
	}
	return nil
}

type isGetEventRequest_Production interface {
	isGetEventRequest_Production()
}

type GetEventRequest_ProductionId struct {
	// Production ID. Required if productionUid is not provided.
	// @tag: validateGeneric:"required_without=ProductionUid"
	ProductionId string `protobuf:"bytes,1,opt,name=productionId,proto3,oneof" validateGeneric:"required_without=ProductionUid"`
}

type GetEventRequest_ProductionUid struct {
	// Production UID. Required if productionId is not provided.
	// @tag: validateGeneric:"required_without=ProductionId"
	ProductionUid string `protobuf:"bytes,2,opt,name=productionUid,proto3,oneof" validateGeneric:"required_without=ProductionId"`
}

func (*GetEventRequest_ProductionId) isGetEventRequest_Production() {}

func (*GetEventRequest_ProductionUid) isGetEventRequest_Production() {}

type isGetEventRequest_Venue interface {
	isGetEventRequest_Venue()
}

type GetEventRequest_VenueId struct {
	// Venue ID. Required if venueUid is not provided.
	// @tag: validateGeneric:"required_without=VenueUid"
	VenueId string `protobuf:"bytes,3,opt,name=venueId,proto3,oneof" validateGeneric:"required_without=VenueUid"`
}

type GetEventRequest_VenueUid struct {
	// Venue UID. Required if venueId is not provided.
	// @tag: validateGeneric:"required_without=VenueId"
	VenueUid string `protobuf:"bytes,4,opt,name=venueUid,proto3,oneof" validateGeneric:"required_without=VenueId"`
}

func (*GetEventRequest_VenueId) isGetEventRequest_Venue() {}

func (*GetEventRequest_VenueUid) isGetEventRequest_Venue() {}

type EventLimitedFieldsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated event id (22 characters).
	// @tag: validateGeneric:"omitempty" validateCreate:"isdefault" validateUpdate:"omitempty"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"omitempty" validateCreate:"isdefault" validateUpdate:"omitempty"`
	// The scheduled date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. Tickets can only be issued for events that are within 90 days of the ticket issue date.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"isdefault"
	ScheduledStartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=scheduledStartDate,proto3" json:"scheduledStartDate,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"isdefault"`
	// The new date/time when the event starts. This field can be used when you need to set a new event start data/time.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	ActualStartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=actualStartDate,proto3" json:"actualStartDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	EndDate       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endDate,proto3" json:"endDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventLimitedFieldsResponse) Reset() {
	*x = EventLimitedFieldsResponse{}
	mi := &file_io_event_tickets_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventLimitedFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLimitedFieldsResponse) ProtoMessage() {}

func (x *EventLimitedFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLimitedFieldsResponse.ProtoReflect.Descriptor instead.
func (*EventLimitedFieldsResponse) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_event_proto_rawDescGZIP(), []int{4}
}

func (x *EventLimitedFieldsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventLimitedFieldsResponse) GetScheduledStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartDate
	}
	return nil
}

func (x *EventLimitedFieldsResponse) GetActualStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualStartDate
	}
	return nil
}

func (x *EventLimitedFieldsResponse) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type EventLimitedFieldsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated production id (22 characters).
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"
	ProductionId string `protobuf:"bytes,1,opt,name=productionId,proto3" json:"productionId,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"`
	// PassKit generated venue id (22 characters).
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"
	VenueId string `protobuf:"bytes,2,opt,name=venueId,proto3" json:"venueId,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"`
	// The date/time when the doors open at the venue.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	DoorsOpen *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=doorsOpen,proto3" json:"doorsOpen,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The scheduled date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. Tickets can only be issued for events that are within 90 days of the ticket issue date.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"isdefault"
	ScheduledStartDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=scheduledStartDate,proto3" json:"scheduledStartDate,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"isdefault"`
	// The new date/time when the event starts. This field can be used when you need to set a new event start data/time.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	ActualStartDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=actualStartDate,proto3" json:"actualStartDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	EndDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=endDate,proto3" json:"endDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional relevant date for when the event starts. Used by Apple Wallet to trigger a lock-screen notification that there is an event coming up. Google Pay will always notify the user 3 hours before the event start date that they have an upcoming event.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	RelevantDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=relevantDate,proto3" json:"relevantDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The quota for the event. If set to 0, then it is unlimited. If the quota is reached no new tickets can be issued.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Quota *io.Quota `protobuf:"bytes,8,opt,name=quota,proto3" json:"quota,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Performance analytics for the event. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Metrics *io.Metrics `protobuf:"bytes,9,opt,name=metrics,proto3" json:"metrics,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// Event hours are for multi-day events for Apple poster style tickets. Each time period can be a maximum of 24 hours.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	RelevantDates []*EventHours `protobuf:"bytes,12,rep,name=relevantDates,proto3" json:"relevantDates,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Semantic Tags are used mainly by Apple poster event tickets to create a rich event guide on the back side of the pass.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	SemanticTags *io.EventSemanticTags `protobuf:"bytes,13,opt,name=semanticTags,proto3" json:"semanticTags,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date the event was created. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The date the event updated. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Updated       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated,proto3" json:"updated,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventLimitedFieldsRequest) Reset() {
	*x = EventLimitedFieldsRequest{}
	mi := &file_io_event_tickets_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventLimitedFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLimitedFieldsRequest) ProtoMessage() {}

func (x *EventLimitedFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLimitedFieldsRequest.ProtoReflect.Descriptor instead.
func (*EventLimitedFieldsRequest) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_event_proto_rawDescGZIP(), []int{5}
}

func (x *EventLimitedFieldsRequest) GetProductionId() string {
	if x != nil {
		return x.ProductionId
	}
	return ""
}

func (x *EventLimitedFieldsRequest) GetVenueId() string {
	if x != nil {
		return x.VenueId
	}
	return ""
}

func (x *EventLimitedFieldsRequest) GetDoorsOpen() *timestamppb.Timestamp {
	if x != nil {
		return x.DoorsOpen
	}
	return nil
}

func (x *EventLimitedFieldsRequest) GetScheduledStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartDate
	}
	return nil
}

func (x *EventLimitedFieldsRequest) GetActualStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualStartDate
	}
	return nil
}

func (x *EventLimitedFieldsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *EventLimitedFieldsRequest) GetRelevantDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RelevantDate
	}
	return nil
}

func (x *EventLimitedFieldsRequest) GetQuota() *io.Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *EventLimitedFieldsRequest) GetMetrics() *io.Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *EventLimitedFieldsRequest) GetRelevantDates() []*EventHours {
	if x != nil {
		return x.RelevantDates
	}
	return nil
}

func (x *EventLimitedFieldsRequest) GetSemanticTags() *io.EventSemanticTags {
	if x != nil {
		return x.SemanticTags
	}
	return nil
}

func (x *EventLimitedFieldsRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *EventLimitedFieldsRequest) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type EventListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated event id (22 characters).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The production that the event belongs to. In case of a create, only the production id needs to be provided.
	Production *ProductionLimitedFieldsResponse `protobuf:"bytes,2,opt,name=production,proto3" json:"production,omitempty"`
	// The venue information. In case of a create, venue.id or venue.uid needs to be provided. If the venue does not exist it will be created.
	Venue *VenueLimitedFieldsResponse `protobuf:"bytes,3,opt,name=venue,proto3" json:"venue,omitempty"`
	// The date/time when the doors open at the venue.
	DoorsOpen *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=doorsOpen,proto3" json:"doorsOpen,omitempty"`
	// The scheduled date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. Tickets can only be issued for events that are within 90 days of the ticket issue date.
	ScheduledStartDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=scheduledStartDate,proto3" json:"scheduledStartDate,omitempty"`
	// The new date/time when the event starts. This field can be used when you need to set a new event start data/time.
	ActualStartDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=actualStartDate,proto3" json:"actualStartDate,omitempty"`
	// The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day.
	EndDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=endDate,proto3" json:"endDate,omitempty"`
	// Optional relevant date for when the event starts. Used by Apple Wallet to trigger a lock-screen notification that there is an event coming up. Google Pay will always notify the user 3 hours before the event start date that they have an upcoming event.
	RelevantDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=relevantDate,proto3" json:"relevantDate,omitempty"`
	// The quota for the event. If set to 0, then it is unlimited. If the quota is reached no new tickets can be issued.
	Quota *io.Quota `protobuf:"bytes,9,opt,name=quota,proto3" json:"quota,omitempty"`
	// Performance analytics for the event. Not writable.
	Metrics *io.Metrics `protobuf:"bytes,10,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// The date the event was created. Not writable.
	Created *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created,proto3" json:"created,omitempty"`
	// The date the event updated. Not writable.
	Updated       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated,proto3" json:"updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventListResponse) Reset() {
	*x = EventListResponse{}
	mi := &file_io_event_tickets_event_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventListResponse) ProtoMessage() {}

func (x *EventListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_event_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventListResponse.ProtoReflect.Descriptor instead.
func (*EventListResponse) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_event_proto_rawDescGZIP(), []int{6}
}

func (x *EventListResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventListResponse) GetProduction() *ProductionLimitedFieldsResponse {
	if x != nil {
		return x.Production
	}
	return nil
}

func (x *EventListResponse) GetVenue() *VenueLimitedFieldsResponse {
	if x != nil {
		return x.Venue
	}
	return nil
}

func (x *EventListResponse) GetDoorsOpen() *timestamppb.Timestamp {
	if x != nil {
		return x.DoorsOpen
	}
	return nil
}

func (x *EventListResponse) GetScheduledStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartDate
	}
	return nil
}

func (x *EventListResponse) GetActualStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ActualStartDate
	}
	return nil
}

func (x *EventListResponse) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *EventListResponse) GetRelevantDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RelevantDate
	}
	return nil
}

func (x *EventListResponse) GetQuota() *io.Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *EventListResponse) GetMetrics() *io.Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *EventListResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *EventListResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

var File_io_event_tickets_event_proto protoreflect.FileDescriptor

var file_io_event_tickets_event_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x69, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x69, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x69, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x07, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x4a, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x76,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x76,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x6f, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x69, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x05, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x05, 0x92, 0x41,
	0x02, 0x40, 0x01, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0xa7, 0x01, 0x92,
	0x41, 0xa3, 0x01, 0x0a, 0xa0, 0x01, 0x2a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x76, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x3b, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x3b, 0x20, 0x69, 0x74, 0x20, 0x68, 0x6f, 0x6c,
	0x64, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x20, 0x26, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0xd2, 0x01, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0xd2, 0x01, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0xd2, 0x01, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x7c, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x4e, 0x92, 0x41, 0x4b, 0x0a, 0x49, 0x2a,
	0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x26, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xd2, 0x01, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x55, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x5c,
	0x92, 0x41, 0x59, 0x0a, 0x57, 0x2a, 0x11, 0x47, 0x65, 0x74, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0xd2, 0x01, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0xd2, 0x01, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x22, 0x89, 0x03, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44,
	0x0a, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x92, 0x01, 0x92, 0x41, 0x8e,
	0x01, 0x0a, 0x8b, 0x01, 0x2a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x28, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x20, 0x76, 0x65, 0x72, 0x29, 0x32, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x20, 0x61,
	0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x3b, 0x20, 0x69, 0x74, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x26, 0x20, 0x65,
	0x6e, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x22,
	0x8e, 0x07, 0x0a, 0x19, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x6f, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x6f, 0x6f, 0x72,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69,
	0x6f, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0xc0, 0x01,
	0x92, 0x41, 0xbc, 0x01, 0x0a, 0xb9, 0x01, 0x2a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x28,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x76, 0x65, 0x72, 0x29, 0x32, 0x76, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x3b, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x68,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x3b, 0x20, 0x69, 0x74, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
	0x26, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0xd2, 0x01, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0xd2, 0x01, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x12, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x97, 0x06, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x6f, 0x6f, 0x72, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x6f, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x6b, 0x92,
	0x41, 0x68, 0x0a, 0x66, 0x2a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x4f, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x20, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x42, 0x6f, 0x0a, 0x1d, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5a, 0x32, 0x73, 0x74, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69,
	0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0xaa,
	0x02, 0x19, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_io_event_tickets_event_proto_rawDescOnce sync.Once
	file_io_event_tickets_event_proto_rawDescData []byte
)

func file_io_event_tickets_event_proto_rawDescGZIP() []byte {
	file_io_event_tickets_event_proto_rawDescOnce.Do(func() {
		file_io_event_tickets_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_event_tickets_event_proto_rawDesc), len(file_io_event_tickets_event_proto_rawDesc)))
	})
	return file_io_event_tickets_event_proto_rawDescData
}

var file_io_event_tickets_event_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_io_event_tickets_event_proto_goTypes = []any{
	(*Event)(nil),                           // 0: event_tickets.Event
	(*EventHours)(nil),                      // 1: event_tickets.EventHours
	(*EventListRequest)(nil),                // 2: event_tickets.EventListRequest
	(*GetEventRequest)(nil),                 // 3: event_tickets.GetEventRequest
	(*EventLimitedFieldsResponse)(nil),      // 4: event_tickets.EventLimitedFieldsResponse
	(*EventLimitedFieldsRequest)(nil),       // 5: event_tickets.EventLimitedFieldsRequest
	(*EventListResponse)(nil),               // 6: event_tickets.EventListResponse
	(*Production)(nil),                      // 7: event_tickets.Production
	(*Venue)(nil),                           // 8: event_tickets.Venue
	(*timestamppb.Timestamp)(nil),           // 9: google.protobuf.Timestamp
	(*io.Quota)(nil),                        // 10: io.Quota
	(*io.Metrics)(nil),                      // 11: io.Metrics
	(*io.EventSemanticTags)(nil),            // 12: io.EventSemanticTags
	(*io.Filters)(nil),                      // 13: io.Filters
	(*ProductionLimitedFieldsResponse)(nil), // 14: event_tickets.ProductionLimitedFieldsResponse
	(*VenueLimitedFieldsResponse)(nil),      // 15: event_tickets.VenueLimitedFieldsResponse
}
var file_io_event_tickets_event_proto_depIdxs = []int32{
	7,  // 0: event_tickets.Event.production:type_name -> event_tickets.Production
	8,  // 1: event_tickets.Event.venue:type_name -> event_tickets.Venue
	9,  // 2: event_tickets.Event.doorsOpen:type_name -> google.protobuf.Timestamp
	9,  // 3: event_tickets.Event.scheduledStartDate:type_name -> google.protobuf.Timestamp
	9,  // 4: event_tickets.Event.actualStartDate:type_name -> google.protobuf.Timestamp
	9,  // 5: event_tickets.Event.endDate:type_name -> google.protobuf.Timestamp
	9,  // 6: event_tickets.Event.relevantDate:type_name -> google.protobuf.Timestamp
	10, // 7: event_tickets.Event.quota:type_name -> io.Quota
	11, // 8: event_tickets.Event.metrics:type_name -> io.Metrics
	1,  // 9: event_tickets.Event.relevantDates:type_name -> event_tickets.EventHours
	12, // 10: event_tickets.Event.semanticTags:type_name -> io.EventSemanticTags
	9,  // 11: event_tickets.Event.created:type_name -> google.protobuf.Timestamp
	9,  // 12: event_tickets.Event.updated:type_name -> google.protobuf.Timestamp
	9,  // 13: event_tickets.EventHours.startTime:type_name -> google.protobuf.Timestamp
	9,  // 14: event_tickets.EventHours.endTime:type_name -> google.protobuf.Timestamp
	13, // 15: event_tickets.EventListRequest.filters:type_name -> io.Filters
	9,  // 16: event_tickets.GetEventRequest.scheduledStartDate:type_name -> google.protobuf.Timestamp
	9,  // 17: event_tickets.EventLimitedFieldsResponse.scheduledStartDate:type_name -> google.protobuf.Timestamp
	9,  // 18: event_tickets.EventLimitedFieldsResponse.actualStartDate:type_name -> google.protobuf.Timestamp
	9,  // 19: event_tickets.EventLimitedFieldsResponse.endDate:type_name -> google.protobuf.Timestamp
	9,  // 20: event_tickets.EventLimitedFieldsRequest.doorsOpen:type_name -> google.protobuf.Timestamp
	9,  // 21: event_tickets.EventLimitedFieldsRequest.scheduledStartDate:type_name -> google.protobuf.Timestamp
	9,  // 22: event_tickets.EventLimitedFieldsRequest.actualStartDate:type_name -> google.protobuf.Timestamp
	9,  // 23: event_tickets.EventLimitedFieldsRequest.endDate:type_name -> google.protobuf.Timestamp
	9,  // 24: event_tickets.EventLimitedFieldsRequest.relevantDate:type_name -> google.protobuf.Timestamp
	10, // 25: event_tickets.EventLimitedFieldsRequest.quota:type_name -> io.Quota
	11, // 26: event_tickets.EventLimitedFieldsRequest.metrics:type_name -> io.Metrics
	1,  // 27: event_tickets.EventLimitedFieldsRequest.relevantDates:type_name -> event_tickets.EventHours
	12, // 28: event_tickets.EventLimitedFieldsRequest.semanticTags:type_name -> io.EventSemanticTags
	9,  // 29: event_tickets.EventLimitedFieldsRequest.created:type_name -> google.protobuf.Timestamp
	9,  // 30: event_tickets.EventLimitedFieldsRequest.updated:type_name -> google.protobuf.Timestamp
	14, // 31: event_tickets.EventListResponse.production:type_name -> event_tickets.ProductionLimitedFieldsResponse
	15, // 32: event_tickets.EventListResponse.venue:type_name -> event_tickets.VenueLimitedFieldsResponse
	9,  // 33: event_tickets.EventListResponse.doorsOpen:type_name -> google.protobuf.Timestamp
	9,  // 34: event_tickets.EventListResponse.scheduledStartDate:type_name -> google.protobuf.Timestamp
	9,  // 35: event_tickets.EventListResponse.actualStartDate:type_name -> google.protobuf.Timestamp
	9,  // 36: event_tickets.EventListResponse.endDate:type_name -> google.protobuf.Timestamp
	9,  // 37: event_tickets.EventListResponse.relevantDate:type_name -> google.protobuf.Timestamp
	10, // 38: event_tickets.EventListResponse.quota:type_name -> io.Quota
	11, // 39: event_tickets.EventListResponse.metrics:type_name -> io.Metrics
	9,  // 40: event_tickets.EventListResponse.created:type_name -> google.protobuf.Timestamp
	9,  // 41: event_tickets.EventListResponse.updated:type_name -> google.protobuf.Timestamp
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_io_event_tickets_event_proto_init() }
func file_io_event_tickets_event_proto_init() {
	if File_io_event_tickets_event_proto != nil {
		return
	}
	file_io_event_tickets_production_proto_init()
	file_io_event_tickets_venue_proto_init()
	file_io_event_tickets_event_proto_msgTypes[2].OneofWrappers = []any{
		(*EventListRequest_ProductionId)(nil),
		(*EventListRequest_ProductionUid)(nil),
	}
	file_io_event_tickets_event_proto_msgTypes[3].OneofWrappers = []any{
		(*GetEventRequest_ProductionId)(nil),
		(*GetEventRequest_ProductionUid)(nil),
		(*GetEventRequest_VenueId)(nil),
		(*GetEventRequest_VenueUid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_event_tickets_event_proto_rawDesc), len(file_io_event_tickets_event_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_event_tickets_event_proto_goTypes,
		DependencyIndexes: file_io_event_tickets_event_proto_depIdxs,
		MessageInfos:      file_io_event_tickets_event_proto_msgTypes,
	}.Build()
	File_io_event_tickets_event_proto = out.File
	file_io_event_tickets_event_proto_goTypes = nil
	file_io_event_tickets_event_proto_depIdxs = nil
}
