//*
// Production contains data that is shared by events: common event properties / settings, distribution settings and Apple Pass Type details.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/event_tickets/production.proto

package event_tickets

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Production struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated production id (22 characters).
	// @tag: validateGeneric:"required_without=Uid" validateCreate:"isdefault" validateUpdate:"required_without=Uid"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required_without=Uid" validateCreate:"isdefault" validateUpdate:"required_without=Uid"`
	// User generated production id; unique within the account.
	// @tag: validateGeneric:"required_without=Id" validateCreate:"omitempty" validateUpdate:"required_without=Id"
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty" validateGeneric:"required_without=Id" validateCreate:"omitempty" validateUpdate:"required_without=Id"`
	// Name of the production (i.e. Les Miserables, The Lion King, Avengers, etc).
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// Localized name of the production.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedName *io.LocalizedString `protobuf:"bytes,4,opt,name=localizedName,proto3" json:"localizedName,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Fine print: terms & conditions for the production.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	FinePrint string `protobuf:"bytes,5,opt,name=finePrint,proto3" json:"finePrint,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized fine print of the production.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedFinePrint *io.LocalizedString `protobuf:"bytes,6,opt,name=localizedFinePrint,proto3" json:"localizedFinePrint,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// If set will automatically delete the ticket and invalidate the pass in our system upon ticket redemption. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	AutoInvalidateTicketsUponRedemption io.Toggle `protobuf:"varint,7,opt,name=autoInvalidateTicketsUponRedemption,proto3,enum=io.Toggle" json:"autoInvalidateTicketsUponRedemption,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// If set will automatically delete the ticket and invalidate the pass in our system 1 day after the event end date (if set). If event date is not set, it will expire 1 day after event start date. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	AutoInvalidateTicketsUponEventEnd io.Toggle `protobuf:"varint,8,opt,name=autoInvalidateTicketsUponEventEnd,proto3,enum=io.Toggle" json:"autoInvalidateTicketsUponEventEnd,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// If set will automatically delete the ticket and invalidate the pass in our system upon ticket expiry. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	AutoInvalidateTicketsUponExpiry io.Toggle `protobuf:"varint,9,opt,name=autoInvalidateTicketsUponExpiry,proto3,enum=io.Toggle" json:"autoInvalidateTicketsUponExpiry,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The events status (bitmask of ProjectStatus). Defaults to io.ProjectStatus.PROJECT_ACTIVE_FOR_OBJECT_CREATION + io.ProjectStatus.PROJECT_DRAFT.
	// @tag: validateGeneric:"-" validateCreate:"omitempty" validateUpdate:"-"
	Status []io.ProjectStatus `protobuf:"varint,10,rep,packed,name=status,proto3,enum=io.ProjectStatus" json:"status,omitempty" validateGeneric:"-" validateCreate:"omitempty" validateUpdate:"-"`
	// Leave empty for draft production. Needs to be set for productions where status contains PROJECT_PUBLISHED.
	// @tag: validateGeneric:"-" validateCreate:"omitempty" validateUpdate:"-"
	PassTypeIdentifier string `protobuf:"bytes,11,opt,name=passTypeIdentifier,proto3" json:"passTypeIdentifier,omitempty" validateGeneric:"-" validateCreate:"omitempty" validateUpdate:"-"`
	// Contains the email & sms distribution settings for the production.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	DistributionSettings *io.DistributionSettings `protobuf:"bytes,12,opt,name=distributionSettings,proto3" json:"distributionSettings,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Used to designate the event type that dictates the format for Apple poster style Event Tickets. If not using a poster type design, select EVENT_TYPE_NONE.
	EventType io.EventType `protobuf:"varint,15,opt,name=eventType,proto3,enum=io.EventType" json:"eventType,omitempty"`
	// The date the event was created. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created,proto3" json:"created,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The date the event updated. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Updated       *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updated,proto3" json:"updated,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Production) Reset() {
	*x = Production{}
	mi := &file_io_event_tickets_production_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Production) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Production) ProtoMessage() {}

func (x *Production) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_production_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Production.ProtoReflect.Descriptor instead.
func (*Production) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_production_proto_rawDescGZIP(), []int{0}
}

func (x *Production) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Production) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Production) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Production) GetLocalizedName() *io.LocalizedString {
	if x != nil {
		return x.LocalizedName
	}
	return nil
}

func (x *Production) GetFinePrint() string {
	if x != nil {
		return x.FinePrint
	}
	return ""
}

func (x *Production) GetLocalizedFinePrint() *io.LocalizedString {
	if x != nil {
		return x.LocalizedFinePrint
	}
	return nil
}

func (x *Production) GetAutoInvalidateTicketsUponRedemption() io.Toggle {
	if x != nil {
		return x.AutoInvalidateTicketsUponRedemption
	}
	return io.Toggle(0)
}

func (x *Production) GetAutoInvalidateTicketsUponEventEnd() io.Toggle {
	if x != nil {
		return x.AutoInvalidateTicketsUponEventEnd
	}
	return io.Toggle(0)
}

func (x *Production) GetAutoInvalidateTicketsUponExpiry() io.Toggle {
	if x != nil {
		return x.AutoInvalidateTicketsUponExpiry
	}
	return io.Toggle(0)
}

func (x *Production) GetStatus() []io.ProjectStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Production) GetPassTypeIdentifier() string {
	if x != nil {
		return x.PassTypeIdentifier
	}
	return ""
}

func (x *Production) GetDistributionSettings() *io.DistributionSettings {
	if x != nil {
		return x.DistributionSettings
	}
	return nil
}

func (x *Production) GetEventType() io.EventType {
	if x != nil {
		return x.EventType
	}
	return io.EventType(0)
}

func (x *Production) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Production) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type ProductionAnalyticsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Period unit of data returned (day, month or year).
	Period io.Period `protobuf:"varint,1,opt,name=period,proto3,enum=io.Period" json:"period,omitempty"`
	// Passes redeemed in this period.
	Redeemed uint32 `protobuf:"varint,2,opt,name=redeemed,proto3" json:"redeemed,omitempty"`
	// Total number of pass redeemed for each device type.
	Devices *io.DeviceBreakdown `protobuf:"bytes,3,opt,name=devices,proto3" json:"devices,omitempty"`
	// Total number of pass redeemed for each distribution source.
	Sources map[string]uint32 `protobuf:"bytes,4,rep,name=sources,proto3" json:"sources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Breakdown of data by day, month or year.
	Data          []*io.ChartDataPoints `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductionAnalyticsResponse) Reset() {
	*x = ProductionAnalyticsResponse{}
	mi := &file_io_event_tickets_production_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductionAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductionAnalyticsResponse) ProtoMessage() {}

func (x *ProductionAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_production_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductionAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*ProductionAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_production_proto_rawDescGZIP(), []int{1}
}

func (x *ProductionAnalyticsResponse) GetPeriod() io.Period {
	if x != nil {
		return x.Period
	}
	return io.Period(0)
}

func (x *ProductionAnalyticsResponse) GetRedeemed() uint32 {
	if x != nil {
		return x.Redeemed
	}
	return 0
}

func (x *ProductionAnalyticsResponse) GetDevices() *io.DeviceBreakdown {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ProductionAnalyticsResponse) GetSources() map[string]uint32 {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *ProductionAnalyticsResponse) GetData() []*io.ChartDataPoints {
	if x != nil {
		return x.Data
	}
	return nil
}

// Contains payload for copying a Production.
type ProductionCopyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// uuid of the Production to copy.
	// @tag: validateCreate:"required"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateCreate:"required"`
	// User generated production id; unique within the account.
	// @tag: validateCreate:"omitempty"
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty" validateCreate:"omitempty"`
	// Optional name for the new Production.
	// @tag: validateCreate:"omitempty"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" validateCreate:"omitempty"`
	// Status to set the copied Production to.
	// @tag: validateCreate:"omitempty"
	Status []io.ProjectStatus `protobuf:"varint,4,rep,packed,name=status,proto3,enum=io.ProjectStatus" json:"status,omitempty" validateCreate:"omitempty"`
	// Can optionally be provided if setting status to published (requires a prod cert).
	// @tag: validateCreate:"omitempty"
	PassTypeIdentifier string `protobuf:"bytes,5,opt,name=passTypeIdentifier,proto3" json:"passTypeIdentifier,omitempty" validateCreate:"omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProductionCopyRequest) Reset() {
	*x = ProductionCopyRequest{}
	mi := &file_io_event_tickets_production_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductionCopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductionCopyRequest) ProtoMessage() {}

func (x *ProductionCopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_production_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductionCopyRequest.ProtoReflect.Descriptor instead.
func (*ProductionCopyRequest) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_production_proto_rawDescGZIP(), []int{2}
}

func (x *ProductionCopyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductionCopyRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ProductionCopyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductionCopyRequest) GetStatus() []io.ProjectStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ProductionCopyRequest) GetPassTypeIdentifier() string {
	if x != nil {
		return x.PassTypeIdentifier
	}
	return ""
}

type ProductionLimitedFieldsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated production id (22 characters).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User generated production id; unique within the account.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Name of the production (i.e. Les Miserables, The Lion King, Avengers, etc).
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductionLimitedFieldsResponse) Reset() {
	*x = ProductionLimitedFieldsResponse{}
	mi := &file_io_event_tickets_production_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductionLimitedFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductionLimitedFieldsResponse) ProtoMessage() {}

func (x *ProductionLimitedFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_production_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductionLimitedFieldsResponse.ProtoReflect.Descriptor instead.
func (*ProductionLimitedFieldsResponse) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_production_proto_rawDescGZIP(), []int{3}
}

func (x *ProductionLimitedFieldsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductionLimitedFieldsResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ProductionLimitedFieldsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_io_event_tickets_production_proto protoreflect.FileDescriptor

var file_io_event_tickets_production_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x69, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee,
	0x07, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x46, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x23, 0x61, 0x75, 0x74, 0x6f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x55, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x52, 0x23, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x55, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x21, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x55,
	0x70, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x21, 0x61,
	0x75, 0x74, 0x6f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x55, 0x70, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64,
	0x12, 0x54, 0x0a, 0x1f, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x55, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x1f, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x55, 0x70, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0xa6, 0x01, 0x92, 0x41, 0xa2, 0x01, 0x0a, 0x9f, 0x01,
	0x2a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x89, 0x01, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x3a, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x2f, 0x20, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2c, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x50, 0x61, 0x73, 0x73, 0x20, 0x54, 0x79, 0x70, 0x65, 0x20,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xc4, 0x02, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x85, 0x02, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0xab, 0x01, 0x92, 0x41,
	0xa7, 0x01, 0x0a, 0xa4, 0x01, 0x2a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x28, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x76, 0x65, 0x72, 0x29, 0x32, 0x89, 0x01,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x3a, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x2f, 0x20, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2c, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x50, 0x61, 0x73, 0x73, 0x20, 0x54, 0x79, 0x70, 0x65,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x42, 0x6f, 0x0a, 0x1d, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5a, 0x32, 0x73, 0x74, 0x61, 0x73,
	0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0xaa, 0x02,
	0x19, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_io_event_tickets_production_proto_rawDescOnce sync.Once
	file_io_event_tickets_production_proto_rawDescData []byte
)

func file_io_event_tickets_production_proto_rawDescGZIP() []byte {
	file_io_event_tickets_production_proto_rawDescOnce.Do(func() {
		file_io_event_tickets_production_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_event_tickets_production_proto_rawDesc), len(file_io_event_tickets_production_proto_rawDesc)))
	})
	return file_io_event_tickets_production_proto_rawDescData
}

var file_io_event_tickets_production_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_io_event_tickets_production_proto_goTypes = []any{
	(*Production)(nil),                      // 0: event_tickets.Production
	(*ProductionAnalyticsResponse)(nil),     // 1: event_tickets.ProductionAnalyticsResponse
	(*ProductionCopyRequest)(nil),           // 2: event_tickets.ProductionCopyRequest
	(*ProductionLimitedFieldsResponse)(nil), // 3: event_tickets.ProductionLimitedFieldsResponse
	nil,                                     // 4: event_tickets.ProductionAnalyticsResponse.SourcesEntry
	(*io.LocalizedString)(nil),              // 5: io.LocalizedString
	(io.Toggle)(0),                          // 6: io.Toggle
	(io.ProjectStatus)(0),                   // 7: io.ProjectStatus
	(*io.DistributionSettings)(nil),         // 8: io.DistributionSettings
	(io.EventType)(0),                       // 9: io.EventType
	(*timestamppb.Timestamp)(nil),           // 10: google.protobuf.Timestamp
	(io.Period)(0),                          // 11: io.Period
	(*io.DeviceBreakdown)(nil),              // 12: io.DeviceBreakdown
	(*io.ChartDataPoints)(nil),              // 13: io.ChartDataPoints
}
var file_io_event_tickets_production_proto_depIdxs = []int32{
	5,  // 0: event_tickets.Production.localizedName:type_name -> io.LocalizedString
	5,  // 1: event_tickets.Production.localizedFinePrint:type_name -> io.LocalizedString
	6,  // 2: event_tickets.Production.autoInvalidateTicketsUponRedemption:type_name -> io.Toggle
	6,  // 3: event_tickets.Production.autoInvalidateTicketsUponEventEnd:type_name -> io.Toggle
	6,  // 4: event_tickets.Production.autoInvalidateTicketsUponExpiry:type_name -> io.Toggle
	7,  // 5: event_tickets.Production.status:type_name -> io.ProjectStatus
	8,  // 6: event_tickets.Production.distributionSettings:type_name -> io.DistributionSettings
	9,  // 7: event_tickets.Production.eventType:type_name -> io.EventType
	10, // 8: event_tickets.Production.created:type_name -> google.protobuf.Timestamp
	10, // 9: event_tickets.Production.updated:type_name -> google.protobuf.Timestamp
	11, // 10: event_tickets.ProductionAnalyticsResponse.period:type_name -> io.Period
	12, // 11: event_tickets.ProductionAnalyticsResponse.devices:type_name -> io.DeviceBreakdown
	4,  // 12: event_tickets.ProductionAnalyticsResponse.sources:type_name -> event_tickets.ProductionAnalyticsResponse.SourcesEntry
	13, // 13: event_tickets.ProductionAnalyticsResponse.data:type_name -> io.ChartDataPoints
	7,  // 14: event_tickets.ProductionCopyRequest.status:type_name -> io.ProjectStatus
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_io_event_tickets_production_proto_init() }
func file_io_event_tickets_production_proto_init() {
	if File_io_event_tickets_production_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_event_tickets_production_proto_rawDesc), len(file_io_event_tickets_production_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_event_tickets_production_proto_goTypes,
		DependencyIndexes: file_io_event_tickets_production_proto_depIdxs,
		MessageInfos:      file_io_event_tickets_production_proto_msgTypes,
	}.Build()
	File_io_event_tickets_production_proto = out.File
	file_io_event_tickets_production_proto_goTypes = nil
	file_io_event_tickets_production_proto_depIdxs = nil
}
