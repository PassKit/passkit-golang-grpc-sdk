//*
// Events Protocol is designed to get your Digital Event Tickets into Apple Wallet and Google Pay, from theatre and cinema, to sport events and concerts.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: io/event_tickets/a_rpc.proto

package event_tickets

import (
	context "context"
	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventTickets_CreateProduction_FullMethodName             = "/event_tickets.EventTickets/createProduction"
	EventTickets_PatchProduction_FullMethodName              = "/event_tickets.EventTickets/patchProduction"
	EventTickets_UpdateProduction_FullMethodName             = "/event_tickets.EventTickets/updateProduction"
	EventTickets_GetProduction_FullMethodName                = "/event_tickets.EventTickets/getProduction"
	EventTickets_DeleteProduction_FullMethodName             = "/event_tickets.EventTickets/deleteProduction"
	EventTickets_ListProductions_FullMethodName              = "/event_tickets.EventTickets/listProductions"
	EventTickets_GetAnalytics_FullMethodName                 = "/event_tickets.EventTickets/getAnalytics"
	EventTickets_CopyProduction_FullMethodName               = "/event_tickets.EventTickets/copyProduction"
	EventTickets_CreateVenue_FullMethodName                  = "/event_tickets.EventTickets/createVenue"
	EventTickets_UpdateVenue_FullMethodName                  = "/event_tickets.EventTickets/updateVenue"
	EventTickets_PatchVenue_FullMethodName                   = "/event_tickets.EventTickets/patchVenue"
	EventTickets_GetVenueById_FullMethodName                 = "/event_tickets.EventTickets/getVenueById"
	EventTickets_DeleteVenue_FullMethodName                  = "/event_tickets.EventTickets/deleteVenue"
	EventTickets_ListVenues_FullMethodName                   = "/event_tickets.EventTickets/listVenues"
	EventTickets_CreateEvent_FullMethodName                  = "/event_tickets.EventTickets/createEvent"
	EventTickets_UpdateEvent_FullMethodName                  = "/event_tickets.EventTickets/updateEvent"
	EventTickets_PatchEvent_FullMethodName                   = "/event_tickets.EventTickets/patchEvent"
	EventTickets_GetEventById_FullMethodName                 = "/event_tickets.EventTickets/getEventById"
	EventTickets_GetEventByStartDateAndVenue_FullMethodName  = "/event_tickets.EventTickets/getEventByStartDateAndVenue"
	EventTickets_DeleteEvent_FullMethodName                  = "/event_tickets.EventTickets/deleteEvent"
	EventTickets_ListEvents_FullMethodName                   = "/event_tickets.EventTickets/listEvents"
	EventTickets_CreateTicketType_FullMethodName             = "/event_tickets.EventTickets/createTicketType"
	EventTickets_UpdateTicketType_FullMethodName             = "/event_tickets.EventTickets/updateTicketType"
	EventTickets_PatchTicketType_FullMethodName              = "/event_tickets.EventTickets/patchTicketType"
	EventTickets_GetTicketTypeById_FullMethodName            = "/event_tickets.EventTickets/getTicketTypeById"
	EventTickets_GetTicketTypeByUserDefinedId_FullMethodName = "/event_tickets.EventTickets/getTicketTypeByUserDefinedId"
	EventTickets_DeleteTicketType_FullMethodName             = "/event_tickets.EventTickets/deleteTicketType"
	EventTickets_ListTicketTypes_FullMethodName              = "/event_tickets.EventTickets/listTicketTypes"
	EventTickets_IssueTicket_FullMethodName                  = "/event_tickets.EventTickets/issueTicket"
	EventTickets_IssueTicketById_FullMethodName              = "/event_tickets.EventTickets/issueTicketById"
	EventTickets_UpdateTicket_FullMethodName                 = "/event_tickets.EventTickets/updateTicket"
	EventTickets_PatchPerson_FullMethodName                  = "/event_tickets.EventTickets/patchPerson"
	EventTickets_ValidateTicket_FullMethodName               = "/event_tickets.EventTickets/validateTicket"
	EventTickets_RedeemTicket_FullMethodName                 = "/event_tickets.EventTickets/redeemTicket"
	EventTickets_RedeemTicketsByOrderNumber_FullMethodName   = "/event_tickets.EventTickets/redeemTicketsByOrderNumber"
	EventTickets_GetTicketById_FullMethodName                = "/event_tickets.EventTickets/getTicketById"
	EventTickets_GetTicketByTicketNumber_FullMethodName      = "/event_tickets.EventTickets/getTicketByTicketNumber"
	EventTickets_GetTicketsByOrderNumber_FullMethodName      = "/event_tickets.EventTickets/getTicketsByOrderNumber"
	EventTickets_GetEventTicketPass_FullMethodName           = "/event_tickets.EventTickets/getEventTicketPass"
	EventTickets_DeleteTicket_FullMethodName                 = "/event_tickets.EventTickets/deleteTicket"
	EventTickets_BulkDeleteTickets_FullMethodName            = "/event_tickets.EventTickets/bulkDeleteTickets"
	EventTickets_DeleteTicketsByOrderNumber_FullMethodName   = "/event_tickets.EventTickets/deleteTicketsByOrderNumber"
	EventTickets_ListTickets_FullMethodName                  = "/event_tickets.EventTickets/listTickets"
	EventTickets_CountTickets_FullMethodName                 = "/event_tickets.EventTickets/countTickets"
)

// EventTicketsClient is the client API for EventTickets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventTicketsClient interface {
	CreateProduction(ctx context.Context, in *Production, opts ...grpc.CallOption) (*io.Id, error)
	PatchProduction(ctx context.Context, in *Production, opts ...grpc.CallOption) (*Production, error)
	UpdateProduction(ctx context.Context, in *Production, opts ...grpc.CallOption) (*Production, error)
	GetProduction(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Production, error)
	DeleteProduction(ctx context.Context, in *Production, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListProductions(ctx context.Context, in *io.Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Production], error)
	GetAnalytics(ctx context.Context, in *io.AnalyticsRequest, opts ...grpc.CallOption) (*ProductionAnalyticsResponse, error)
	CopyProduction(ctx context.Context, in *ProductionCopyRequest, opts ...grpc.CallOption) (*io.Id, error)
	CreateVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*io.Id, error)
	UpdateVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*Venue, error)
	PatchVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*Venue, error)
	GetVenueById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Venue, error)
	DeleteVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListVenues(ctx context.Context, in *io.Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Venue], error)
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*io.Id, error)
	UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	PatchEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	GetEventById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Event, error)
	GetEventByStartDateAndVenue(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error)
	DeleteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListEvents(ctx context.Context, in *EventListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventListResponse], error)
	CreateTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*io.Id, error)
	UpdateTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*TicketType, error)
	PatchTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*TicketType, error)
	GetTicketTypeById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*TicketType, error)
	GetTicketTypeByUserDefinedId(ctx context.Context, in *GetByUidRequest, opts ...grpc.CallOption) (*TicketType, error)
	DeleteTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTicketTypes(ctx context.Context, in *TicketTypeListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TicketType], error)
	IssueTicket(ctx context.Context, in *IssueTicketRequest, opts ...grpc.CallOption) (*io.Id, error)
	IssueTicketById(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*IssueTicketResponseIds, error)
	UpdateTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*io.Id, error)
	PatchPerson(ctx context.Context, in *EventTicketPerson, opts ...grpc.CallOption) (*io.Id, error)
	ValidateTicket(ctx context.Context, in *ValidateTicketRequest, opts ...grpc.CallOption) (*ValidateTicketResponse, error)
	RedeemTicket(ctx context.Context, in *RedeemTicketRequest, opts ...grpc.CallOption) (*io.Id, error)
	RedeemTicketsByOrderNumber(ctx context.Context, in *RedeemByOrderNumber, opts ...grpc.CallOption) (*io.Ids, error)
	GetTicketById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Ticket, error)
	GetTicketByTicketNumber(ctx context.Context, in *TicketNumberRequest, opts ...grpc.CallOption) (*Ticket, error)
	GetTicketsByOrderNumber(ctx context.Context, in *OrderNumberRequest, opts ...grpc.CallOption) (*Tickets, error)
	GetEventTicketPass(ctx context.Context, in *EventTicketPassRequest, opts ...grpc.CallOption) (*io.PassBundles, error)
	DeleteTicket(ctx context.Context, in *TicketId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkDeleteTickets(ctx context.Context, in *io.BulkPassActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTicketsByOrderNumber(ctx context.Context, in *OrderNumberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTickets(ctx context.Context, in *TicketListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TicketLimitedFields], error)
	CountTickets(ctx context.Context, in *TicketListRequest, opts ...grpc.CallOption) (*io.Count, error)
}

type eventTicketsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventTicketsClient(cc grpc.ClientConnInterface) EventTicketsClient {
	return &eventTicketsClient{cc}
}

func (c *eventTicketsClient) CreateProduction(ctx context.Context, in *Production, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, EventTickets_CreateProduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) PatchProduction(ctx context.Context, in *Production, opts ...grpc.CallOption) (*Production, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Production)
	err := c.cc.Invoke(ctx, EventTickets_PatchProduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) UpdateProduction(ctx context.Context, in *Production, opts ...grpc.CallOption) (*Production, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Production)
	err := c.cc.Invoke(ctx, EventTickets_UpdateProduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) GetProduction(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Production, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Production)
	err := c.cc.Invoke(ctx, EventTickets_GetProduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) DeleteProduction(ctx context.Context, in *Production, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventTickets_DeleteProduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) ListProductions(ctx context.Context, in *io.Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Production], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventTickets_ServiceDesc.Streams[0], EventTickets_ListProductions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[io.Filters, Production]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventTickets_ListProductionsClient = grpc.ServerStreamingClient[Production]

func (c *eventTicketsClient) GetAnalytics(ctx context.Context, in *io.AnalyticsRequest, opts ...grpc.CallOption) (*ProductionAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionAnalyticsResponse)
	err := c.cc.Invoke(ctx, EventTickets_GetAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) CopyProduction(ctx context.Context, in *ProductionCopyRequest, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, EventTickets_CopyProduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) CreateVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, EventTickets_CreateVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) UpdateVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*Venue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Venue)
	err := c.cc.Invoke(ctx, EventTickets_UpdateVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) PatchVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*Venue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Venue)
	err := c.cc.Invoke(ctx, EventTickets_PatchVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) GetVenueById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Venue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Venue)
	err := c.cc.Invoke(ctx, EventTickets_GetVenueById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) DeleteVenue(ctx context.Context, in *Venue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventTickets_DeleteVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) ListVenues(ctx context.Context, in *io.Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Venue], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventTickets_ServiceDesc.Streams[1], EventTickets_ListVenues_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[io.Filters, Venue]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventTickets_ListVenuesClient = grpc.ServerStreamingClient[Venue]

func (c *eventTicketsClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, EventTickets_CreateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, EventTickets_UpdateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) PatchEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, EventTickets_PatchEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) GetEventById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, EventTickets_GetEventById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) GetEventByStartDateAndVenue(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, EventTickets_GetEventByStartDateAndVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) DeleteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventTickets_DeleteEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) ListEvents(ctx context.Context, in *EventListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventListResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventTickets_ServiceDesc.Streams[2], EventTickets_ListEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventListRequest, EventListResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventTickets_ListEventsClient = grpc.ServerStreamingClient[EventListResponse]

func (c *eventTicketsClient) CreateTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, EventTickets_CreateTicketType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) UpdateTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*TicketType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketType)
	err := c.cc.Invoke(ctx, EventTickets_UpdateTicketType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) PatchTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*TicketType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketType)
	err := c.cc.Invoke(ctx, EventTickets_PatchTicketType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) GetTicketTypeById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*TicketType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketType)
	err := c.cc.Invoke(ctx, EventTickets_GetTicketTypeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) GetTicketTypeByUserDefinedId(ctx context.Context, in *GetByUidRequest, opts ...grpc.CallOption) (*TicketType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketType)
	err := c.cc.Invoke(ctx, EventTickets_GetTicketTypeByUserDefinedId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) DeleteTicketType(ctx context.Context, in *TicketType, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventTickets_DeleteTicketType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) ListTicketTypes(ctx context.Context, in *TicketTypeListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TicketType], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventTickets_ServiceDesc.Streams[3], EventTickets_ListTicketTypes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TicketTypeListRequest, TicketType]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventTickets_ListTicketTypesClient = grpc.ServerStreamingClient[TicketType]

func (c *eventTicketsClient) IssueTicket(ctx context.Context, in *IssueTicketRequest, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, EventTickets_IssueTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) IssueTicketById(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*IssueTicketResponseIds, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueTicketResponseIds)
	err := c.cc.Invoke(ctx, EventTickets_IssueTicketById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) UpdateTicket(ctx context.Context, in *Ticket, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, EventTickets_UpdateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) PatchPerson(ctx context.Context, in *EventTicketPerson, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, EventTickets_PatchPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) ValidateTicket(ctx context.Context, in *ValidateTicketRequest, opts ...grpc.CallOption) (*ValidateTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTicketResponse)
	err := c.cc.Invoke(ctx, EventTickets_ValidateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) RedeemTicket(ctx context.Context, in *RedeemTicketRequest, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, EventTickets_RedeemTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) RedeemTicketsByOrderNumber(ctx context.Context, in *RedeemByOrderNumber, opts ...grpc.CallOption) (*io.Ids, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Ids)
	err := c.cc.Invoke(ctx, EventTickets_RedeemTicketsByOrderNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) GetTicketById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Ticket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ticket)
	err := c.cc.Invoke(ctx, EventTickets_GetTicketById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) GetTicketByTicketNumber(ctx context.Context, in *TicketNumberRequest, opts ...grpc.CallOption) (*Ticket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ticket)
	err := c.cc.Invoke(ctx, EventTickets_GetTicketByTicketNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) GetTicketsByOrderNumber(ctx context.Context, in *OrderNumberRequest, opts ...grpc.CallOption) (*Tickets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tickets)
	err := c.cc.Invoke(ctx, EventTickets_GetTicketsByOrderNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) GetEventTicketPass(ctx context.Context, in *EventTicketPassRequest, opts ...grpc.CallOption) (*io.PassBundles, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.PassBundles)
	err := c.cc.Invoke(ctx, EventTickets_GetEventTicketPass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) DeleteTicket(ctx context.Context, in *TicketId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventTickets_DeleteTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) BulkDeleteTickets(ctx context.Context, in *io.BulkPassActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventTickets_BulkDeleteTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) DeleteTicketsByOrderNumber(ctx context.Context, in *OrderNumberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventTickets_DeleteTicketsByOrderNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTicketsClient) ListTickets(ctx context.Context, in *TicketListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TicketLimitedFields], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventTickets_ServiceDesc.Streams[4], EventTickets_ListTickets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TicketListRequest, TicketLimitedFields]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventTickets_ListTicketsClient = grpc.ServerStreamingClient[TicketLimitedFields]

func (c *eventTicketsClient) CountTickets(ctx context.Context, in *TicketListRequest, opts ...grpc.CallOption) (*io.Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Count)
	err := c.cc.Invoke(ctx, EventTickets_CountTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventTicketsServer is the server API for EventTickets service.
// All implementations should embed UnimplementedEventTicketsServer
// for forward compatibility.
type EventTicketsServer interface {
	CreateProduction(context.Context, *Production) (*io.Id, error)
	PatchProduction(context.Context, *Production) (*Production, error)
	UpdateProduction(context.Context, *Production) (*Production, error)
	GetProduction(context.Context, *io.Id) (*Production, error)
	DeleteProduction(context.Context, *Production) (*emptypb.Empty, error)
	ListProductions(*io.Filters, grpc.ServerStreamingServer[Production]) error
	GetAnalytics(context.Context, *io.AnalyticsRequest) (*ProductionAnalyticsResponse, error)
	CopyProduction(context.Context, *ProductionCopyRequest) (*io.Id, error)
	CreateVenue(context.Context, *Venue) (*io.Id, error)
	UpdateVenue(context.Context, *Venue) (*Venue, error)
	PatchVenue(context.Context, *Venue) (*Venue, error)
	GetVenueById(context.Context, *io.Id) (*Venue, error)
	DeleteVenue(context.Context, *Venue) (*emptypb.Empty, error)
	ListVenues(*io.Filters, grpc.ServerStreamingServer[Venue]) error
	CreateEvent(context.Context, *Event) (*io.Id, error)
	UpdateEvent(context.Context, *Event) (*Event, error)
	PatchEvent(context.Context, *Event) (*Event, error)
	GetEventById(context.Context, *io.Id) (*Event, error)
	GetEventByStartDateAndVenue(context.Context, *GetEventRequest) (*Event, error)
	DeleteEvent(context.Context, *Event) (*emptypb.Empty, error)
	ListEvents(*EventListRequest, grpc.ServerStreamingServer[EventListResponse]) error
	CreateTicketType(context.Context, *TicketType) (*io.Id, error)
	UpdateTicketType(context.Context, *TicketType) (*TicketType, error)
	PatchTicketType(context.Context, *TicketType) (*TicketType, error)
	GetTicketTypeById(context.Context, *io.Id) (*TicketType, error)
	GetTicketTypeByUserDefinedId(context.Context, *GetByUidRequest) (*TicketType, error)
	DeleteTicketType(context.Context, *TicketType) (*emptypb.Empty, error)
	ListTicketTypes(*TicketTypeListRequest, grpc.ServerStreamingServer[TicketType]) error
	IssueTicket(context.Context, *IssueTicketRequest) (*io.Id, error)
	IssueTicketById(context.Context, *Ticket) (*IssueTicketResponseIds, error)
	UpdateTicket(context.Context, *Ticket) (*io.Id, error)
	PatchPerson(context.Context, *EventTicketPerson) (*io.Id, error)
	ValidateTicket(context.Context, *ValidateTicketRequest) (*ValidateTicketResponse, error)
	RedeemTicket(context.Context, *RedeemTicketRequest) (*io.Id, error)
	RedeemTicketsByOrderNumber(context.Context, *RedeemByOrderNumber) (*io.Ids, error)
	GetTicketById(context.Context, *io.Id) (*Ticket, error)
	GetTicketByTicketNumber(context.Context, *TicketNumberRequest) (*Ticket, error)
	GetTicketsByOrderNumber(context.Context, *OrderNumberRequest) (*Tickets, error)
	GetEventTicketPass(context.Context, *EventTicketPassRequest) (*io.PassBundles, error)
	DeleteTicket(context.Context, *TicketId) (*emptypb.Empty, error)
	BulkDeleteTickets(context.Context, *io.BulkPassActionRequest) (*emptypb.Empty, error)
	DeleteTicketsByOrderNumber(context.Context, *OrderNumberRequest) (*emptypb.Empty, error)
	ListTickets(*TicketListRequest, grpc.ServerStreamingServer[TicketLimitedFields]) error
	CountTickets(context.Context, *TicketListRequest) (*io.Count, error)
}

// UnimplementedEventTicketsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventTicketsServer struct{}

func (UnimplementedEventTicketsServer) CreateProduction(context.Context, *Production) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduction not implemented")
}
func (UnimplementedEventTicketsServer) PatchProduction(context.Context, *Production) (*Production, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProduction not implemented")
}
func (UnimplementedEventTicketsServer) UpdateProduction(context.Context, *Production) (*Production, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduction not implemented")
}
func (UnimplementedEventTicketsServer) GetProduction(context.Context, *io.Id) (*Production, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduction not implemented")
}
func (UnimplementedEventTicketsServer) DeleteProduction(context.Context, *Production) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduction not implemented")
}
func (UnimplementedEventTicketsServer) ListProductions(*io.Filters, grpc.ServerStreamingServer[Production]) error {
	return status.Errorf(codes.Unimplemented, "method ListProductions not implemented")
}
func (UnimplementedEventTicketsServer) GetAnalytics(context.Context, *io.AnalyticsRequest) (*ProductionAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalytics not implemented")
}
func (UnimplementedEventTicketsServer) CopyProduction(context.Context, *ProductionCopyRequest) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyProduction not implemented")
}
func (UnimplementedEventTicketsServer) CreateVenue(context.Context, *Venue) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVenue not implemented")
}
func (UnimplementedEventTicketsServer) UpdateVenue(context.Context, *Venue) (*Venue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVenue not implemented")
}
func (UnimplementedEventTicketsServer) PatchVenue(context.Context, *Venue) (*Venue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchVenue not implemented")
}
func (UnimplementedEventTicketsServer) GetVenueById(context.Context, *io.Id) (*Venue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVenueById not implemented")
}
func (UnimplementedEventTicketsServer) DeleteVenue(context.Context, *Venue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVenue not implemented")
}
func (UnimplementedEventTicketsServer) ListVenues(*io.Filters, grpc.ServerStreamingServer[Venue]) error {
	return status.Errorf(codes.Unimplemented, "method ListVenues not implemented")
}
func (UnimplementedEventTicketsServer) CreateEvent(context.Context, *Event) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedEventTicketsServer) UpdateEvent(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventTicketsServer) PatchEvent(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEvent not implemented")
}
func (UnimplementedEventTicketsServer) GetEventById(context.Context, *io.Id) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventById not implemented")
}
func (UnimplementedEventTicketsServer) GetEventByStartDateAndVenue(context.Context, *GetEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventByStartDateAndVenue not implemented")
}
func (UnimplementedEventTicketsServer) DeleteEvent(context.Context, *Event) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventTicketsServer) ListEvents(*EventListRequest, grpc.ServerStreamingServer[EventListResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedEventTicketsServer) CreateTicketType(context.Context, *TicketType) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketType not implemented")
}
func (UnimplementedEventTicketsServer) UpdateTicketType(context.Context, *TicketType) (*TicketType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketType not implemented")
}
func (UnimplementedEventTicketsServer) PatchTicketType(context.Context, *TicketType) (*TicketType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTicketType not implemented")
}
func (UnimplementedEventTicketsServer) GetTicketTypeById(context.Context, *io.Id) (*TicketType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketTypeById not implemented")
}
func (UnimplementedEventTicketsServer) GetTicketTypeByUserDefinedId(context.Context, *GetByUidRequest) (*TicketType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketTypeByUserDefinedId not implemented")
}
func (UnimplementedEventTicketsServer) DeleteTicketType(context.Context, *TicketType) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicketType not implemented")
}
func (UnimplementedEventTicketsServer) ListTicketTypes(*TicketTypeListRequest, grpc.ServerStreamingServer[TicketType]) error {
	return status.Errorf(codes.Unimplemented, "method ListTicketTypes not implemented")
}
func (UnimplementedEventTicketsServer) IssueTicket(context.Context, *IssueTicketRequest) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTicket not implemented")
}
func (UnimplementedEventTicketsServer) IssueTicketById(context.Context, *Ticket) (*IssueTicketResponseIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTicketById not implemented")
}
func (UnimplementedEventTicketsServer) UpdateTicket(context.Context, *Ticket) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedEventTicketsServer) PatchPerson(context.Context, *EventTicketPerson) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchPerson not implemented")
}
func (UnimplementedEventTicketsServer) ValidateTicket(context.Context, *ValidateTicketRequest) (*ValidateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTicket not implemented")
}
func (UnimplementedEventTicketsServer) RedeemTicket(context.Context, *RedeemTicketRequest) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemTicket not implemented")
}
func (UnimplementedEventTicketsServer) RedeemTicketsByOrderNumber(context.Context, *RedeemByOrderNumber) (*io.Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemTicketsByOrderNumber not implemented")
}
func (UnimplementedEventTicketsServer) GetTicketById(context.Context, *io.Id) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketById not implemented")
}
func (UnimplementedEventTicketsServer) GetTicketByTicketNumber(context.Context, *TicketNumberRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketByTicketNumber not implemented")
}
func (UnimplementedEventTicketsServer) GetTicketsByOrderNumber(context.Context, *OrderNumberRequest) (*Tickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketsByOrderNumber not implemented")
}
func (UnimplementedEventTicketsServer) GetEventTicketPass(context.Context, *EventTicketPassRequest) (*io.PassBundles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventTicketPass not implemented")
}
func (UnimplementedEventTicketsServer) DeleteTicket(context.Context, *TicketId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedEventTicketsServer) BulkDeleteTickets(context.Context, *io.BulkPassActionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDeleteTickets not implemented")
}
func (UnimplementedEventTicketsServer) DeleteTicketsByOrderNumber(context.Context, *OrderNumberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicketsByOrderNumber not implemented")
}
func (UnimplementedEventTicketsServer) ListTickets(*TicketListRequest, grpc.ServerStreamingServer[TicketLimitedFields]) error {
	return status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (UnimplementedEventTicketsServer) CountTickets(context.Context, *TicketListRequest) (*io.Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTickets not implemented")
}
func (UnimplementedEventTicketsServer) testEmbeddedByValue() {}

// UnsafeEventTicketsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventTicketsServer will
// result in compilation errors.
type UnsafeEventTicketsServer interface {
	mustEmbedUnimplementedEventTicketsServer()
}

func RegisterEventTicketsServer(s grpc.ServiceRegistrar, srv EventTicketsServer) {
	// If the following call pancis, it indicates UnimplementedEventTicketsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventTickets_ServiceDesc, srv)
}

func _EventTickets_CreateProduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Production)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).CreateProduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_CreateProduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).CreateProduction(ctx, req.(*Production))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_PatchProduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Production)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).PatchProduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_PatchProduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).PatchProduction(ctx, req.(*Production))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_UpdateProduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Production)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).UpdateProduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_UpdateProduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).UpdateProduction(ctx, req.(*Production))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_GetProduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).GetProduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_GetProduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).GetProduction(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_DeleteProduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Production)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).DeleteProduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_DeleteProduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).DeleteProduction(ctx, req.(*Production))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_ListProductions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(io.Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventTicketsServer).ListProductions(m, &grpc.GenericServerStream[io.Filters, Production]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventTickets_ListProductionsServer = grpc.ServerStreamingServer[Production]

func _EventTickets_GetAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.AnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).GetAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_GetAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).GetAnalytics(ctx, req.(*io.AnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_CopyProduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductionCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).CopyProduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_CopyProduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).CopyProduction(ctx, req.(*ProductionCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_CreateVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Venue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).CreateVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_CreateVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).CreateVenue(ctx, req.(*Venue))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_UpdateVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Venue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).UpdateVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_UpdateVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).UpdateVenue(ctx, req.(*Venue))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_PatchVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Venue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).PatchVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_PatchVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).PatchVenue(ctx, req.(*Venue))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_GetVenueById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).GetVenueById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_GetVenueById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).GetVenueById(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_DeleteVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Venue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).DeleteVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_DeleteVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).DeleteVenue(ctx, req.(*Venue))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_ListVenues_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(io.Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventTicketsServer).ListVenues(m, &grpc.GenericServerStream[io.Filters, Venue]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventTickets_ListVenuesServer = grpc.ServerStreamingServer[Venue]

func _EventTickets_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).UpdateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_PatchEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).PatchEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_PatchEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).PatchEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_GetEventById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).GetEventById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_GetEventById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).GetEventById(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_GetEventByStartDateAndVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).GetEventByStartDateAndVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_GetEventByStartDateAndVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).GetEventByStartDateAndVenue(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).DeleteEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_ListEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventTicketsServer).ListEvents(m, &grpc.GenericServerStream[EventListRequest, EventListResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventTickets_ListEventsServer = grpc.ServerStreamingServer[EventListResponse]

func _EventTickets_CreateTicketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).CreateTicketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_CreateTicketType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).CreateTicketType(ctx, req.(*TicketType))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_UpdateTicketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).UpdateTicketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_UpdateTicketType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).UpdateTicketType(ctx, req.(*TicketType))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_PatchTicketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).PatchTicketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_PatchTicketType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).PatchTicketType(ctx, req.(*TicketType))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_GetTicketTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).GetTicketTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_GetTicketTypeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).GetTicketTypeById(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_GetTicketTypeByUserDefinedId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).GetTicketTypeByUserDefinedId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_GetTicketTypeByUserDefinedId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).GetTicketTypeByUserDefinedId(ctx, req.(*GetByUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_DeleteTicketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).DeleteTicketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_DeleteTicketType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).DeleteTicketType(ctx, req.(*TicketType))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_ListTicketTypes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TicketTypeListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventTicketsServer).ListTicketTypes(m, &grpc.GenericServerStream[TicketTypeListRequest, TicketType]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventTickets_ListTicketTypesServer = grpc.ServerStreamingServer[TicketType]

func _EventTickets_IssueTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).IssueTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_IssueTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).IssueTicket(ctx, req.(*IssueTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_IssueTicketById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).IssueTicketById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_IssueTicketById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).IssueTicketById(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ticket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_UpdateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).UpdateTicket(ctx, req.(*Ticket))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_PatchPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTicketPerson)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).PatchPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_PatchPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).PatchPerson(ctx, req.(*EventTicketPerson))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_ValidateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).ValidateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_ValidateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).ValidateTicket(ctx, req.(*ValidateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_RedeemTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).RedeemTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_RedeemTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).RedeemTicket(ctx, req.(*RedeemTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_RedeemTicketsByOrderNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemByOrderNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).RedeemTicketsByOrderNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_RedeemTicketsByOrderNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).RedeemTicketsByOrderNumber(ctx, req.(*RedeemByOrderNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_GetTicketById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).GetTicketById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_GetTicketById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).GetTicketById(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_GetTicketByTicketNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).GetTicketByTicketNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_GetTicketByTicketNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).GetTicketByTicketNumber(ctx, req.(*TicketNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_GetTicketsByOrderNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).GetTicketsByOrderNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_GetTicketsByOrderNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).GetTicketsByOrderNumber(ctx, req.(*OrderNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_GetEventTicketPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTicketPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).GetEventTicketPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_GetEventTicketPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).GetEventTicketPass(ctx, req.(*EventTicketPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_DeleteTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).DeleteTicket(ctx, req.(*TicketId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_BulkDeleteTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.BulkPassActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).BulkDeleteTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_BulkDeleteTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).BulkDeleteTickets(ctx, req.(*io.BulkPassActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_DeleteTicketsByOrderNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).DeleteTicketsByOrderNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_DeleteTicketsByOrderNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).DeleteTicketsByOrderNumber(ctx, req.(*OrderNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTickets_ListTickets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TicketListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventTicketsServer).ListTickets(m, &grpc.GenericServerStream[TicketListRequest, TicketLimitedFields]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventTickets_ListTicketsServer = grpc.ServerStreamingServer[TicketLimitedFields]

func _EventTickets_CountTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTicketsServer).CountTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventTickets_CountTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTicketsServer).CountTickets(ctx, req.(*TicketListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventTickets_ServiceDesc is the grpc.ServiceDesc for EventTickets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventTickets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event_tickets.EventTickets",
	HandlerType: (*EventTicketsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createProduction",
			Handler:    _EventTickets_CreateProduction_Handler,
		},
		{
			MethodName: "patchProduction",
			Handler:    _EventTickets_PatchProduction_Handler,
		},
		{
			MethodName: "updateProduction",
			Handler:    _EventTickets_UpdateProduction_Handler,
		},
		{
			MethodName: "getProduction",
			Handler:    _EventTickets_GetProduction_Handler,
		},
		{
			MethodName: "deleteProduction",
			Handler:    _EventTickets_DeleteProduction_Handler,
		},
		{
			MethodName: "getAnalytics",
			Handler:    _EventTickets_GetAnalytics_Handler,
		},
		{
			MethodName: "copyProduction",
			Handler:    _EventTickets_CopyProduction_Handler,
		},
		{
			MethodName: "createVenue",
			Handler:    _EventTickets_CreateVenue_Handler,
		},
		{
			MethodName: "updateVenue",
			Handler:    _EventTickets_UpdateVenue_Handler,
		},
		{
			MethodName: "patchVenue",
			Handler:    _EventTickets_PatchVenue_Handler,
		},
		{
			MethodName: "getVenueById",
			Handler:    _EventTickets_GetVenueById_Handler,
		},
		{
			MethodName: "deleteVenue",
			Handler:    _EventTickets_DeleteVenue_Handler,
		},
		{
			MethodName: "createEvent",
			Handler:    _EventTickets_CreateEvent_Handler,
		},
		{
			MethodName: "updateEvent",
			Handler:    _EventTickets_UpdateEvent_Handler,
		},
		{
			MethodName: "patchEvent",
			Handler:    _EventTickets_PatchEvent_Handler,
		},
		{
			MethodName: "getEventById",
			Handler:    _EventTickets_GetEventById_Handler,
		},
		{
			MethodName: "getEventByStartDateAndVenue",
			Handler:    _EventTickets_GetEventByStartDateAndVenue_Handler,
		},
		{
			MethodName: "deleteEvent",
			Handler:    _EventTickets_DeleteEvent_Handler,
		},
		{
			MethodName: "createTicketType",
			Handler:    _EventTickets_CreateTicketType_Handler,
		},
		{
			MethodName: "updateTicketType",
			Handler:    _EventTickets_UpdateTicketType_Handler,
		},
		{
			MethodName: "patchTicketType",
			Handler:    _EventTickets_PatchTicketType_Handler,
		},
		{
			MethodName: "getTicketTypeById",
			Handler:    _EventTickets_GetTicketTypeById_Handler,
		},
		{
			MethodName: "getTicketTypeByUserDefinedId",
			Handler:    _EventTickets_GetTicketTypeByUserDefinedId_Handler,
		},
		{
			MethodName: "deleteTicketType",
			Handler:    _EventTickets_DeleteTicketType_Handler,
		},
		{
			MethodName: "issueTicket",
			Handler:    _EventTickets_IssueTicket_Handler,
		},
		{
			MethodName: "issueTicketById",
			Handler:    _EventTickets_IssueTicketById_Handler,
		},
		{
			MethodName: "updateTicket",
			Handler:    _EventTickets_UpdateTicket_Handler,
		},
		{
			MethodName: "patchPerson",
			Handler:    _EventTickets_PatchPerson_Handler,
		},
		{
			MethodName: "validateTicket",
			Handler:    _EventTickets_ValidateTicket_Handler,
		},
		{
			MethodName: "redeemTicket",
			Handler:    _EventTickets_RedeemTicket_Handler,
		},
		{
			MethodName: "redeemTicketsByOrderNumber",
			Handler:    _EventTickets_RedeemTicketsByOrderNumber_Handler,
		},
		{
			MethodName: "getTicketById",
			Handler:    _EventTickets_GetTicketById_Handler,
		},
		{
			MethodName: "getTicketByTicketNumber",
			Handler:    _EventTickets_GetTicketByTicketNumber_Handler,
		},
		{
			MethodName: "getTicketsByOrderNumber",
			Handler:    _EventTickets_GetTicketsByOrderNumber_Handler,
		},
		{
			MethodName: "getEventTicketPass",
			Handler:    _EventTickets_GetEventTicketPass_Handler,
		},
		{
			MethodName: "deleteTicket",
			Handler:    _EventTickets_DeleteTicket_Handler,
		},
		{
			MethodName: "bulkDeleteTickets",
			Handler:    _EventTickets_BulkDeleteTickets_Handler,
		},
		{
			MethodName: "deleteTicketsByOrderNumber",
			Handler:    _EventTickets_DeleteTicketsByOrderNumber_Handler,
		},
		{
			MethodName: "countTickets",
			Handler:    _EventTickets_CountTickets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listProductions",
			Handler:       _EventTickets_ListProductions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listVenues",
			Handler:       _EventTickets_ListVenues_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listEvents",
			Handler:       _EventTickets_ListEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTicketTypes",
			Handler:       _EventTickets_ListTicketTypes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTickets",
			Handler:       _EventTickets_ListTickets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/event_tickets/a_rpc.proto",
}
