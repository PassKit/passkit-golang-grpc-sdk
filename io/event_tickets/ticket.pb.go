//*
// Ticket is a unique ticket instance and holds details about the event dates & times, venue, ticket holder and other relevant details pertaining to a ticket.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/event_tickets/ticket.proto

package event_tickets

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TicketStatus int32

const (
	TicketStatus_STATUS_NONE TicketStatus = 0
	// Default ticket status
	TicketStatus_ISSUED TicketStatus = 1
	// Set after a ticket is redeemed (the redeem endpoint is called).
	TicketStatus_REDEEMED TicketStatus = 2
)

// Enum value maps for TicketStatus.
var (
	TicketStatus_name = map[int32]string{
		0: "STATUS_NONE",
		1: "ISSUED",
		2: "REDEEMED",
	}
	TicketStatus_value = map[string]int32{
		"STATUS_NONE": 0,
		"ISSUED":      1,
		"REDEEMED":    2,
	}
)

func (x TicketStatus) Enum() *TicketStatus {
	p := new(TicketStatus)
	*p = x
	return p
}

func (x TicketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_io_event_tickets_ticket_proto_enumTypes[0].Descriptor()
}

func (TicketStatus) Type() protoreflect.EnumType {
	return &file_io_event_tickets_ticket_proto_enumTypes[0]
}

func (x TicketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketStatus.Descriptor instead.
func (TicketStatus) EnumDescriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{0}
}

// An object to communicate the ID of the ticket. Either the ticket id (22 character identifier), or the production id
// (22 character identifier), or Production UID (user defined id) plus the externally provided ticket number should be provided.
type TicketId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required"
	//
	// Types that are valid to be assigned to Id:
	//
	//	*TicketId_TicketId
	//	*TicketId_TicketNumber
	Id            isTicketId_Id `protobuf_oneof:"id" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketId) Reset() {
	*x = TicketId{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketId) ProtoMessage() {}

func (x *TicketId) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketId.ProtoReflect.Descriptor instead.
func (*TicketId) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{0}
}

func (x *TicketId) GetId() isTicketId_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TicketId) GetTicketId() string {
	if x != nil {
		if x, ok := x.Id.(*TicketId_TicketId); ok {
			return x.TicketId
		}
	}
	return ""
}

func (x *TicketId) GetTicketNumber() *TicketNumber {
	if x != nil {
		if x, ok := x.Id.(*TicketId_TicketNumber); ok {
			return x.TicketNumber
		}
	}
	return nil
}

type isTicketId_Id interface {
	isTicketId_Id()
}

type TicketId_TicketId struct {
	// The Ticket id (22 character identifier).
	// @tag: validateGeneric:"required,uuidCompressedString"
	TicketId string `protobuf:"bytes,1,opt,name=ticketId,proto3,oneof" validateGeneric:"required,uuidCompressedString"`
}

type TicketId_TicketNumber struct {
	// A ticket number object containing a production id and ticket number"
	// @tag: validateGeneric:"required,dive"
	TicketNumber *TicketNumber `protobuf:"bytes,2,opt,name=ticketNumber,proto3,oneof" validateGeneric:"required,dive"`
}

func (*TicketId_TicketId) isTicketId_Id() {}

func (*TicketId_TicketNumber) isTicketId_Id() {}

type TicketNumber struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Production id (22 character identifier), or the Production user defined id.
	// @tag: validateGeneric:"required"
	ProductionId string `protobuf:"bytes,1,opt,name=productionId,proto3" json:"productionId,omitempty" validateGeneric:"required"`
	// The user defined ticket number (unique within production)
	// @tag: validateGeneric:"required"
	TicketNumber  string `protobuf:"bytes,2,opt,name=ticketNumber,proto3" json:"ticketNumber,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketNumber) Reset() {
	*x = TicketNumber{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketNumber) ProtoMessage() {}

func (x *TicketNumber) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketNumber.ProtoReflect.Descriptor instead.
func (*TicketNumber) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{1}
}

func (x *TicketNumber) GetProductionId() string {
	if x != nil {
		return x.ProductionId
	}
	return ""
}

func (x *TicketNumber) GetTicketNumber() string {
	if x != nil {
		return x.TicketNumber
	}
	return ""
}

// The Ticket Details
type Ticket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated ticket id (22 characters).
	// @tag: validateGeneric:"required_without=TicketNumber" validateCreate:"isdefault" validateUpdate:"required_without=TicketNumber"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required_without=TicketNumber" validateCreate:"isdefault" validateUpdate:"required_without=TicketNumber"`
	// Optional user generated ticket number. Unique within the Production.
	// @tag: validateGeneric:"required_without=Id" validateCreate:"omitempty" validateUpdate:"required_without=Id"
	TicketNumber string `protobuf:"bytes,2,opt,name=ticketNumber,proto3" json:"ticketNumber,omitempty" validateGeneric:"required_without=Id" validateCreate:"omitempty" validateUpdate:"required_without=Id"`
	// The event that the ticket is for. Can provide event id, or the whole event object - if the event doesn't exist it will be created. The combination of event.production.id, event.startDate, event.venue.uid & ticket.ticketTypeUid is enforced unique in the system.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"-"
	Event *Event `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"-"`
	// The ticket type the ticket is for.
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"-"
	TicketType *TicketType `protobuf:"bytes,4,opt,name=ticketType,proto3" json:"ticketType,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"-"`
	// Optional order / confirmation / booking code. Unique within the Production.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	OrderNumber string `protobuf:"bytes,5,opt,name=orderNumber,proto3" json:"orderNumber,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional PassKit generated grouping ID. The system automatically groups tickets based by order number. Grouped tickets can be downloaded together from our multi-pass download pages. Not writable.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	GroupingId string `protobuf:"bytes,6,opt,name=groupingId,proto3" json:"groupingId,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The contents to embed in the barcode for this ticket. If not provided, the default value from the Ticket Type Pass Template Design is used.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	BarcodeContents string `protobuf:"bytes,7,opt,name=barcodeContents,proto3" json:"barcodeContents,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The seat info for the ticket.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	SeatInfo *Seat `protobuf:"bytes,8,opt,name=seatInfo,proto3" json:"seatInfo,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The face value details for the ticket.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	FaceValue *FaceValue `protobuf:"bytes,9,opt,name=faceValue,proto3" json:"faceValue,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The ticket holder information. Stored encrypted in PassKit's database.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Person *io.Person `protobuf:"bytes,10,opt,name=person,proto3" json:"person,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Any other meta fields for the ticket that are not covered in the Ticket Object / API (i.e. you might want to capture ticket information specific to your process).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	MetaData map[string]string `protobuf:"bytes,11,rep,name=metaData,proto3" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Indicates if the holder of the ticket opted out to receive marketing promotions (defaults to false).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	OptOut io.Toggle `protobuf:"varint,12,opt,name=optOut,proto3,enum=io.Toggle" json:"optOut,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Holds the ticket status.
	// @tag: validateGeneric:"omitempty" validateCreate:"isdefault" validateUpdate:"omitempty"
	Status TicketStatus `protobuf:"varint,13,opt,name=status,proto3,enum=event_tickets.TicketStatus" json:"status,omitempty" validateGeneric:"omitempty" validateCreate:"isdefault" validateUpdate:"omitempty"`
	// Optional field to set when the ticket expires. When the expiry date hits, it will automatically gray out the barcode.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	ExpiryDate *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=expiryDate,proto3" json:"expiryDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Contains details about the redemption (if the ticket is in a redeemed state). Not writable; set by the redeem endpoint.
	// @tag: validateGeneric:"omitempty" validateCreate:"isdefault" validateUpdate:"isdefault"
	RedemptionDetails *RedemptionDetails `protobuf:"bytes,15,opt,name=redemptionDetails,proto3" json:"redemptionDetails,omitempty" validateGeneric:"omitempty" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// Contains details about when the ticket was validated. Tickets can be validated multiple times. Not writable; set by the validate endpoint.
	// @tag: validateGeneric:"omitempty" validateCreate:"isdefault" validateUpdate:"isdefault"
	ValidateDetails []*ValidateDetails `protobuf:"bytes,16,rep,name=validateDetails,proto3" json:"validateDetails,omitempty" validateGeneric:"omitempty" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// Optional Pass level overrides for proximity & images.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	PassOverrides *io.PassOverrides `protobuf:"bytes,17,opt,name=passOverrides,proto3" json:"passOverrides,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data. Cannot be set via the API.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	PassMetaData *io.Metadata `protobuf:"bytes,18,opt,name=passMetaData,proto3" json:"passMetaData,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date the ticket was created. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=created,proto3" json:"created,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The date the ticket last updated. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Updated       *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=updated,proto3" json:"updated,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{2}
}

func (x *Ticket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ticket) GetTicketNumber() string {
	if x != nil {
		return x.TicketNumber
	}
	return ""
}

func (x *Ticket) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Ticket) GetTicketType() *TicketType {
	if x != nil {
		return x.TicketType
	}
	return nil
}

func (x *Ticket) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *Ticket) GetGroupingId() string {
	if x != nil {
		return x.GroupingId
	}
	return ""
}

func (x *Ticket) GetBarcodeContents() string {
	if x != nil {
		return x.BarcodeContents
	}
	return ""
}

func (x *Ticket) GetSeatInfo() *Seat {
	if x != nil {
		return x.SeatInfo
	}
	return nil
}

func (x *Ticket) GetFaceValue() *FaceValue {
	if x != nil {
		return x.FaceValue
	}
	return nil
}

func (x *Ticket) GetPerson() *io.Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *Ticket) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *Ticket) GetOptOut() io.Toggle {
	if x != nil {
		return x.OptOut
	}
	return io.Toggle(0)
}

func (x *Ticket) GetStatus() TicketStatus {
	if x != nil {
		return x.Status
	}
	return TicketStatus_STATUS_NONE
}

func (x *Ticket) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *Ticket) GetRedemptionDetails() *RedemptionDetails {
	if x != nil {
		return x.RedemptionDetails
	}
	return nil
}

func (x *Ticket) GetValidateDetails() []*ValidateDetails {
	if x != nil {
		return x.ValidateDetails
	}
	return nil
}

func (x *Ticket) GetPassOverrides() *io.PassOverrides {
	if x != nil {
		return x.PassOverrides
	}
	return nil
}

func (x *Ticket) GetPassMetaData() *io.Metadata {
	if x != nil {
		return x.PassMetaData
	}
	return nil
}

func (x *Ticket) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Ticket) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type ValidateDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The date the ticket was validated, auto set by the system when the validate endpoint is called. Tickets can be validated multiple times. Not writable.
	ValidateDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=validateDate,proto3" json:"validateDate,omitempty"`
	// Optional redemption lat.
	Lat float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"`
	// Optional redemption lon.
	Lon float64 `protobuf:"fixed64,3,opt,name=lon,proto3" json:"lon,omitempty"`
	// Optional redemption alt.
	Alt int32 `protobuf:"varint,4,opt,name=alt,proto3" json:"alt,omitempty"`
	// Optional validate user agent, can be used in case where a Merchant uses the PassKit scanning solution combined with their own scanning software and wants to differentiate the source of validation.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	ValidateSource string `protobuf:"bytes,6,opt,name=validateSource,proto3" json:"validateSource,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional validate reference, can be used for staff name, username, scanner ID, location ID, etc.
	ValidateReference string `protobuf:"bytes,7,opt,name=validateReference,proto3" json:"validateReference,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ValidateDetails) Reset() {
	*x = ValidateDetails{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateDetails) ProtoMessage() {}

func (x *ValidateDetails) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateDetails.ProtoReflect.Descriptor instead.
func (*ValidateDetails) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{3}
}

func (x *ValidateDetails) GetValidateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidateDate
	}
	return nil
}

func (x *ValidateDetails) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *ValidateDetails) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *ValidateDetails) GetAlt() int32 {
	if x != nil {
		return x.Alt
	}
	return 0
}

func (x *ValidateDetails) GetValidateSource() string {
	if x != nil {
		return x.ValidateSource
	}
	return ""
}

func (x *ValidateDetails) GetValidateReference() string {
	if x != nil {
		return x.ValidateReference
	}
	return ""
}

type RedemptionDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The date the ticket was redeemed, auto set by the system when the redeem endpoint is called. Not writable.
	RedemptionDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=redemptionDate,proto3" json:"redemptionDate,omitempty"`
	// Optional redemption lat.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Lat float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional redemption lon.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Lon float64 `protobuf:"fixed64,3,opt,name=lon,proto3" json:"lon,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional redemption alt.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Alt int32 `protobuf:"varint,4,opt,name=alt,proto3" json:"alt,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional redemption user agent, can be used in case where a Merchant uses the PassKit scanning solution combined with their own scanning software and wants to differentiate the source of redemption.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	RedemptionSource string `protobuf:"bytes,6,opt,name=redemptionSource,proto3" json:"redemptionSource,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional redemption reference, can be used for staff name, username, scanner ID, location ID, etc.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	RedemptionReference string `protobuf:"bytes,7,opt,name=redemptionReference,proto3" json:"redemptionReference,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RedemptionDetails) Reset() {
	*x = RedemptionDetails{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedemptionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedemptionDetails) ProtoMessage() {}

func (x *RedemptionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedemptionDetails.ProtoReflect.Descriptor instead.
func (*RedemptionDetails) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{4}
}

func (x *RedemptionDetails) GetRedemptionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RedemptionDate
	}
	return nil
}

func (x *RedemptionDetails) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *RedemptionDetails) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *RedemptionDetails) GetAlt() int32 {
	if x != nil {
		return x.Alt
	}
	return 0
}

func (x *RedemptionDetails) GetRedemptionSource() string {
	if x != nil {
		return x.RedemptionSource
	}
	return ""
}

func (x *RedemptionDetails) GetRedemptionReference() string {
	if x != nil {
		return x.RedemptionReference
	}
	return ""
}

type FaceValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ticket amount in cents.
	Amount float32 `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The ticket currency.
	Currency      string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FaceValue) Reset() {
	*x = FaceValue{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaceValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceValue) ProtoMessage() {}

func (x *FaceValue) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceValue.ProtoReflect.Descriptor instead.
func (*FaceValue) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{5}
}

func (x *FaceValue) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FaceValue) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type Seat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The seat number, such as "1", "2", "3", or any other seat identifier.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Seat string `protobuf:"bytes,1,opt,name=seat,proto3" json:"seat,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized seat number.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedSeat *io.LocalizedString `protobuf:"bytes,2,opt,name=localizedSeat,proto3" json:"localizedSeat,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The row of the seat, such as "1", E", "BB", or "A5".
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Row string `protobuf:"bytes,3,opt,name=row,proto3" json:"row,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized row.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedRow *io.LocalizedString `protobuf:"bytes,4,opt,name=localizedRow,proto3" json:"localizedRow,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The section of the seat, such as "121".
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Section string `protobuf:"bytes,5,opt,name=section,proto3" json:"section,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized section.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedSection *io.LocalizedString `protobuf:"bytes,6,opt,name=localizedSection,proto3" json:"localizedSection,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The gate the ticket holder should enter to get to their seat, such as "A" or "West".
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Gate string `protobuf:"bytes,7,opt,name=gate,proto3" json:"gate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized gate.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedGate *io.LocalizedString `protobuf:"bytes,8,opt,name=localizedGate,proto3" json:"localizedGate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The identifier code for the seat. E.g. "312-H-7".
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Identifier string `protobuf:"bytes,9,opt,name=identifier,proto3" json:"identifier,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized Identifier.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedIdentifier *io.LocalizedString `protobuf:"bytes,10,opt,name=localizedIdentifier,proto3" json:"localizedIdentifier,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// A description of the seat, such as "Shared Sofa Seat".
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized description.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedDescription *io.LocalizedString `protobuf:"bytes,12,opt,name=localizedDescription,proto3" json:"localizedDescription,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The type of ticket, such as "General Admission", "VIP", "Lower Reserve", etc.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Type string `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized type.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedType *io.LocalizedString `protobuf:"bytes,14,opt,name=localizedType,proto3" json:"localizedType,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The level the ticket holder should use to get to their seat.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Level string `protobuf:"bytes,15,opt,name=level,proto3" json:"level,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized level.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedLevel *io.LocalizedString `protobuf:"bytes,16,opt,name=localizedLevel,proto3" json:"localizedLevel,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The aisle the ticket holder should use to get to their seat.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Aisle string `protobuf:"bytes,17,opt,name=aisle,proto3" json:"aisle,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized aisle.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedAisle *io.LocalizedString `protobuf:"bytes,18,opt,name=localizedAisle,proto3" json:"localizedAisle,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The door used to access the event (if applicable).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Door string `protobuf:"bytes,19,opt,name=door,proto3" json:"door,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized door.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedDoor *io.LocalizedString `protobuf:"bytes,20,opt,name=localizedDoor,proto3" json:"localizedDoor,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The associated color for the seat section as determined by the venue. Apple poster style NFC event tickets will change the color of the footer of the ticket to assist in directing attendees. Specified as a CSS-style RGB triple. E.g. `rgb(100,10,110`.
	// @tag: validateGeneric:"omitempty,rgb"
	SectionColor string `protobuf:"bytes,21,opt,name=sectionColor,proto3" json:"sectionColor,omitempty" validateGeneric:"omitempty,rgb"`
	// A URL to a portal with additional event information. A deep link is preferred to provide a more personalised experience. Used with Apple poster style NFC event tickets only. A value in the Seat Information object will override a value in the Venue object.
	// @tag: validateGeneric:"omitempty,http_url"
	PortalURL string `protobuf:"bytes,22,opt,name=portalURL,proto3" json:"portalURL,omitempty" validateGeneric:"omitempty,http_url"`
	// Localized portal URL.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedPortalURL *io.LocalizedString `protobuf:"bytes,23,opt,name=localizedPortalURL,proto3" json:"localizedPortalURL,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// venueEntrance is a more flexible field that the venue labels provided in seating information, as it’s a text field with no label. E.g. can be used if a venue uses a category other than gate, portal, door (part of seating information) to describe the entrance, such as "VIP Entry".
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	VenueEntrance string `protobuf:"bytes,24,opt,name=venueEntrance,proto3" json:"venueEntrance,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized portal URL.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedVenueEntrance *io.LocalizedString `protobuf:"bytes,25,opt,name=localizedVenueEntrance,proto3" json:"localizedVenueEntrance,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The level of admission the ticket provides E.g. "General Admission", "VIP", etc.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	AdmissionLevel string `protobuf:"bytes,26,opt,name=admissionLevel,proto3" json:"admissionLevel,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized admission level.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedAdmissionLevel *io.LocalizedString `protobuf:"bytes,27,opt,name=localizedAdmissionLevel,proto3" json:"localizedAdmissionLevel,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// A shortened representation of admissionLevel, which can be shown alongside seating information, unlike admissionLevel which cannot be displayed alongside seating information on Apple poster tickets.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	AdmissionLevelAbbreviation string `protobuf:"bytes,28,opt,name=admissionLevelAbbreviation,proto3" json:"admissionLevelAbbreviation,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized admission level abbreviation.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedAdmissionLevelAbbreviation *io.LocalizedString `protobuf:"bytes,29,opt,name=localizedAdmissionLevelAbbreviation,proto3" json:"localizedAdmissionLevelAbbreviation,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The long description of the entrance information.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	EntranceDescription string `protobuf:"bytes,30,opt,name=entranceDescription,proto3" json:"entranceDescription,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized entrance description.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedEntranceDescription *io.LocalizedString `protobuf:"bytes,31,opt,name=localizedEntranceDescription,proto3" json:"localizedEntranceDescription,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The room where the seat is located. A value here will overwrite any room value given in EventSemanticTags.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Room string `protobuf:"bytes,32,opt,name=room,proto3" json:"room,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized room.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedRoom *io.LocalizedString `protobuf:"bytes,33,opt,name=localizedRoom,proto3" json:"localizedRoom,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The additional ticket attributes text provides a field for additional information that is essential to be on the pass face, but doesn’t fall into any other category. It is displayed directly above the venue name/region label on Apple poster tickets only.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	AdditionalTicketAttributes string `protobuf:"bytes,34,opt,name=additionalTicketAttributes,proto3" json:"additionalTicketAttributes,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Localized room.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedAdditionalTicketAttributes *io.LocalizedString `protobuf:"bytes,35,opt,name=localizedAdditionalTicketAttributes,proto3" json:"localizedAdditionalTicketAttributes,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *Seat) Reset() {
	*x = Seat{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Seat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seat) ProtoMessage() {}

func (x *Seat) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seat.ProtoReflect.Descriptor instead.
func (*Seat) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{6}
}

func (x *Seat) GetSeat() string {
	if x != nil {
		return x.Seat
	}
	return ""
}

func (x *Seat) GetLocalizedSeat() *io.LocalizedString {
	if x != nil {
		return x.LocalizedSeat
	}
	return nil
}

func (x *Seat) GetRow() string {
	if x != nil {
		return x.Row
	}
	return ""
}

func (x *Seat) GetLocalizedRow() *io.LocalizedString {
	if x != nil {
		return x.LocalizedRow
	}
	return nil
}

func (x *Seat) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *Seat) GetLocalizedSection() *io.LocalizedString {
	if x != nil {
		return x.LocalizedSection
	}
	return nil
}

func (x *Seat) GetGate() string {
	if x != nil {
		return x.Gate
	}
	return ""
}

func (x *Seat) GetLocalizedGate() *io.LocalizedString {
	if x != nil {
		return x.LocalizedGate
	}
	return nil
}

func (x *Seat) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Seat) GetLocalizedIdentifier() *io.LocalizedString {
	if x != nil {
		return x.LocalizedIdentifier
	}
	return nil
}

func (x *Seat) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Seat) GetLocalizedDescription() *io.LocalizedString {
	if x != nil {
		return x.LocalizedDescription
	}
	return nil
}

func (x *Seat) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Seat) GetLocalizedType() *io.LocalizedString {
	if x != nil {
		return x.LocalizedType
	}
	return nil
}

func (x *Seat) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Seat) GetLocalizedLevel() *io.LocalizedString {
	if x != nil {
		return x.LocalizedLevel
	}
	return nil
}

func (x *Seat) GetAisle() string {
	if x != nil {
		return x.Aisle
	}
	return ""
}

func (x *Seat) GetLocalizedAisle() *io.LocalizedString {
	if x != nil {
		return x.LocalizedAisle
	}
	return nil
}

func (x *Seat) GetDoor() string {
	if x != nil {
		return x.Door
	}
	return ""
}

func (x *Seat) GetLocalizedDoor() *io.LocalizedString {
	if x != nil {
		return x.LocalizedDoor
	}
	return nil
}

func (x *Seat) GetSectionColor() string {
	if x != nil {
		return x.SectionColor
	}
	return ""
}

func (x *Seat) GetPortalURL() string {
	if x != nil {
		return x.PortalURL
	}
	return ""
}

func (x *Seat) GetLocalizedPortalURL() *io.LocalizedString {
	if x != nil {
		return x.LocalizedPortalURL
	}
	return nil
}

func (x *Seat) GetVenueEntrance() string {
	if x != nil {
		return x.VenueEntrance
	}
	return ""
}

func (x *Seat) GetLocalizedVenueEntrance() *io.LocalizedString {
	if x != nil {
		return x.LocalizedVenueEntrance
	}
	return nil
}

func (x *Seat) GetAdmissionLevel() string {
	if x != nil {
		return x.AdmissionLevel
	}
	return ""
}

func (x *Seat) GetLocalizedAdmissionLevel() *io.LocalizedString {
	if x != nil {
		return x.LocalizedAdmissionLevel
	}
	return nil
}

func (x *Seat) GetAdmissionLevelAbbreviation() string {
	if x != nil {
		return x.AdmissionLevelAbbreviation
	}
	return ""
}

func (x *Seat) GetLocalizedAdmissionLevelAbbreviation() *io.LocalizedString {
	if x != nil {
		return x.LocalizedAdmissionLevelAbbreviation
	}
	return nil
}

func (x *Seat) GetEntranceDescription() string {
	if x != nil {
		return x.EntranceDescription
	}
	return ""
}

func (x *Seat) GetLocalizedEntranceDescription() *io.LocalizedString {
	if x != nil {
		return x.LocalizedEntranceDescription
	}
	return nil
}

func (x *Seat) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *Seat) GetLocalizedRoom() *io.LocalizedString {
	if x != nil {
		return x.LocalizedRoom
	}
	return nil
}

func (x *Seat) GetAdditionalTicketAttributes() string {
	if x != nil {
		return x.AdditionalTicketAttributes
	}
	return ""
}

func (x *Seat) GetLocalizedAdditionalTicketAttributes() *io.LocalizedString {
	if x != nil {
		return x.LocalizedAdditionalTicketAttributes
	}
	return nil
}

type TicketListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required"
	//
	// Types that are valid to be assigned to Production:
	//
	//	*TicketListRequest_ProductionId
	//	*TicketListRequest_ProductionUid
	Production isTicketListRequest_Production `protobuf_oneof:"production" validateGeneric:"required"`
	// @tag: validateGeneric:"omitempty"
	//
	// Types that are valid to be assigned to Event:
	//
	//	*TicketListRequest_EventId
	//	*TicketListRequest_EventFilterByVenueAndStart
	Event isTicketListRequest_Event `protobuf_oneof:"event" validateGeneric:"omitempty"`
	// @tag: validateGeneric:"omitempty"
	//
	// Types that are valid to be assigned to TicketType:
	//
	//	*TicketListRequest_TicketTypeId
	//	*TicketListRequest_TicketTypeUid
	TicketType isTicketListRequest_TicketType `protobuf_oneof:"ticketType" validateGeneric:"omitempty"`
	// Filters: allows to filter on additional ticket data (i.e. group id, pass install status, updated etc).
	// @tag: validateGeneric:"omitempty"
	Filters       *io.Filters `protobuf:"bytes,7,opt,name=filters,proto3" json:"filters,omitempty" validateGeneric:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketListRequest) Reset() {
	*x = TicketListRequest{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketListRequest) ProtoMessage() {}

func (x *TicketListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketListRequest.ProtoReflect.Descriptor instead.
func (*TicketListRequest) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{7}
}

func (x *TicketListRequest) GetProduction() isTicketListRequest_Production {
	if x != nil {
		return x.Production
	}
	return nil
}

func (x *TicketListRequest) GetProductionId() string {
	if x != nil {
		if x, ok := x.Production.(*TicketListRequest_ProductionId); ok {
			return x.ProductionId
		}
	}
	return ""
}

func (x *TicketListRequest) GetProductionUid() string {
	if x != nil {
		if x, ok := x.Production.(*TicketListRequest_ProductionUid); ok {
			return x.ProductionUid
		}
	}
	return ""
}

func (x *TicketListRequest) GetEvent() isTicketListRequest_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *TicketListRequest) GetEventId() string {
	if x != nil {
		if x, ok := x.Event.(*TicketListRequest_EventId); ok {
			return x.EventId
		}
	}
	return ""
}

func (x *TicketListRequest) GetEventFilterByVenueAndStart() *EventFilterByVenueAndStart {
	if x != nil {
		if x, ok := x.Event.(*TicketListRequest_EventFilterByVenueAndStart); ok {
			return x.EventFilterByVenueAndStart
		}
	}
	return nil
}

func (x *TicketListRequest) GetTicketType() isTicketListRequest_TicketType {
	if x != nil {
		return x.TicketType
	}
	return nil
}

func (x *TicketListRequest) GetTicketTypeId() string {
	if x != nil {
		if x, ok := x.TicketType.(*TicketListRequest_TicketTypeId); ok {
			return x.TicketTypeId
		}
	}
	return ""
}

func (x *TicketListRequest) GetTicketTypeUid() string {
	if x != nil {
		if x, ok := x.TicketType.(*TicketListRequest_TicketTypeUid); ok {
			return x.TicketTypeUid
		}
	}
	return ""
}

func (x *TicketListRequest) GetFilters() *io.Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type isTicketListRequest_Production interface {
	isTicketListRequest_Production()
}

type TicketListRequest_ProductionId struct {
	// Production ID. Required if productionUid is not provided.
	// @tag: validateGeneric:"required_without=ProductionUid"
	ProductionId string `protobuf:"bytes,1,opt,name=productionId,proto3,oneof" validateGeneric:"required_without=ProductionUid"`
}

type TicketListRequest_ProductionUid struct {
	// Production UID. Required if productionId is not provided.
	// @tag: validateGeneric:"required_without=ProductionId"
	ProductionUid string `protobuf:"bytes,2,opt,name=productionUid,proto3,oneof" validateGeneric:"required_without=ProductionId"`
}

func (*TicketListRequest_ProductionId) isTicketListRequest_Production() {}

func (*TicketListRequest_ProductionUid) isTicketListRequest_Production() {}

type isTicketListRequest_Event interface {
	isTicketListRequest_Event()
}

type TicketListRequest_EventId struct {
	// Event ID generated by PassKit.
	// @tag: validateGeneric:"omitempty"
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3,oneof" validateGeneric:"omitempty"`
}

type TicketListRequest_EventFilterByVenueAndStart struct {
	// @tag: validateGeneric:"omitempty"
	EventFilterByVenueAndStart *EventFilterByVenueAndStart `protobuf:"bytes,4,opt,name=eventFilterByVenueAndStart,proto3,oneof" validateGeneric:"omitempty"`
}

func (*TicketListRequest_EventId) isTicketListRequest_Event() {}

func (*TicketListRequest_EventFilterByVenueAndStart) isTicketListRequest_Event() {}

type isTicketListRequest_TicketType interface {
	isTicketListRequest_TicketType()
}

type TicketListRequest_TicketTypeId struct {
	// PassKit Ticket Type ID.
	// @tag: validateGeneric:"omitempty"
	TicketTypeId string `protobuf:"bytes,5,opt,name=ticketTypeId,proto3,oneof" validateGeneric:"omitempty"`
}

type TicketListRequest_TicketTypeUid struct {
	// User Defined Ticket Type ID.
	// @tag: validateGeneric:"omitempty"
	TicketTypeUid string `protobuf:"bytes,6,opt,name=ticketTypeUid,proto3,oneof" validateGeneric:"omitempty"`
}

func (*TicketListRequest_TicketTypeId) isTicketListRequest_TicketType() {}

func (*TicketListRequest_TicketTypeUid) isTicketListRequest_TicketType() {}

type EventFilterByVenueAndStart struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Venue ID. Required if venueUid is not provided.
	// @tag: validateGeneric:"required_without=VenueUid"
	VenueId string `protobuf:"bytes,1,opt,name=venueId,proto3" json:"venueId,omitempty" validateGeneric:"required_without=VenueUid"`
	// Venue UID. Required if venueId is not provided.
	// @tag: validateGeneric:"required_without=VenueId"
	VenueUid string `protobuf:"bytes,2,opt,name=venueUid,proto3" json:"venueUid,omitempty" validateGeneric:"required_without=VenueId"`
	// Event scheduled start date time.
	// @tag: validateGeneric:"required"
	ScheduledStartDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=scheduledStartDate,proto3" json:"scheduledStartDate,omitempty" validateGeneric:"required"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EventFilterByVenueAndStart) Reset() {
	*x = EventFilterByVenueAndStart{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventFilterByVenueAndStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFilterByVenueAndStart) ProtoMessage() {}

func (x *EventFilterByVenueAndStart) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFilterByVenueAndStart.ProtoReflect.Descriptor instead.
func (*EventFilterByVenueAndStart) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{8}
}

func (x *EventFilterByVenueAndStart) GetVenueId() string {
	if x != nil {
		return x.VenueId
	}
	return ""
}

func (x *EventFilterByVenueAndStart) GetVenueUid() string {
	if x != nil {
		return x.VenueUid
	}
	return ""
}

func (x *EventFilterByVenueAndStart) GetScheduledStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartDate
	}
	return nil
}

type TicketNumberRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Production ID. Required if productionUid is not provided.
	// @tag: validateGeneric:"required_without=ProductionUid"
	ProductionId string `protobuf:"bytes,1,opt,name=productionId,proto3" json:"productionId,omitempty" validateGeneric:"required_without=ProductionUid"`
	// Production UID. Required if productionId is not provided.
	// @tag: validateGeneric:"required_without=ProductionId"
	ProductionUid string `protobuf:"bytes,2,opt,name=productionUid,proto3" json:"productionUid,omitempty" validateGeneric:"required_without=ProductionId"`
	// Ticket Number.
	// @tag: validateGeneric:"required"
	TicketNumber  string `protobuf:"bytes,3,opt,name=ticketNumber,proto3" json:"ticketNumber,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketNumberRequest) Reset() {
	*x = TicketNumberRequest{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketNumberRequest) ProtoMessage() {}

func (x *TicketNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketNumberRequest.ProtoReflect.Descriptor instead.
func (*TicketNumberRequest) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{9}
}

func (x *TicketNumberRequest) GetProductionId() string {
	if x != nil {
		return x.ProductionId
	}
	return ""
}

func (x *TicketNumberRequest) GetProductionUid() string {
	if x != nil {
		return x.ProductionUid
	}
	return ""
}

func (x *TicketNumberRequest) GetTicketNumber() string {
	if x != nil {
		return x.TicketNumber
	}
	return ""
}

type OrderNumberRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Production ID. Required if productionUid is not provided.
	// @tag: validateGeneric:"required_without=ProductionUid"
	ProductionId string `protobuf:"bytes,1,opt,name=productionId,proto3" json:"productionId,omitempty" validateGeneric:"required_without=ProductionUid"`
	// Production UID. Required if productionId is not provided.
	// @tag: validateGeneric:"required_without=ProductionId"
	ProductionUid string `protobuf:"bytes,2,opt,name=productionUid,proto3" json:"productionUid,omitempty" validateGeneric:"required_without=ProductionId"`
	// Order Number.
	// @tag: validateGeneric:"required"
	OrderNumber   string `protobuf:"bytes,3,opt,name=orderNumber,proto3" json:"orderNumber,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderNumberRequest) Reset() {
	*x = OrderNumberRequest{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderNumberRequest) ProtoMessage() {}

func (x *OrderNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderNumberRequest.ProtoReflect.Descriptor instead.
func (*OrderNumberRequest) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{10}
}

func (x *OrderNumberRequest) GetProductionId() string {
	if x != nil {
		return x.ProductionId
	}
	return ""
}

func (x *OrderNumberRequest) GetProductionUid() string {
	if x != nil {
		return x.ProductionUid
	}
	return ""
}

func (x *OrderNumberRequest) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

type RedeemByOrderNumber struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Production ID. Required if productionUid is not provided.
	// @tag: validateGeneric:"required_without=ProductionUid"
	ProductionId string `protobuf:"bytes,1,opt,name=productionId,proto3" json:"productionId,omitempty" validateGeneric:"required_without=ProductionUid"`
	// Production UID. Required if productionId is not provided
	// @tag: validateGeneric:"required_without=ProductionId"
	ProductionUid string `protobuf:"bytes,2,opt,name=productionUid,proto3" json:"productionUid,omitempty" validateGeneric:"required_without=ProductionId"`
	// Order Number.
	// @tag: validateGeneric:"required"
	OrderNumber string `protobuf:"bytes,3,opt,name=orderNumber,proto3" json:"orderNumber,omitempty" validateGeneric:"required"`
	// Details about the redemption.
	// @tag: validateGeneric:"omitempty"
	RedemptionDetails *RedemptionDetails `protobuf:"bytes,4,opt,name=redemptionDetails,proto3" json:"redemptionDetails,omitempty" validateGeneric:"omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RedeemByOrderNumber) Reset() {
	*x = RedeemByOrderNumber{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedeemByOrderNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemByOrderNumber) ProtoMessage() {}

func (x *RedeemByOrderNumber) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemByOrderNumber.ProtoReflect.Descriptor instead.
func (*RedeemByOrderNumber) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{11}
}

func (x *RedeemByOrderNumber) GetProductionId() string {
	if x != nil {
		return x.ProductionId
	}
	return ""
}

func (x *RedeemByOrderNumber) GetProductionUid() string {
	if x != nil {
		return x.ProductionUid
	}
	return ""
}

func (x *RedeemByOrderNumber) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *RedeemByOrderNumber) GetRedemptionDetails() *RedemptionDetails {
	if x != nil {
		return x.RedemptionDetails
	}
	return nil
}

type Tickets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tickets       []*TicketLimitedFields `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tickets) Reset() {
	*x = Tickets{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tickets) ProtoMessage() {}

func (x *Tickets) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tickets.ProtoReflect.Descriptor instead.
func (*Tickets) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{12}
}

func (x *Tickets) GetTickets() []*TicketLimitedFields {
	if x != nil {
		return x.Tickets
	}
	return nil
}

type TicketPassBundles struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An array of tickets.
	Tickets       []*io.PassBundle `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketPassBundles) Reset() {
	*x = TicketPassBundles{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketPassBundles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketPassBundles) ProtoMessage() {}

func (x *TicketPassBundles) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketPassBundles.ProtoReflect.Descriptor instead.
func (*TicketPassBundles) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{13}
}

func (x *TicketPassBundles) GetTickets() []*io.PassBundle {
	if x != nil {
		return x.Tickets
	}
	return nil
}

type ValidateTicketRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If provided will auto redeem ticket once max number of validations has been reached.
	MaxNumberOfValidations uint32 `protobuf:"varint,1,opt,name=maxNumberOfValidations,proto3" json:"maxNumberOfValidations,omitempty"`
	// Ticket id for the ticket to validate.
	// @tag: validateGeneric:"required"
	Ticket *TicketId `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty" validateGeneric:"required"`
	// Additional details to set for this validation.
	// @tag: validateGeneric:"omitempty"
	ValidateDetails *ValidateDetails `protobuf:"bytes,3,opt,name=validateDetails,proto3" json:"validateDetails,omitempty" validateGeneric:"omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ValidateTicketRequest) Reset() {
	*x = ValidateTicketRequest{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTicketRequest) ProtoMessage() {}

func (x *ValidateTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTicketRequest.ProtoReflect.Descriptor instead.
func (*ValidateTicketRequest) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{14}
}

func (x *ValidateTicketRequest) GetMaxNumberOfValidations() uint32 {
	if x != nil {
		return x.MaxNumberOfValidations
	}
	return 0
}

func (x *ValidateTicketRequest) GetTicket() *TicketId {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *ValidateTicketRequest) GetValidateDetails() *ValidateDetails {
	if x != nil {
		return x.ValidateDetails
	}
	return nil
}

type ValidateTicketResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates if the ticket is valid.
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// Full ticket details.
	Ticket        *Ticket `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateTicketResponse) Reset() {
	*x = ValidateTicketResponse{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTicketResponse) ProtoMessage() {}

func (x *ValidateTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTicketResponse.ProtoReflect.Descriptor instead.
func (*ValidateTicketResponse) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{15}
}

func (x *ValidateTicketResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidateTicketResponse) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type RedeemTicketRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ticket id for the ticket to redeem.
	// @tag: validateGeneric:"required"
	Ticket *TicketId `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty" validateGeneric:"required"`
	// Additional details to set for this redemption.
	// @tag: validateGeneric:"omitempty"
	RedemptionDetails *RedemptionDetails `protobuf:"bytes,3,opt,name=redemptionDetails,proto3" json:"redemptionDetails,omitempty" validateGeneric:"omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RedeemTicketRequest) Reset() {
	*x = RedeemTicketRequest{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedeemTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemTicketRequest) ProtoMessage() {}

func (x *RedeemTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemTicketRequest.ProtoReflect.Descriptor instead.
func (*RedeemTicketRequest) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{16}
}

func (x *RedeemTicketRequest) GetTicket() *TicketId {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *RedeemTicketRequest) GetRedemptionDetails() *RedemptionDetails {
	if x != nil {
		return x.RedemptionDetails
	}
	return nil
}

type TicketLimitedFields struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated ticket id (22 characters).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User generated ticket number. Unique within the Production.
	TicketNumber string `protobuf:"bytes,2,opt,name=ticketNumber,proto3" json:"ticketNumber,omitempty"`
	// The production information.
	Production *ProductionLimitedFieldsResponse `protobuf:"bytes,3,opt,name=production,proto3" json:"production,omitempty"`
	// The event information. Only specific fields are returned.
	Event *EventLimitedFieldsResponse `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	// Venue information. Only specific fields are returned.
	Venue *VenueLimitedFieldsResponse `protobuf:"bytes,5,opt,name=venue,proto3" json:"venue,omitempty"`
	// The ticket type the ticket is for. Only specific fields are returned.
	TicketType *TicketTypeLimitedFields `protobuf:"bytes,6,opt,name=ticketType,proto3" json:"ticketType,omitempty"`
	// Optional order / confirmation / booking code. Unique within the Production.
	OrderNumber string `protobuf:"bytes,7,opt,name=orderNumber,proto3" json:"orderNumber,omitempty"`
	// Optional PassKit generated grouping ID. The system automatically groups tickets based by order number. Grouped tickets can be downloaded together from our multi-pass download pages. Not writable.
	GroupingId string `protobuf:"bytes,8,opt,name=groupingId,proto3" json:"groupingId,omitempty"`
	// The contents to embed in the barcode for this ticket. If not provided, the default value from the Ticket Type Pass Template Design is used.
	BarcodeContents string `protobuf:"bytes,9,opt,name=barcodeContents,proto3" json:"barcodeContents,omitempty"`
	// The seat info for the ticket.
	SeatInfo *Seat `protobuf:"bytes,10,opt,name=seatInfo,proto3" json:"seatInfo,omitempty"`
	// The face value details for the ticket.
	FaceValue *FaceValue `protobuf:"bytes,11,opt,name=faceValue,proto3" json:"faceValue,omitempty"`
	// The ticket holder information. Stored encrypted in PassKit's database.
	Person *io.Person `protobuf:"bytes,12,opt,name=person,proto3" json:"person,omitempty"`
	// Any other meta fields for the ticket that are not covered in the Ticket Object / API (i.e. you might want to capture ticket information specific to your process).
	MetaData map[string]string `protobuf:"bytes,13,rep,name=metaData,proto3" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Indicates if the holder of the ticket opted out to receive marketing promotions (defaults to false).
	OptOut bool `protobuf:"varint,14,opt,name=optOut,proto3" json:"optOut,omitempty"`
	// Holds the ticket status.
	Status TicketStatus `protobuf:"varint,15,opt,name=status,proto3,enum=event_tickets.TicketStatus" json:"status,omitempty"`
	// Optional field to set when the ticket expires. When the expiry date hits, it will automatically gray out the barcode.
	ExpiryDate *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=expiryDate,proto3" json:"expiryDate,omitempty"`
	// Contains details about the redemption (if the ticket is in a redeemed state). Not writable; set by the redeem endpoint.
	RedemptionDetails *RedemptionDetails `protobuf:"bytes,17,opt,name=redemptionDetails,proto3" json:"redemptionDetails,omitempty"`
	// Contains details about when the ticket was validated. Tickets can be validated multiple times. Not writable; set by the validate endpoint.
	ValidateDetails []*ValidateDetails `protobuf:"bytes,18,rep,name=validateDetails,proto3" json:"validateDetails,omitempty"`
	// Optional Pass level overrides for proximity & images.
	PassOverrides *io.PassOverrides `protobuf:"bytes,19,opt,name=passOverrides,proto3" json:"passOverrides,omitempty"`
	// Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data. Cannot be set via the API.
	PassMetaData *io.Metadata `protobuf:"bytes,20,opt,name=passMetaData,proto3" json:"passMetaData,omitempty"`
	// The date the ticket was created. Not writable.
	Created *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=created,proto3" json:"created,omitempty"`
	// The date the ticket last updated. Not writable.
	Updated       *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=updated,proto3" json:"updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TicketLimitedFields) Reset() {
	*x = TicketLimitedFields{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketLimitedFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketLimitedFields) ProtoMessage() {}

func (x *TicketLimitedFields) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketLimitedFields.ProtoReflect.Descriptor instead.
func (*TicketLimitedFields) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{17}
}

func (x *TicketLimitedFields) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TicketLimitedFields) GetTicketNumber() string {
	if x != nil {
		return x.TicketNumber
	}
	return ""
}

func (x *TicketLimitedFields) GetProduction() *ProductionLimitedFieldsResponse {
	if x != nil {
		return x.Production
	}
	return nil
}

func (x *TicketLimitedFields) GetEvent() *EventLimitedFieldsResponse {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *TicketLimitedFields) GetVenue() *VenueLimitedFieldsResponse {
	if x != nil {
		return x.Venue
	}
	return nil
}

func (x *TicketLimitedFields) GetTicketType() *TicketTypeLimitedFields {
	if x != nil {
		return x.TicketType
	}
	return nil
}

func (x *TicketLimitedFields) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *TicketLimitedFields) GetGroupingId() string {
	if x != nil {
		return x.GroupingId
	}
	return ""
}

func (x *TicketLimitedFields) GetBarcodeContents() string {
	if x != nil {
		return x.BarcodeContents
	}
	return ""
}

func (x *TicketLimitedFields) GetSeatInfo() *Seat {
	if x != nil {
		return x.SeatInfo
	}
	return nil
}

func (x *TicketLimitedFields) GetFaceValue() *FaceValue {
	if x != nil {
		return x.FaceValue
	}
	return nil
}

func (x *TicketLimitedFields) GetPerson() *io.Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *TicketLimitedFields) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *TicketLimitedFields) GetOptOut() bool {
	if x != nil {
		return x.OptOut
	}
	return false
}

func (x *TicketLimitedFields) GetStatus() TicketStatus {
	if x != nil {
		return x.Status
	}
	return TicketStatus_STATUS_NONE
}

func (x *TicketLimitedFields) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *TicketLimitedFields) GetRedemptionDetails() *RedemptionDetails {
	if x != nil {
		return x.RedemptionDetails
	}
	return nil
}

func (x *TicketLimitedFields) GetValidateDetails() []*ValidateDetails {
	if x != nil {
		return x.ValidateDetails
	}
	return nil
}

func (x *TicketLimitedFields) GetPassOverrides() *io.PassOverrides {
	if x != nil {
		return x.PassOverrides
	}
	return nil
}

func (x *TicketLimitedFields) GetPassMetaData() *io.Metadata {
	if x != nil {
		return x.PassMetaData
	}
	return nil
}

func (x *TicketLimitedFields) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *TicketLimitedFields) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type IssueTicketRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"
	//
	// Types that are valid to be assigned to EventInfo:
	//
	//	*IssueTicketRequest_EventId
	//	*IssueTicketRequest_Event
	EventInfo isIssueTicketRequest_EventInfo `protobuf_oneof:"eventInfo" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"`
	// PassKit generated ticketType id (22 characters).
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"
	TicketTypeId string `protobuf:"bytes,3,opt,name=ticketTypeId,proto3" json:"ticketTypeId,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"`
	// Optional user generated ticket number. Unique within the Production.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"required_without=Id"
	TicketNumber string `protobuf:"bytes,4,opt,name=ticketNumber,proto3" json:"ticketNumber,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"required_without=Id"`
	// Optional order / confirmation / booking code. Unique within the Production.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	OrderNumber string `protobuf:"bytes,5,opt,name=orderNumber,proto3" json:"orderNumber,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Optional PassKit generated grouping ID. The system automatically groups tickets based by order number. Grouped tickets can be downloaded together from our multi-pass download pages. Not writable.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	GroupingId string `protobuf:"bytes,6,opt,name=groupingId,proto3" json:"groupingId,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The contents to embed in the barcode for this ticket. If not provided, the default value from the Ticket Type Pass Template Design is used.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	BarcodeContents string `protobuf:"bytes,7,opt,name=barcodeContents,proto3" json:"barcodeContents,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The seat info for the ticket.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	SeatInfo *Seat `protobuf:"bytes,8,opt,name=seatInfo,proto3" json:"seatInfo,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The face value details for the ticket.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	FaceValue *FaceValue `protobuf:"bytes,9,opt,name=faceValue,proto3" json:"faceValue,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The ticket holder information. Stored encrypted in PassKit's database.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Person *io.Person `protobuf:"bytes,10,opt,name=person,proto3" json:"person,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Any other meta fields for the ticket that are not covered in the Ticket Object / API (i.e. you might want to capture ticket information specific to your process).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	MetaData map[string]string `protobuf:"bytes,11,rep,name=metaData,proto3" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Indicates if the holder of the ticket opted out to receive marketing promotions (defaults to false).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	OptOut bool `protobuf:"varint,12,opt,name=optOut,proto3" json:"optOut,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Holds the ticket status.
	// @tag: validateGeneric:"omitempty" validateCreate:"isdefault" validateUpdate:"omitempty"
	Status TicketStatus `protobuf:"varint,13,opt,name=status,proto3,enum=event_tickets.TicketStatus" json:"status,omitempty" validateGeneric:"omitempty" validateCreate:"isdefault" validateUpdate:"omitempty"`
	// Optional field to set when the ticket expires. When the expiry date hits, it will automatically gray out the barcode.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	ExpiryDate *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=expiryDate,proto3" json:"expiryDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Contains details about the redemption (if the ticket is in a redeemed state). Not writable; set by the redeem endpoint.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	RedemptionDetails *RedemptionDetails `protobuf:"bytes,15,opt,name=redemptionDetails,proto3" json:"redemptionDetails,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// Contains details about when the ticket was validated. Tickets can be validated multiple times. Not writable; set by the validate endpoint.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	ValidateDetails []*ValidateDetails `protobuf:"bytes,16,rep,name=validateDetails,proto3" json:"validateDetails,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// Optional Pass level overrides for proximity & images.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	PassOverrides *io.PassOverrides `protobuf:"bytes,17,opt,name=passOverrides,proto3" json:"passOverrides,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data. Cannot be set via the API.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	PassMetaData *io.Metadata `protobuf:"bytes,18,opt,name=passMetaData,proto3" json:"passMetaData,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date the ticket was created. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=created,proto3" json:"created,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The date the ticket last updated. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Updated       *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=updated,proto3" json:"updated,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueTicketRequest) Reset() {
	*x = IssueTicketRequest{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTicketRequest) ProtoMessage() {}

func (x *IssueTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTicketRequest.ProtoReflect.Descriptor instead.
func (*IssueTicketRequest) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{18}
}

func (x *IssueTicketRequest) GetEventInfo() isIssueTicketRequest_EventInfo {
	if x != nil {
		return x.EventInfo
	}
	return nil
}

func (x *IssueTicketRequest) GetEventId() string {
	if x != nil {
		if x, ok := x.EventInfo.(*IssueTicketRequest_EventId); ok {
			return x.EventId
		}
	}
	return ""
}

func (x *IssueTicketRequest) GetEvent() *EventLimitedFieldsRequest {
	if x != nil {
		if x, ok := x.EventInfo.(*IssueTicketRequest_Event); ok {
			return x.Event
		}
	}
	return nil
}

func (x *IssueTicketRequest) GetTicketTypeId() string {
	if x != nil {
		return x.TicketTypeId
	}
	return ""
}

func (x *IssueTicketRequest) GetTicketNumber() string {
	if x != nil {
		return x.TicketNumber
	}
	return ""
}

func (x *IssueTicketRequest) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *IssueTicketRequest) GetGroupingId() string {
	if x != nil {
		return x.GroupingId
	}
	return ""
}

func (x *IssueTicketRequest) GetBarcodeContents() string {
	if x != nil {
		return x.BarcodeContents
	}
	return ""
}

func (x *IssueTicketRequest) GetSeatInfo() *Seat {
	if x != nil {
		return x.SeatInfo
	}
	return nil
}

func (x *IssueTicketRequest) GetFaceValue() *FaceValue {
	if x != nil {
		return x.FaceValue
	}
	return nil
}

func (x *IssueTicketRequest) GetPerson() *io.Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *IssueTicketRequest) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *IssueTicketRequest) GetOptOut() bool {
	if x != nil {
		return x.OptOut
	}
	return false
}

func (x *IssueTicketRequest) GetStatus() TicketStatus {
	if x != nil {
		return x.Status
	}
	return TicketStatus_STATUS_NONE
}

func (x *IssueTicketRequest) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *IssueTicketRequest) GetRedemptionDetails() *RedemptionDetails {
	if x != nil {
		return x.RedemptionDetails
	}
	return nil
}

func (x *IssueTicketRequest) GetValidateDetails() []*ValidateDetails {
	if x != nil {
		return x.ValidateDetails
	}
	return nil
}

func (x *IssueTicketRequest) GetPassOverrides() *io.PassOverrides {
	if x != nil {
		return x.PassOverrides
	}
	return nil
}

func (x *IssueTicketRequest) GetPassMetaData() *io.Metadata {
	if x != nil {
		return x.PassMetaData
	}
	return nil
}

func (x *IssueTicketRequest) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *IssueTicketRequest) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type isIssueTicketRequest_EventInfo interface {
	isIssueTicketRequest_EventInfo()
}

type IssueTicketRequest_EventId struct {
	// PassKit generated event id (22 characters). Required if event is not provided.
	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3,oneof"`
}

type IssueTicketRequest_Event struct {
	// Event details. Event is auto generated if the record does not exist. Required if eventId is not provided.
	Event *EventLimitedFieldsRequest `protobuf:"bytes,2,opt,name=event,proto3,oneof"`
}

func (*IssueTicketRequest_EventId) isIssueTicketRequest_EventInfo() {}

func (*IssueTicketRequest_Event) isIssueTicketRequest_EventInfo() {}

type IssueTicketResponseIds struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated ticket id (22 characters).
	TicketId string `protobuf:"bytes,1,opt,name=ticketId,proto3" json:"ticketId,omitempty"`
	// PassKit generated production id (22 characters).
	ProductionId string `protobuf:"bytes,2,opt,name=productionId,proto3" json:"productionId,omitempty"`
	// PassKit generated venue id (22 characters).
	VenueId string `protobuf:"bytes,3,opt,name=venueId,proto3" json:"venueId,omitempty"`
	// PassKit generated ticket type id (22 characters).
	TicketTypeId string `protobuf:"bytes,4,opt,name=ticketTypeId,proto3" json:"ticketTypeId,omitempty"`
	// PassKit generated event id (22 characters).
	EventId       string `protobuf:"bytes,5,opt,name=eventId,proto3" json:"eventId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueTicketResponseIds) Reset() {
	*x = IssueTicketResponseIds{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueTicketResponseIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTicketResponseIds) ProtoMessage() {}

func (x *IssueTicketResponseIds) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTicketResponseIds.ProtoReflect.Descriptor instead.
func (*IssueTicketResponseIds) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{19}
}

func (x *IssueTicketResponseIds) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *IssueTicketResponseIds) GetProductionId() string {
	if x != nil {
		return x.ProductionId
	}
	return ""
}

func (x *IssueTicketResponseIds) GetVenueId() string {
	if x != nil {
		return x.VenueId
	}
	return ""
}

func (x *IssueTicketResponseIds) GetTicketTypeId() string {
	if x != nil {
		return x.TicketTypeId
	}
	return ""
}

func (x *IssueTicketResponseIds) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type EventTicketPassRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Either a ticket Id, Ticket Number or Order Number should be provided.
	// @tag: validateGeneric:"required"
	//
	// Types that are valid to be assigned to Request:
	//
	//	*EventTicketPassRequest_TicketId
	//	*EventTicketPassRequest_TicketNumber
	//	*EventTicketPassRequest_OrderNumber
	Request isEventTicketPassRequest_Request `protobuf_oneof:"request" validateGeneric:"required"`
	// Optional. If omitted, return the URL to the web pass landing page. Not used when getting or deleting the underlying boarding pass record.
	// @tag: validateGeneric:"omitempty"
	Format        []io.PassBundleFormat `protobuf:"varint,4,rep,packed,name=format,proto3,enum=io.PassBundleFormat" json:"format,omitempty" validateGeneric:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventTicketPassRequest) Reset() {
	*x = EventTicketPassRequest{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTicketPassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTicketPassRequest) ProtoMessage() {}

func (x *EventTicketPassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTicketPassRequest.ProtoReflect.Descriptor instead.
func (*EventTicketPassRequest) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{20}
}

func (x *EventTicketPassRequest) GetRequest() isEventTicketPassRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *EventTicketPassRequest) GetTicketId() *io.Id {
	if x != nil {
		if x, ok := x.Request.(*EventTicketPassRequest_TicketId); ok {
			return x.TicketId
		}
	}
	return nil
}

func (x *EventTicketPassRequest) GetTicketNumber() *TicketNumberRequest {
	if x != nil {
		if x, ok := x.Request.(*EventTicketPassRequest_TicketNumber); ok {
			return x.TicketNumber
		}
	}
	return nil
}

func (x *EventTicketPassRequest) GetOrderNumber() *OrderNumberRequest {
	if x != nil {
		if x, ok := x.Request.(*EventTicketPassRequest_OrderNumber); ok {
			return x.OrderNumber
		}
	}
	return nil
}

func (x *EventTicketPassRequest) GetFormat() []io.PassBundleFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type isEventTicketPassRequest_Request interface {
	isEventTicketPassRequest_Request()
}

type EventTicketPassRequest_TicketId struct {
	// @tag: validateGeneric:"required_without=TicketNumber OrderNumber"
	TicketId *io.Id `protobuf:"bytes,1,opt,name=ticketId,proto3,oneof" validateGeneric:"required_without=TicketNumber OrderNumber"`
}

type EventTicketPassRequest_TicketNumber struct {
	// @tag: validateGeneric:"omitempty"
	TicketNumber *TicketNumberRequest `protobuf:"bytes,2,opt,name=ticketNumber,proto3,oneof" validateGeneric:"omitempty"`
}

type EventTicketPassRequest_OrderNumber struct {
	// @tag: validateGeneric:"omitempty"
	OrderNumber *OrderNumberRequest `protobuf:"bytes,3,opt,name=orderNumber,proto3,oneof" validateGeneric:"omitempty"`
}

func (*EventTicketPassRequest_TicketId) isEventTicketPassRequest_Request() {}

func (*EventTicketPassRequest_TicketNumber) isEventTicketPassRequest_Request() {}

func (*EventTicketPassRequest_OrderNumber) isEventTicketPassRequest_Request() {}

type EventTicketPerson struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Either a ticket Id, Ticket Number or Order Number should be provided.
	// @tag: validateUpdate:"required"
	//
	// Types that are valid to be assigned to Request:
	//
	//	*EventTicketPerson_TicketId
	//	*EventTicketPerson_TicketNumber
	Request isEventTicketPerson_Request `protobuf_oneof:"request" validateUpdate:"required"`
	// @tag: validateUpdate:"required"
	Person        *io.Person `protobuf:"bytes,5,opt,name=person,proto3" json:"person,omitempty" validateUpdate:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventTicketPerson) Reset() {
	*x = EventTicketPerson{}
	mi := &file_io_event_tickets_ticket_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventTicketPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTicketPerson) ProtoMessage() {}

func (x *EventTicketPerson) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_ticket_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTicketPerson.ProtoReflect.Descriptor instead.
func (*EventTicketPerson) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_ticket_proto_rawDescGZIP(), []int{21}
}

func (x *EventTicketPerson) GetRequest() isEventTicketPerson_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *EventTicketPerson) GetTicketId() *io.Id {
	if x != nil {
		if x, ok := x.Request.(*EventTicketPerson_TicketId); ok {
			return x.TicketId
		}
	}
	return nil
}

func (x *EventTicketPerson) GetTicketNumber() *TicketNumberRequest {
	if x != nil {
		if x, ok := x.Request.(*EventTicketPerson_TicketNumber); ok {
			return x.TicketNumber
		}
	}
	return nil
}

func (x *EventTicketPerson) GetPerson() *io.Person {
	if x != nil {
		return x.Person
	}
	return nil
}

type isEventTicketPerson_Request interface {
	isEventTicketPerson_Request()
}

type EventTicketPerson_TicketId struct {
	// @tag: validateGeneric:"required_without=TicketNumber OrderNumber"
	TicketId *io.Id `protobuf:"bytes,1,opt,name=ticketId,proto3,oneof" validateGeneric:"required_without=TicketNumber OrderNumber"`
}

type EventTicketPerson_TicketNumber struct {
	// @tag: validateGeneric:"omitempty"
	TicketNumber *TicketNumberRequest `protobuf:"bytes,2,opt,name=ticketNumber,proto3,oneof" validateGeneric:"omitempty"`
}

func (*EventTicketPerson_TicketId) isEventTicketPerson_Request() {}

func (*EventTicketPerson_TicketNumber) isEventTicketPerson_Request() {}

var File_io_event_tickets_ticket_proto protoreflect.FileDescriptor

var file_io_event_tickets_ticket_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x69, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x69, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x69, 0x6f,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x69, 0x6f, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x69, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x71, 0x0a, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x04,
	0x0a, 0x02, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x84, 0x0a, 0x0a,
	0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52,
	0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x4e, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x72, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x48, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x70, 0x61, 0x73,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x05,
	0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xc5, 0x01, 0x92, 0x41,
	0xc1, 0x01, 0x0a, 0xbe, 0x01, 0x2a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x32, 0x9b, 0x01,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x26, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x2c, 0x20, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x20, 0x70, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0xd2, 0x01, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0xd2, 0x01, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x69, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x64,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x61, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x3f, 0x0a, 0x09, 0x46, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0xf9, 0x0d, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x12,
	0x39, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x47, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x47, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x69, 0x73, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x69, 0x73, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x69, 0x73, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x41, 0x69, 0x73, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6f, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6f, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x6f, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x44, 0x6f, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x55, 0x52, 0x4c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x55, 0x52, 0x4c, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x55, 0x52, 0x4c, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56,
	0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4d, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x64, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x23, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x23, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x13, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x57, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x3e, 0x0a, 0x1a, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x23, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x23, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xe2,
	0x03, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6b,
	0x0a, 0x1a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x56,
	0x65, 0x6e, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79,
	0x56, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x01, 0x52,
	0x1a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x56, 0x65,
	0x6e, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0c, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x3a, 0x5c, 0x92, 0x41, 0x59, 0x0a, 0x57, 0x2a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x28, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xd2,
	0x01, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0xd2, 0x01,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x79, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x55, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x3a, 0x68, 0x92, 0x41, 0x65, 0x0a, 0x63, 0x2a, 0x12, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x42, 0x79, 0x20, 0x49, 0x64, 0x32,
	0x2c, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0xd2, 0x01, 0x07,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x08, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x55,
	0x69, 0x64, 0xd2, 0x01, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x83,
	0x01, 0x0a, 0x13, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xd1, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x11, 0x72,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x47, 0x0a, 0x07, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x07, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6f, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d,
	0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x52, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x5d, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22,
	0x96, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xb5, 0x0b, 0x0a, 0x13, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65,
	0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x74, 0x52, 0x08, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x09, 0x66,
	0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x46,
	0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x61, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e,
	0x0a, 0x11, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x72, 0x65, 0x64,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x48,
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xd1, 0x01, 0x92,
	0x41, 0xcd, 0x01, 0x0a, 0xca, 0x01, 0x2a, 0x12, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x28,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x76, 0x65, 0x72, 0x29, 0x32, 0x9b, 0x01, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x26, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2c,
	0x20, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x20, 0x70, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0xd2, 0x01, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0xd2, 0x01, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55, 0x69, 0x64,
	0x22, 0xce, 0x09, 0x0a, 0x12, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x61,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x74,
	0x52, 0x08, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x61,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x46, 0x61,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x11,
	0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x72, 0x65, 0x64, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x0f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x87, 0x01, 0x92, 0x41, 0x83,
	0x01, 0x0a, 0x80, 0x01, 0x2a, 0x14, 0x49, 0x73, 0x73, 0x75, 0x65, 0x20, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x47, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0xd2, 0x01, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0xd2, 0x01, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xbe, 0x02, 0x0a, 0x16, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x3a, 0x8b, 0x01, 0x92, 0x41, 0x87, 0x01, 0x0a, 0x84, 0x01, 0x2a, 0x19,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x20, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x49, 0x64, 0x73, 0x32, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x64, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2c,
	0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x55, 0x49, 0x44,
	0x73, 0x2e, 0x22, 0x88, 0x02, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x69, 0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbe, 0x01,
	0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x69, 0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x2a, 0x3f,
	0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x53, 0x53, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x42,
	0x6f, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5a, 0x32, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b,
	0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0xaa, 0x02, 0x19, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_event_tickets_ticket_proto_rawDescOnce sync.Once
	file_io_event_tickets_ticket_proto_rawDescData []byte
)

func file_io_event_tickets_ticket_proto_rawDescGZIP() []byte {
	file_io_event_tickets_ticket_proto_rawDescOnce.Do(func() {
		file_io_event_tickets_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_event_tickets_ticket_proto_rawDesc), len(file_io_event_tickets_ticket_proto_rawDesc)))
	})
	return file_io_event_tickets_ticket_proto_rawDescData
}

var file_io_event_tickets_ticket_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_io_event_tickets_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_io_event_tickets_ticket_proto_goTypes = []any{
	(TicketStatus)(0),                       // 0: event_tickets.TicketStatus
	(*TicketId)(nil),                        // 1: event_tickets.TicketId
	(*TicketNumber)(nil),                    // 2: event_tickets.TicketNumber
	(*Ticket)(nil),                          // 3: event_tickets.Ticket
	(*ValidateDetails)(nil),                 // 4: event_tickets.ValidateDetails
	(*RedemptionDetails)(nil),               // 5: event_tickets.RedemptionDetails
	(*FaceValue)(nil),                       // 6: event_tickets.FaceValue
	(*Seat)(nil),                            // 7: event_tickets.Seat
	(*TicketListRequest)(nil),               // 8: event_tickets.TicketListRequest
	(*EventFilterByVenueAndStart)(nil),      // 9: event_tickets.EventFilterByVenueAndStart
	(*TicketNumberRequest)(nil),             // 10: event_tickets.TicketNumberRequest
	(*OrderNumberRequest)(nil),              // 11: event_tickets.OrderNumberRequest
	(*RedeemByOrderNumber)(nil),             // 12: event_tickets.RedeemByOrderNumber
	(*Tickets)(nil),                         // 13: event_tickets.Tickets
	(*TicketPassBundles)(nil),               // 14: event_tickets.TicketPassBundles
	(*ValidateTicketRequest)(nil),           // 15: event_tickets.ValidateTicketRequest
	(*ValidateTicketResponse)(nil),          // 16: event_tickets.ValidateTicketResponse
	(*RedeemTicketRequest)(nil),             // 17: event_tickets.RedeemTicketRequest
	(*TicketLimitedFields)(nil),             // 18: event_tickets.TicketLimitedFields
	(*IssueTicketRequest)(nil),              // 19: event_tickets.IssueTicketRequest
	(*IssueTicketResponseIds)(nil),          // 20: event_tickets.IssueTicketResponseIds
	(*EventTicketPassRequest)(nil),          // 21: event_tickets.EventTicketPassRequest
	(*EventTicketPerson)(nil),               // 22: event_tickets.EventTicketPerson
	nil,                                     // 23: event_tickets.Ticket.MetaDataEntry
	nil,                                     // 24: event_tickets.TicketLimitedFields.MetaDataEntry
	nil,                                     // 25: event_tickets.IssueTicketRequest.MetaDataEntry
	(*Event)(nil),                           // 26: event_tickets.Event
	(*TicketType)(nil),                      // 27: event_tickets.TicketType
	(*io.Person)(nil),                       // 28: io.Person
	(io.Toggle)(0),                          // 29: io.Toggle
	(*timestamppb.Timestamp)(nil),           // 30: google.protobuf.Timestamp
	(*io.PassOverrides)(nil),                // 31: io.PassOverrides
	(*io.Metadata)(nil),                     // 32: io.Metadata
	(*io.LocalizedString)(nil),              // 33: io.LocalizedString
	(*io.Filters)(nil),                      // 34: io.Filters
	(*io.PassBundle)(nil),                   // 35: io.PassBundle
	(*ProductionLimitedFieldsResponse)(nil), // 36: event_tickets.ProductionLimitedFieldsResponse
	(*EventLimitedFieldsResponse)(nil),      // 37: event_tickets.EventLimitedFieldsResponse
	(*VenueLimitedFieldsResponse)(nil),      // 38: event_tickets.VenueLimitedFieldsResponse
	(*TicketTypeLimitedFields)(nil),         // 39: event_tickets.TicketTypeLimitedFields
	(*EventLimitedFieldsRequest)(nil),       // 40: event_tickets.EventLimitedFieldsRequest
	(*io.Id)(nil),                           // 41: io.Id
	(io.PassBundleFormat)(0),                // 42: io.PassBundleFormat
}
var file_io_event_tickets_ticket_proto_depIdxs = []int32{
	2,  // 0: event_tickets.TicketId.ticketNumber:type_name -> event_tickets.TicketNumber
	26, // 1: event_tickets.Ticket.event:type_name -> event_tickets.Event
	27, // 2: event_tickets.Ticket.ticketType:type_name -> event_tickets.TicketType
	7,  // 3: event_tickets.Ticket.seatInfo:type_name -> event_tickets.Seat
	6,  // 4: event_tickets.Ticket.faceValue:type_name -> event_tickets.FaceValue
	28, // 5: event_tickets.Ticket.person:type_name -> io.Person
	23, // 6: event_tickets.Ticket.metaData:type_name -> event_tickets.Ticket.MetaDataEntry
	29, // 7: event_tickets.Ticket.optOut:type_name -> io.Toggle
	0,  // 8: event_tickets.Ticket.status:type_name -> event_tickets.TicketStatus
	30, // 9: event_tickets.Ticket.expiryDate:type_name -> google.protobuf.Timestamp
	5,  // 10: event_tickets.Ticket.redemptionDetails:type_name -> event_tickets.RedemptionDetails
	4,  // 11: event_tickets.Ticket.validateDetails:type_name -> event_tickets.ValidateDetails
	31, // 12: event_tickets.Ticket.passOverrides:type_name -> io.PassOverrides
	32, // 13: event_tickets.Ticket.passMetaData:type_name -> io.Metadata
	30, // 14: event_tickets.Ticket.created:type_name -> google.protobuf.Timestamp
	30, // 15: event_tickets.Ticket.updated:type_name -> google.protobuf.Timestamp
	30, // 16: event_tickets.ValidateDetails.validateDate:type_name -> google.protobuf.Timestamp
	30, // 17: event_tickets.RedemptionDetails.redemptionDate:type_name -> google.protobuf.Timestamp
	33, // 18: event_tickets.Seat.localizedSeat:type_name -> io.LocalizedString
	33, // 19: event_tickets.Seat.localizedRow:type_name -> io.LocalizedString
	33, // 20: event_tickets.Seat.localizedSection:type_name -> io.LocalizedString
	33, // 21: event_tickets.Seat.localizedGate:type_name -> io.LocalizedString
	33, // 22: event_tickets.Seat.localizedIdentifier:type_name -> io.LocalizedString
	33, // 23: event_tickets.Seat.localizedDescription:type_name -> io.LocalizedString
	33, // 24: event_tickets.Seat.localizedType:type_name -> io.LocalizedString
	33, // 25: event_tickets.Seat.localizedLevel:type_name -> io.LocalizedString
	33, // 26: event_tickets.Seat.localizedAisle:type_name -> io.LocalizedString
	33, // 27: event_tickets.Seat.localizedDoor:type_name -> io.LocalizedString
	33, // 28: event_tickets.Seat.localizedPortalURL:type_name -> io.LocalizedString
	33, // 29: event_tickets.Seat.localizedVenueEntrance:type_name -> io.LocalizedString
	33, // 30: event_tickets.Seat.localizedAdmissionLevel:type_name -> io.LocalizedString
	33, // 31: event_tickets.Seat.localizedAdmissionLevelAbbreviation:type_name -> io.LocalizedString
	33, // 32: event_tickets.Seat.localizedEntranceDescription:type_name -> io.LocalizedString
	33, // 33: event_tickets.Seat.localizedRoom:type_name -> io.LocalizedString
	33, // 34: event_tickets.Seat.localizedAdditionalTicketAttributes:type_name -> io.LocalizedString
	9,  // 35: event_tickets.TicketListRequest.eventFilterByVenueAndStart:type_name -> event_tickets.EventFilterByVenueAndStart
	34, // 36: event_tickets.TicketListRequest.filters:type_name -> io.Filters
	30, // 37: event_tickets.EventFilterByVenueAndStart.scheduledStartDate:type_name -> google.protobuf.Timestamp
	5,  // 38: event_tickets.RedeemByOrderNumber.redemptionDetails:type_name -> event_tickets.RedemptionDetails
	18, // 39: event_tickets.Tickets.tickets:type_name -> event_tickets.TicketLimitedFields
	35, // 40: event_tickets.TicketPassBundles.tickets:type_name -> io.PassBundle
	1,  // 41: event_tickets.ValidateTicketRequest.ticket:type_name -> event_tickets.TicketId
	4,  // 42: event_tickets.ValidateTicketRequest.validateDetails:type_name -> event_tickets.ValidateDetails
	3,  // 43: event_tickets.ValidateTicketResponse.ticket:type_name -> event_tickets.Ticket
	1,  // 44: event_tickets.RedeemTicketRequest.ticket:type_name -> event_tickets.TicketId
	5,  // 45: event_tickets.RedeemTicketRequest.redemptionDetails:type_name -> event_tickets.RedemptionDetails
	36, // 46: event_tickets.TicketLimitedFields.production:type_name -> event_tickets.ProductionLimitedFieldsResponse
	37, // 47: event_tickets.TicketLimitedFields.event:type_name -> event_tickets.EventLimitedFieldsResponse
	38, // 48: event_tickets.TicketLimitedFields.venue:type_name -> event_tickets.VenueLimitedFieldsResponse
	39, // 49: event_tickets.TicketLimitedFields.ticketType:type_name -> event_tickets.TicketTypeLimitedFields
	7,  // 50: event_tickets.TicketLimitedFields.seatInfo:type_name -> event_tickets.Seat
	6,  // 51: event_tickets.TicketLimitedFields.faceValue:type_name -> event_tickets.FaceValue
	28, // 52: event_tickets.TicketLimitedFields.person:type_name -> io.Person
	24, // 53: event_tickets.TicketLimitedFields.metaData:type_name -> event_tickets.TicketLimitedFields.MetaDataEntry
	0,  // 54: event_tickets.TicketLimitedFields.status:type_name -> event_tickets.TicketStatus
	30, // 55: event_tickets.TicketLimitedFields.expiryDate:type_name -> google.protobuf.Timestamp
	5,  // 56: event_tickets.TicketLimitedFields.redemptionDetails:type_name -> event_tickets.RedemptionDetails
	4,  // 57: event_tickets.TicketLimitedFields.validateDetails:type_name -> event_tickets.ValidateDetails
	31, // 58: event_tickets.TicketLimitedFields.passOverrides:type_name -> io.PassOverrides
	32, // 59: event_tickets.TicketLimitedFields.passMetaData:type_name -> io.Metadata
	30, // 60: event_tickets.TicketLimitedFields.created:type_name -> google.protobuf.Timestamp
	30, // 61: event_tickets.TicketLimitedFields.updated:type_name -> google.protobuf.Timestamp
	40, // 62: event_tickets.IssueTicketRequest.event:type_name -> event_tickets.EventLimitedFieldsRequest
	7,  // 63: event_tickets.IssueTicketRequest.seatInfo:type_name -> event_tickets.Seat
	6,  // 64: event_tickets.IssueTicketRequest.faceValue:type_name -> event_tickets.FaceValue
	28, // 65: event_tickets.IssueTicketRequest.person:type_name -> io.Person
	25, // 66: event_tickets.IssueTicketRequest.metaData:type_name -> event_tickets.IssueTicketRequest.MetaDataEntry
	0,  // 67: event_tickets.IssueTicketRequest.status:type_name -> event_tickets.TicketStatus
	30, // 68: event_tickets.IssueTicketRequest.expiryDate:type_name -> google.protobuf.Timestamp
	5,  // 69: event_tickets.IssueTicketRequest.redemptionDetails:type_name -> event_tickets.RedemptionDetails
	4,  // 70: event_tickets.IssueTicketRequest.validateDetails:type_name -> event_tickets.ValidateDetails
	31, // 71: event_tickets.IssueTicketRequest.passOverrides:type_name -> io.PassOverrides
	32, // 72: event_tickets.IssueTicketRequest.passMetaData:type_name -> io.Metadata
	30, // 73: event_tickets.IssueTicketRequest.created:type_name -> google.protobuf.Timestamp
	30, // 74: event_tickets.IssueTicketRequest.updated:type_name -> google.protobuf.Timestamp
	41, // 75: event_tickets.EventTicketPassRequest.ticketId:type_name -> io.Id
	10, // 76: event_tickets.EventTicketPassRequest.ticketNumber:type_name -> event_tickets.TicketNumberRequest
	11, // 77: event_tickets.EventTicketPassRequest.orderNumber:type_name -> event_tickets.OrderNumberRequest
	42, // 78: event_tickets.EventTicketPassRequest.format:type_name -> io.PassBundleFormat
	41, // 79: event_tickets.EventTicketPerson.ticketId:type_name -> io.Id
	10, // 80: event_tickets.EventTicketPerson.ticketNumber:type_name -> event_tickets.TicketNumberRequest
	28, // 81: event_tickets.EventTicketPerson.person:type_name -> io.Person
	82, // [82:82] is the sub-list for method output_type
	82, // [82:82] is the sub-list for method input_type
	82, // [82:82] is the sub-list for extension type_name
	82, // [82:82] is the sub-list for extension extendee
	0,  // [0:82] is the sub-list for field type_name
}

func init() { file_io_event_tickets_ticket_proto_init() }
func file_io_event_tickets_ticket_proto_init() {
	if File_io_event_tickets_ticket_proto != nil {
		return
	}
	file_io_event_tickets_venue_proto_init()
	file_io_event_tickets_event_proto_init()
	file_io_event_tickets_ticket_type_proto_init()
	file_io_event_tickets_production_proto_init()
	file_io_event_tickets_ticket_proto_msgTypes[0].OneofWrappers = []any{
		(*TicketId_TicketId)(nil),
		(*TicketId_TicketNumber)(nil),
	}
	file_io_event_tickets_ticket_proto_msgTypes[7].OneofWrappers = []any{
		(*TicketListRequest_ProductionId)(nil),
		(*TicketListRequest_ProductionUid)(nil),
		(*TicketListRequest_EventId)(nil),
		(*TicketListRequest_EventFilterByVenueAndStart)(nil),
		(*TicketListRequest_TicketTypeId)(nil),
		(*TicketListRequest_TicketTypeUid)(nil),
	}
	file_io_event_tickets_ticket_proto_msgTypes[18].OneofWrappers = []any{
		(*IssueTicketRequest_EventId)(nil),
		(*IssueTicketRequest_Event)(nil),
	}
	file_io_event_tickets_ticket_proto_msgTypes[20].OneofWrappers = []any{
		(*EventTicketPassRequest_TicketId)(nil),
		(*EventTicketPassRequest_TicketNumber)(nil),
		(*EventTicketPassRequest_OrderNumber)(nil),
	}
	file_io_event_tickets_ticket_proto_msgTypes[21].OneofWrappers = []any{
		(*EventTicketPerson_TicketId)(nil),
		(*EventTicketPerson_TicketNumber)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_event_tickets_ticket_proto_rawDesc), len(file_io_event_tickets_ticket_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_event_tickets_ticket_proto_goTypes,
		DependencyIndexes: file_io_event_tickets_ticket_proto_depIdxs,
		EnumInfos:         file_io_event_tickets_ticket_proto_enumTypes,
		MessageInfos:      file_io_event_tickets_ticket_proto_msgTypes,
	}.Build()
	File_io_event_tickets_ticket_proto = out.File
	file_io_event_tickets_ticket_proto_goTypes = nil
	file_io_event_tickets_ticket_proto_depIdxs = nil
}
