//*
// Venue indicates where an event takes place.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/event_tickets/venue.proto

package event_tickets

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Venue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated venue id (22 characters).
	// @tag: validateGeneric:"required_without=Uid" validateCreate:"isdefault" validateUpdate:"required_without=Uid"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required_without=Uid" validateCreate:"isdefault" validateUpdate:"required_without=Uid"`
	// User generated venue id; unique within the user account.
	// @tag: validateGeneric:"required_without=Id" validateCreate:"omitempty" validateUpdate:"required_without=Id"
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty" validateGeneric:"required_without=Id" validateCreate:"omitempty" validateUpdate:"required_without=Id"`
	// The venue name.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// Localized venue name.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedName *io.LocalizedString `protobuf:"bytes,4,opt,name=localizedName,proto3" json:"localizedName,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The venue address.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// Localized venue address.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedAddress *io.LocalizedString `protobuf:"bytes,6,opt,name=localizedAddress,proto3" json:"localizedAddress,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Timezone applied for the event dates. e.g. America/New_York, Asia/Singapore, Europe/London.
	// @tag: validateGeneric:"omitempty,ianaTimeZone" validateCreate:"required,ianaTimeZone" validateUpdate:"required,ianaTimeZone"
	Timezone string `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty" validateGeneric:"omitempty,ianaTimeZone" validateCreate:"required,ianaTimeZone" validateUpdate:"required,ianaTimeZone"`
	// Optional GPS location details of the venue. If provided will be embedded into the ticket as the first GPS location.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	GpsCoords []*io.GPSLocation `protobuf:"bytes,8,rep,name=gpsCoords,proto3" json:"gpsCoords,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Event URLs integrate with Apple's poster event ticket (NFC and iCloud Binding required) to create a rich event guide on the back of the pass. If you do not have access to an NFC certificate, you should use links in the pass design to provide similar information.
	EventUrls *EventUrls `protobuf:"bytes,11,opt,name=eventUrls,proto3" json:"eventUrls,omitempty"`
	// Room where the event will take place (if applicable). Used only by Apple poster Event Tickets.
	Room string `protobuf:"bytes,12,opt,name=room,proto3" json:"room,omitempty"`
	// The date the venue was created. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created,proto3" json:"created,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The date the venue updated. Not writable.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Updated       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated,proto3" json:"updated,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Venue) Reset() {
	*x = Venue{}
	mi := &file_io_event_tickets_venue_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Venue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Venue) ProtoMessage() {}

func (x *Venue) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_venue_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Venue.ProtoReflect.Descriptor instead.
func (*Venue) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_venue_proto_rawDescGZIP(), []int{0}
}

func (x *Venue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Venue) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Venue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Venue) GetLocalizedName() *io.LocalizedString {
	if x != nil {
		return x.LocalizedName
	}
	return nil
}

func (x *Venue) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Venue) GetLocalizedAddress() *io.LocalizedString {
	if x != nil {
		return x.LocalizedAddress
	}
	return nil
}

func (x *Venue) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Venue) GetGpsCoords() []*io.GPSLocation {
	if x != nil {
		return x.GpsCoords
	}
	return nil
}

func (x *Venue) GetEventUrls() *EventUrls {
	if x != nil {
		return x.EventUrls
	}
	return nil
}

func (x *Venue) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *Venue) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Venue) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type EventUrls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A URL that launches the user into the issuer's flow for selling their current ticket. We recommend providing as deep a link as possible into the sale flow.
	// @tag: validateGeneric="omitempty,http_url"
	SellURL string `protobuf:"bytes,1,opt,name=sellURL,proto3" json:"sellURL,omitempty"`
	// A URL that launches the user into the issuer's flow for transferring the current ticket. We recommend providing as deep a link as possible into the transfer flow.
	// @tag: validateGeneric="omitempty,http_url"
	TransferURL string `protobuf:"bytes,2,opt,name=transferURL,proto3" json:"transferURL,omitempty"`
	// A URL that links out to the bag policy of the venue.
	// @tag: validateGeneric="omitempty,http_url"
	BagPolicyURL string `protobuf:"bytes,3,opt,name=bagPolicyURL,proto3" json:"bagPolicyURL,omitempty"`
	// A URL that links out to the food ordering page for the venue. This can be in-seat food delivery, pre-order for pickup at a vendor, or any other appropriate food ordering service.
	// @tag: validateGeneric="omitempty,http_url"
	OrderFoodURL string `protobuf:"bytes,4,opt,name=orderFoodURL,proto3" json:"orderFoodURL,omitempty"`
	// A URL that links to order merchandise for the specific event. This can be a ship-to-home ecommerce site, a pre-order to pickup at the venue, or any other appropriate merchandise flow.
	// @tag: validateGeneric="omitempty,http_url"
	MerchandiseURL string `protobuf:"bytes,5,opt,name=merchandiseURL,proto3" json:"merchandiseURL,omitempty"`
	// A URL that links to any documentation you have about public or private transit to the venue.
	// @tag: validateGeneric="omitempty,http_url"
	TransitInformationURL string `protobuf:"bytes,6,opt,name=transitInformationURL,proto3" json:"transitInformationURL,omitempty"`
	// A URL that links to any information you have about parking.
	// @tag: validateGeneric="omitempty,http_url"
	ParkingInformationURL string `protobuf:"bytes,7,opt,name=parkingInformationURL,proto3" json:"parkingInformationURL,omitempty"`
	// A URL that links to any content you have about getting to the venue.
	// @tag: validateGeneric="omitempty,http_url"
	DirectionsInformationURL string `protobuf:"bytes,8,opt,name=directionsInformationURL,proto3" json:"directionsInformationURL,omitempty"`
	// A URL that links to your or the venue's accessibility content.
	// @tag: validateGeneric="omitempty,http_url"
	AccessibilityURL string `protobuf:"bytes,9,opt,name=accessibilityURL,proto3" json:"accessibilityURL,omitempty"`
	// A URL that links to your experience to buy or access pre-paid parking, or general parking information.
	// @tag: validateGeneric="omitempty,http_url"
	PurchaseParkingURL string `protobuf:"bytes,10,opt,name=purchaseParkingURL,proto3" json:"purchaseParkingURL,omitempty"`
	// A URL that can link to experiences that you can add on to your ticket (e.g. loaded value, upgrades, etc.), or access your existing pre-purchased or pre-loaded add-on experiences, including any necessary links to QR or barcodes to access the experience.
	// @tag: validateGeneric="omitempty,http_url"
	AddOnURL string `protobuf:"bytes,11,opt,name=addOnURL,proto3" json:"addOnURL,omitempty"`
	// The preferred email address to contact the venue, event, or issuer.
	// @tag: validateGeneric="omitempty,email"
	ContactVenueEmail string `protobuf:"bytes,12,opt,name=contactVenueEmail,proto3" json:"contactVenueEmail,omitempty"`
	// A URL that links the user to the website of the venue, event, or issuer.
	// @tag: validateGeneric="omitempty,http_url"
	ContactVenueWebsite string `protobuf:"bytes,13,opt,name=contactVenueWebsite,proto3" json:"contactVenueWebsite,omitempty"`
	// The phone number that can be used to contact the venue, event, or issuer.
	ContactVenuePhoneNumber string `protobuf:"bytes,14,opt,name=contactVenuePhoneNumber,proto3" json:"contactVenuePhoneNumber,omitempty"`
	// A URL to a portal with additional event information. If a deep link is required, provide it in the Seat Information object which will override a value in the Venue object.
	// @tag: validateGeneric:"omitempty,http_url"
	PortalUrl     string `protobuf:"bytes,15,opt,name=portalUrl,proto3" json:"portalUrl,omitempty" validateGeneric:"omitempty,http_url"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventUrls) Reset() {
	*x = EventUrls{}
	mi := &file_io_event_tickets_venue_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUrls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUrls) ProtoMessage() {}

func (x *EventUrls) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_venue_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUrls.ProtoReflect.Descriptor instead.
func (*EventUrls) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_venue_proto_rawDescGZIP(), []int{1}
}

func (x *EventUrls) GetSellURL() string {
	if x != nil {
		return x.SellURL
	}
	return ""
}

func (x *EventUrls) GetTransferURL() string {
	if x != nil {
		return x.TransferURL
	}
	return ""
}

func (x *EventUrls) GetBagPolicyURL() string {
	if x != nil {
		return x.BagPolicyURL
	}
	return ""
}

func (x *EventUrls) GetOrderFoodURL() string {
	if x != nil {
		return x.OrderFoodURL
	}
	return ""
}

func (x *EventUrls) GetMerchandiseURL() string {
	if x != nil {
		return x.MerchandiseURL
	}
	return ""
}

func (x *EventUrls) GetTransitInformationURL() string {
	if x != nil {
		return x.TransitInformationURL
	}
	return ""
}

func (x *EventUrls) GetParkingInformationURL() string {
	if x != nil {
		return x.ParkingInformationURL
	}
	return ""
}

func (x *EventUrls) GetDirectionsInformationURL() string {
	if x != nil {
		return x.DirectionsInformationURL
	}
	return ""
}

func (x *EventUrls) GetAccessibilityURL() string {
	if x != nil {
		return x.AccessibilityURL
	}
	return ""
}

func (x *EventUrls) GetPurchaseParkingURL() string {
	if x != nil {
		return x.PurchaseParkingURL
	}
	return ""
}

func (x *EventUrls) GetAddOnURL() string {
	if x != nil {
		return x.AddOnURL
	}
	return ""
}

func (x *EventUrls) GetContactVenueEmail() string {
	if x != nil {
		return x.ContactVenueEmail
	}
	return ""
}

func (x *EventUrls) GetContactVenueWebsite() string {
	if x != nil {
		return x.ContactVenueWebsite
	}
	return ""
}

func (x *EventUrls) GetContactVenuePhoneNumber() string {
	if x != nil {
		return x.ContactVenuePhoneNumber
	}
	return ""
}

func (x *EventUrls) GetPortalUrl() string {
	if x != nil {
		return x.PortalUrl
	}
	return ""
}

type VenueLimitedFieldsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated venue id (22 characters).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User generated venue id; unique within the user account.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// The venue name.
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VenueLimitedFieldsResponse) Reset() {
	*x = VenueLimitedFieldsResponse{}
	mi := &file_io_event_tickets_venue_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VenueLimitedFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VenueLimitedFieldsResponse) ProtoMessage() {}

func (x *VenueLimitedFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_event_tickets_venue_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VenueLimitedFieldsResponse.ProtoReflect.Descriptor instead.
func (*VenueLimitedFieldsResponse) Descriptor() ([]byte, []int) {
	return file_io_event_tickets_venue_proto_rawDescGZIP(), []int{2}
}

func (x *VenueLimitedFieldsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VenueLimitedFieldsResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *VenueLimitedFieldsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_io_event_tickets_venue_proto protoreflect.FileDescriptor

var file_io_event_tickets_venue_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x69, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x04, 0x0a, 0x05, 0x56, 0x65, 0x6e, 0x75,
	0x65, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x92,
	0x41, 0x02, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x2d, 0x0a, 0x09, 0x67, 0x70, 0x73, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x67, 0x70, 0x73, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x36, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x63, 0x92, 0x41, 0x60, 0x0a, 0x5e, 0x2a, 0x05, 0x56, 0x65,
	0x6e, 0x75, 0x65, 0x32, 0x35, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74,
	0x61, 0x6b, 0x65, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xd2, 0x01, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xd2, 0x01, 0x0c, 0x69, 0x61,
	0x6e, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x8f, 0x05, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x6c,
	0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x55,
	0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x55, 0x52,
	0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x46, 0x6f, 0x6f, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6f, 0x64, 0x55, 0x52, 0x4c, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x73,
	0x65, 0x55, 0x52, 0x4c, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c,
	0x12, 0x3a, 0x0a, 0x18, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x2a, 0x0a, 0x10,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x52, 0x4c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x52, 0x4c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x4f,
	0x6e, 0x55, 0x52, 0x4c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x4f,
	0x6e, 0x55, 0x52, 0x4c, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x56,
	0x65, 0x6e, 0x75, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x56, 0x65, 0x6e,
	0x75, 0x65, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x56,
	0x65, 0x6e, 0x75, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x56, 0x65,
	0x6e, 0x75, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x22, 0xa3, 0x01, 0x0a,
	0x1a, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x11, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x20,
	0x28, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x76, 0x65, 0x72, 0x29, 0x32, 0x35, 0x56, 0x65, 0x6e,
	0x75, 0x65, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x42, 0x6f, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69,
	0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5a, 0x32, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b,
	0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0xaa, 0x02, 0x19, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69,
	0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_event_tickets_venue_proto_rawDescOnce sync.Once
	file_io_event_tickets_venue_proto_rawDescData []byte
)

func file_io_event_tickets_venue_proto_rawDescGZIP() []byte {
	file_io_event_tickets_venue_proto_rawDescOnce.Do(func() {
		file_io_event_tickets_venue_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_event_tickets_venue_proto_rawDesc), len(file_io_event_tickets_venue_proto_rawDesc)))
	})
	return file_io_event_tickets_venue_proto_rawDescData
}

var file_io_event_tickets_venue_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_io_event_tickets_venue_proto_goTypes = []any{
	(*Venue)(nil),                      // 0: event_tickets.Venue
	(*EventUrls)(nil),                  // 1: event_tickets.EventUrls
	(*VenueLimitedFieldsResponse)(nil), // 2: event_tickets.VenueLimitedFieldsResponse
	(*io.LocalizedString)(nil),         // 3: io.LocalizedString
	(*io.GPSLocation)(nil),             // 4: io.GPSLocation
	(*timestamppb.Timestamp)(nil),      // 5: google.protobuf.Timestamp
}
var file_io_event_tickets_venue_proto_depIdxs = []int32{
	3, // 0: event_tickets.Venue.localizedName:type_name -> io.LocalizedString
	3, // 1: event_tickets.Venue.localizedAddress:type_name -> io.LocalizedString
	4, // 2: event_tickets.Venue.gpsCoords:type_name -> io.GPSLocation
	1, // 3: event_tickets.Venue.eventUrls:type_name -> event_tickets.EventUrls
	5, // 4: event_tickets.Venue.created:type_name -> google.protobuf.Timestamp
	5, // 5: event_tickets.Venue.updated:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_io_event_tickets_venue_proto_init() }
func file_io_event_tickets_venue_proto_init() {
	if File_io_event_tickets_venue_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_event_tickets_venue_proto_rawDesc), len(file_io_event_tickets_venue_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_event_tickets_venue_proto_goTypes,
		DependencyIndexes: file_io_event_tickets_venue_proto_depIdxs,
		MessageInfos:      file_io_event_tickets_venue_proto_msgTypes,
	}.Build()
	File_io_event_tickets_venue_proto = out.File
	file_io_event_tickets_venue_proto_goTypes = nil
	file_io_event_tickets_venue_proto_depIdxs = nil
}
