//*
// Integrations
//
// You can hook a third party application with the PassKit platform.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/common/integration.proto

package io

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Turn on and off the integration.
type IntegrationStatus int32

const (
	IntegrationStatus_INTEGRATION_STATUS_NONE IntegrationStatus = 0
	// Turn off the integration.
	IntegrationStatus_INTEGRATION_DISABLED IntegrationStatus = 1
	// Turn on the integration.
	IntegrationStatus_INTEGRATION_ACTIVE IntegrationStatus = 2
	// The status assigned by PassKit when the account or record is not satisfying the requirements to conduct integration process.
	IntegrationStatus_INTEGRATION_SUSPENDED IntegrationStatus = 3
)

// Enum value maps for IntegrationStatus.
var (
	IntegrationStatus_name = map[int32]string{
		0: "INTEGRATION_STATUS_NONE",
		1: "INTEGRATION_DISABLED",
		2: "INTEGRATION_ACTIVE",
		3: "INTEGRATION_SUSPENDED",
	}
	IntegrationStatus_value = map[string]int32{
		"INTEGRATION_STATUS_NONE": 0,
		"INTEGRATION_DISABLED":    1,
		"INTEGRATION_ACTIVE":      2,
		"INTEGRATION_SUSPENDED":   3,
	}
)

func (x IntegrationStatus) Enum() *IntegrationStatus {
	p := new(IntegrationStatus)
	*p = x
	return p
}

func (x IntegrationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegrationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_integration_proto_enumTypes[0].Descriptor()
}

func (IntegrationStatus) Type() protoreflect.EnumType {
	return &file_io_common_integration_proto_enumTypes[0]
}

func (x IntegrationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegrationStatus.Descriptor instead.
func (IntegrationStatus) EnumDescriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{0}
}

// Configuration of the third party app which can be integrated with PassKit.
type ConfigurationType int32

const (
	ConfigurationType_CONFIGURATION_NONE ConfigurationType = 0
	ConfigurationType_WEBHOOK            ConfigurationType = 1
	ConfigurationType_DB_MYSQL           ConfigurationType = 2
	ConfigurationType_ZOHO               ConfigurationType = 3
	ConfigurationType_BRAZE              ConfigurationType = 4
	ConfigurationType_CODEREADR          ConfigurationType = 5
	ConfigurationType_ZAPIER             ConfigurationType = 6
	ConfigurationType_MAILCHIMP          ConfigurationType = 7
	ConfigurationType_SPROUT             ConfigurationType = 8
	ConfigurationType_TESSITURA          ConfigurationType = 9
	ConfigurationType_ITERABLE           ConfigurationType = 10
	ConfigurationType_MOENGAGE           ConfigurationType = 11
	ConfigurationType_ORACLE_RESPONSYS   ConfigurationType = 12
	ConfigurationType__CONFIG_TYPE_1     ConfigurationType = 100
)

// Enum value maps for ConfigurationType.
var (
	ConfigurationType_name = map[int32]string{
		0:   "CONFIGURATION_NONE",
		1:   "WEBHOOK",
		2:   "DB_MYSQL",
		3:   "ZOHO",
		4:   "BRAZE",
		5:   "CODEREADR",
		6:   "ZAPIER",
		7:   "MAILCHIMP",
		8:   "SPROUT",
		9:   "TESSITURA",
		10:  "ITERABLE",
		11:  "MOENGAGE",
		12:  "ORACLE_RESPONSYS",
		100: "_CONFIG_TYPE_1",
	}
	ConfigurationType_value = map[string]int32{
		"CONFIGURATION_NONE": 0,
		"WEBHOOK":            1,
		"DB_MYSQL":           2,
		"ZOHO":               3,
		"BRAZE":              4,
		"CODEREADR":          5,
		"ZAPIER":             6,
		"MAILCHIMP":          7,
		"SPROUT":             8,
		"TESSITURA":          9,
		"ITERABLE":           10,
		"MOENGAGE":           11,
		"ORACLE_RESPONSYS":   12,
		"_CONFIG_TYPE_1":     100,
	}
)

func (x ConfigurationType) Enum() *ConfigurationType {
	p := new(ConfigurationType)
	*p = x
	return p
}

func (x ConfigurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_integration_proto_enumTypes[1].Descriptor()
}

func (ConfigurationType) Type() protoreflect.EnumType {
	return &file_io_common_integration_proto_enumTypes[1]
}

func (x ConfigurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationType.Descriptor instead.
func (ConfigurationType) EnumDescriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{1}
}

// IntegrationType allows to select the timing of integration occurs and the order of data processing.
type IntegrationType int32

const (
	IntegrationType_INTEGRATION_TYPE_NONE IntegrationType = 0
	// Trigger event occurs on a third party platform which triggers action (chain of events) inside the PassKit. E.g. Database update triggers PassKit to issue a pass.
	IntegrationType_SOURCE_INTEGRATION IntegrationType = 1
	// Pass holder data is processed by a third party application first then its outcome and original data are stored in PassKit.
	IntegrationType_HOOK_BEFORE_OBJECT_RECORD_CREATION IntegrationType = 4
	// A hook event occurs after pass holder's data is created on PassKit.
	IntegrationType_HOOK_AFTER_OBJECT_RECORD_CREATION IntegrationType = 8
	// A hook event occurs after pass holder record creation and before pass issue.
	IntegrationType_HOOK_BEFORE_PASS_ISSUE IntegrationType = 16
	// A hook event occurs after pass issue.
	IntegrationType_HOOK_AFTER_PASS_ISSUE IntegrationType = 32
	// A hook event occurs after pass has been installed on mobile.
	IntegrationType_HOOK_AFTER_PASS_INSTALL IntegrationType = 64
	// A hook event occurs after pass has been uninstalled from mobile.
	IntegrationType_HOOK_AFTER_PASS_UNINSTALL IntegrationType = 128
	// A hook event occurs before pass holder's record is updated on PassKit.
	IntegrationType_HOOK_BEFORE_OBJECT_RECORD_UPDATE IntegrationType = 256
	// A hook event occurs after pass holder's record is updated on PassKit.
	IntegrationType_HOOK_AFTER_OBJECT_RECORD_UPDATE IntegrationType = 512
	// A hook event occurs before the pass is updated. This includes changes in dynamic information (e.g. displayName), generic information (e.g. links, legal disclaimer), pass design (e.g. background color).
	IntegrationType_HOOK_BEFORE_PASS_RECORD_UPDATE IntegrationType = 1024
	// A hook event occurs after the pass is updated. This includes changes in dynamic information (e.g. displayName), generic information (e.g. links, legal disclaimer), pass design (e.g. background color).
	IntegrationType_HOOK_AFTER_PASS_RECORD_UPDATE IntegrationType = 2048
	// A hook event occurs before the information on the pass is updated.
	IntegrationType_HOOK_BEFORE_PASS_UPDATE IntegrationType = 4096
	// A hook event occurs after the information on the pass is updated.
	IntegrationType_HOOK_AFTER_PASS_UPDATE IntegrationType = 8192
	// A hook event occurs before a pass is deleted.
	IntegrationType_HOOK_BEFORE_PASS_RECORD_DELETE IntegrationType = 16384
	// A hook event occurs after a pass is deleted.
	IntegrationType_HOOK_AFTER_PASS_RECORD_DELETE IntegrationType = 32768
)

// Enum value maps for IntegrationType.
var (
	IntegrationType_name = map[int32]string{
		0:     "INTEGRATION_TYPE_NONE",
		1:     "SOURCE_INTEGRATION",
		4:     "HOOK_BEFORE_OBJECT_RECORD_CREATION",
		8:     "HOOK_AFTER_OBJECT_RECORD_CREATION",
		16:    "HOOK_BEFORE_PASS_ISSUE",
		32:    "HOOK_AFTER_PASS_ISSUE",
		64:    "HOOK_AFTER_PASS_INSTALL",
		128:   "HOOK_AFTER_PASS_UNINSTALL",
		256:   "HOOK_BEFORE_OBJECT_RECORD_UPDATE",
		512:   "HOOK_AFTER_OBJECT_RECORD_UPDATE",
		1024:  "HOOK_BEFORE_PASS_RECORD_UPDATE",
		2048:  "HOOK_AFTER_PASS_RECORD_UPDATE",
		4096:  "HOOK_BEFORE_PASS_UPDATE",
		8192:  "HOOK_AFTER_PASS_UPDATE",
		16384: "HOOK_BEFORE_PASS_RECORD_DELETE",
		32768: "HOOK_AFTER_PASS_RECORD_DELETE",
	}
	IntegrationType_value = map[string]int32{
		"INTEGRATION_TYPE_NONE":              0,
		"SOURCE_INTEGRATION":                 1,
		"HOOK_BEFORE_OBJECT_RECORD_CREATION": 4,
		"HOOK_AFTER_OBJECT_RECORD_CREATION":  8,
		"HOOK_BEFORE_PASS_ISSUE":             16,
		"HOOK_AFTER_PASS_ISSUE":              32,
		"HOOK_AFTER_PASS_INSTALL":            64,
		"HOOK_AFTER_PASS_UNINSTALL":          128,
		"HOOK_BEFORE_OBJECT_RECORD_UPDATE":   256,
		"HOOK_AFTER_OBJECT_RECORD_UPDATE":    512,
		"HOOK_BEFORE_PASS_RECORD_UPDATE":     1024,
		"HOOK_AFTER_PASS_RECORD_UPDATE":      2048,
		"HOOK_BEFORE_PASS_UPDATE":            4096,
		"HOOK_AFTER_PASS_UPDATE":             8192,
		"HOOK_BEFORE_PASS_RECORD_DELETE":     16384,
		"HOOK_AFTER_PASS_RECORD_DELETE":      32768,
	}
)

func (x IntegrationType) Enum() *IntegrationType {
	p := new(IntegrationType)
	*p = x
	return p
}

func (x IntegrationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegrationType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_integration_proto_enumTypes[2].Descriptor()
}

func (IntegrationType) Type() protoreflect.EnumType {
	return &file_io_common_integration_proto_enumTypes[2]
}

func (x IntegrationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegrationType.Descriptor instead.
func (IntegrationType) EnumDescriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{2}
}

// ProtocolIntgType contains hooks for protocol methods.
type ProtocolIntgType int32

const (
	ProtocolIntgType_PROTOCOL_INTG_TYPE_NONE ProtocolIntgType = 0
	// Member 0x1 - 0x400
	ProtocolIntgType_HOOK_BEFORE_MEMBER_UPDATE_POINTS ProtocolIntgType = 1
	ProtocolIntgType_HOOK_AFTER_MEMBER_UPDATE_POINTS  ProtocolIntgType = 4
	ProtocolIntgType_HOOK_BEFORE_MEMBER_TIER_UPDATE   ProtocolIntgType = 8
	ProtocolIntgType_HOOK_AFTER_MEMBER_TIER_UPDATE    ProtocolIntgType = 16
	ProtocolIntgType_HOOK_BEFORE_MEMBER_CHECK_IN      ProtocolIntgType = 32
	ProtocolIntgType_HOOK_AFTER_MEMBER_CHECK_IN       ProtocolIntgType = 64
	ProtocolIntgType_HOOK_BEFORE_MEMBER_CHECK_OUT     ProtocolIntgType = 128
	ProtocolIntgType_HOOK_AFTER_MEMBER_CHECK_OUT      ProtocolIntgType = 256
	// Coupon 0x800 - 0x100000
	ProtocolIntgType_HOOK_BEFORE_COUPON_REDEEM       ProtocolIntgType = 2048
	ProtocolIntgType_HOOK_AFTER_COUPON_REDEEM        ProtocolIntgType = 4096
	ProtocolIntgType_HOOK_BEFORE_UPDATE_COUPON_OFFER ProtocolIntgType = 8192
	ProtocolIntgType_HOOK_AFTER_UPDATE_COUPON_OFFER  ProtocolIntgType = 16384
	ProtocolIntgType_HOOK_BEFORE_CREATE_COUPON_OFFER ProtocolIntgType = 32768
	ProtocolIntgType_HOOK_AFTER_CREATE_COUPON_OFFER  ProtocolIntgType = 65536
	// Generic 0x200000 - 0x40000000
	ProtocolIntgType_HOOK_BEFORE_UPDATE_PII ProtocolIntgType = 2097152
	ProtocolIntgType_HOOK_AFTER_UPDATE_PII  ProtocolIntgType = 4194304
)

// Enum value maps for ProtocolIntgType.
var (
	ProtocolIntgType_name = map[int32]string{
		0:       "PROTOCOL_INTG_TYPE_NONE",
		1:       "HOOK_BEFORE_MEMBER_UPDATE_POINTS",
		4:       "HOOK_AFTER_MEMBER_UPDATE_POINTS",
		8:       "HOOK_BEFORE_MEMBER_TIER_UPDATE",
		16:      "HOOK_AFTER_MEMBER_TIER_UPDATE",
		32:      "HOOK_BEFORE_MEMBER_CHECK_IN",
		64:      "HOOK_AFTER_MEMBER_CHECK_IN",
		128:     "HOOK_BEFORE_MEMBER_CHECK_OUT",
		256:     "HOOK_AFTER_MEMBER_CHECK_OUT",
		2048:    "HOOK_BEFORE_COUPON_REDEEM",
		4096:    "HOOK_AFTER_COUPON_REDEEM",
		8192:    "HOOK_BEFORE_UPDATE_COUPON_OFFER",
		16384:   "HOOK_AFTER_UPDATE_COUPON_OFFER",
		32768:   "HOOK_BEFORE_CREATE_COUPON_OFFER",
		65536:   "HOOK_AFTER_CREATE_COUPON_OFFER",
		2097152: "HOOK_BEFORE_UPDATE_PII",
		4194304: "HOOK_AFTER_UPDATE_PII",
	}
	ProtocolIntgType_value = map[string]int32{
		"PROTOCOL_INTG_TYPE_NONE":          0,
		"HOOK_BEFORE_MEMBER_UPDATE_POINTS": 1,
		"HOOK_AFTER_MEMBER_UPDATE_POINTS":  4,
		"HOOK_BEFORE_MEMBER_TIER_UPDATE":   8,
		"HOOK_AFTER_MEMBER_TIER_UPDATE":    16,
		"HOOK_BEFORE_MEMBER_CHECK_IN":      32,
		"HOOK_AFTER_MEMBER_CHECK_IN":       64,
		"HOOK_BEFORE_MEMBER_CHECK_OUT":     128,
		"HOOK_AFTER_MEMBER_CHECK_OUT":      256,
		"HOOK_BEFORE_COUPON_REDEEM":        2048,
		"HOOK_AFTER_COUPON_REDEEM":         4096,
		"HOOK_BEFORE_UPDATE_COUPON_OFFER":  8192,
		"HOOK_AFTER_UPDATE_COUPON_OFFER":   16384,
		"HOOK_BEFORE_CREATE_COUPON_OFFER":  32768,
		"HOOK_AFTER_CREATE_COUPON_OFFER":   65536,
		"HOOK_BEFORE_UPDATE_PII":           2097152,
		"HOOK_AFTER_UPDATE_PII":            4194304,
	}
)

func (x ProtocolIntgType) Enum() *ProtocolIntgType {
	p := new(ProtocolIntgType)
	*p = x
	return p
}

func (x ProtocolIntgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolIntgType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_integration_proto_enumTypes[3].Descriptor()
}

func (ProtocolIntgType) Type() protoreflect.EnumType {
	return &file_io_common_integration_proto_enumTypes[3]
}

func (x ProtocolIntgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolIntgType.Descriptor instead.
func (ProtocolIntgType) EnumDescriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{3}
}

// Name of pass event the third part app can subscribe to.
type PassEventId int32

const (
	// The pass payload will not be sent.
	PassEventId_PASS_EVENT_NONE PassEventId = 0
	// The pass payload will be sent to destination when pass record is created and issued.
	PassEventId_PASS_EVENT_RECORD_CREATED PassEventId = 1
	// The pass payload will be sent to destination when pass is installed on a mobile device.
	PassEventId_PASS_EVENT_INSTALLED PassEventId = 2
	// The pass payload will be sent to destination when pass record or contents have been updated.
	PassEventId_PASS_EVENT_RECORD_UPDATED PassEventId = 4
	// The pass payload will be sent to destination when pass is uninstalled from a mobile device.
	PassEventId_PASS_EVENT_UNINSTALLED PassEventId = 8
	// The pass payload will be sent to destination when pass is invalidated or expired. When pass is invalidated or expired, a pass will lose its barcode and pass content cannot be updated anymore.
	PassEventId_PASS_EVENT_INVALIDATED PassEventId = 16
	// The pass payload will be sent to destination when pass record is deleted from the PassKit database.
	PassEventId_PASS_EVENT_RECORD_DELETED PassEventId = 32
)

// Enum value maps for PassEventId.
var (
	PassEventId_name = map[int32]string{
		0:  "PASS_EVENT_NONE",
		1:  "PASS_EVENT_RECORD_CREATED",
		2:  "PASS_EVENT_INSTALLED",
		4:  "PASS_EVENT_RECORD_UPDATED",
		8:  "PASS_EVENT_UNINSTALLED",
		16: "PASS_EVENT_INVALIDATED",
		32: "PASS_EVENT_RECORD_DELETED",
	}
	PassEventId_value = map[string]int32{
		"PASS_EVENT_NONE":           0,
		"PASS_EVENT_RECORD_CREATED": 1,
		"PASS_EVENT_INSTALLED":      2,
		"PASS_EVENT_RECORD_UPDATED": 4,
		"PASS_EVENT_UNINSTALLED":    8,
		"PASS_EVENT_INVALIDATED":    16,
		"PASS_EVENT_RECORD_DELETED": 32,
	}
)

func (x PassEventId) Enum() *PassEventId {
	p := new(PassEventId)
	*p = x
	return p
}

func (x PassEventId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PassEventId) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_integration_proto_enumTypes[4].Descriptor()
}

func (PassEventId) Type() protoreflect.EnumType {
	return &file_io_common_integration_proto_enumTypes[4]
}

func (x PassEventId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PassEventId.Descriptor instead.
func (PassEventId) EnumDescriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{4}
}

// Protocol specific events for the Membership protocol.
type MembershipEventId int32

const (
	MembershipEventId_MEMBER_EVENT_NONE MembershipEventId = 0
	// The member payload will be sent to destination when member record is created.
	MembershipEventId_MEMBER_EVENT_ENROLLED MembershipEventId = 1
	// The member payload will be sent to destination when any of member field is updated.
	MembershipEventId_MEMBER_EVENT_UPDATED MembershipEventId = 2
)

// Enum value maps for MembershipEventId.
var (
	MembershipEventId_name = map[int32]string{
		0: "MEMBER_EVENT_NONE",
		1: "MEMBER_EVENT_ENROLLED",
		2: "MEMBER_EVENT_UPDATED",
	}
	MembershipEventId_value = map[string]int32{
		"MEMBER_EVENT_NONE":     0,
		"MEMBER_EVENT_ENROLLED": 1,
		"MEMBER_EVENT_UPDATED":  2,
	}
)

func (x MembershipEventId) Enum() *MembershipEventId {
	p := new(MembershipEventId)
	*p = x
	return p
}

func (x MembershipEventId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipEventId) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_integration_proto_enumTypes[5].Descriptor()
}

func (MembershipEventId) Type() protoreflect.EnumType {
	return &file_io_common_integration_proto_enumTypes[5]
}

func (x MembershipEventId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipEventId.Descriptor instead.
func (MembershipEventId) EnumDescriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{5}
}

// Protocol specific events for the Single Use Coupon protocol.
type CouponEventId int32

const (
	CouponEventId_COUPON_EVENT_NONE CouponEventId = 0
	// Triggered when coupon is issued.
	CouponEventId_COUPON_EVENT_CREATED CouponEventId = 1
	// Triggered when coupon is redeemed.
	CouponEventId_COUPON_EVENT_REDEEMED CouponEventId = 2
	// Triggered when any of coupon field is updated.
	CouponEventId_COUPON_EVENT_UPDATED CouponEventId = 4
	// Triggered when coupon record is deleted.
	CouponEventId_COUPON_EVENT_DELETED CouponEventId = 8
)

// Enum value maps for CouponEventId.
var (
	CouponEventId_name = map[int32]string{
		0: "COUPON_EVENT_NONE",
		1: "COUPON_EVENT_CREATED",
		2: "COUPON_EVENT_REDEEMED",
		4: "COUPON_EVENT_UPDATED",
		8: "COUPON_EVENT_DELETED",
	}
	CouponEventId_value = map[string]int32{
		"COUPON_EVENT_NONE":     0,
		"COUPON_EVENT_CREATED":  1,
		"COUPON_EVENT_REDEEMED": 2,
		"COUPON_EVENT_UPDATED":  4,
		"COUPON_EVENT_DELETED":  8,
	}
)

func (x CouponEventId) Enum() *CouponEventId {
	p := new(CouponEventId)
	*p = x
	return p
}

func (x CouponEventId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CouponEventId) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_integration_proto_enumTypes[6].Descriptor()
}

func (CouponEventId) Type() protoreflect.EnumType {
	return &file_io_common_integration_proto_enumTypes[6]
}

func (x CouponEventId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CouponEventId.Descriptor instead.
func (CouponEventId) EnumDescriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{6}
}

// Action method is an api call method (post, put, delete) used when data get integrated with the third party application.
// This enum will be useful if topic is not directly produced by debezium and want to know the original debezium event operation.
type ActionMethod int32

const (
	ActionMethod_METHOD_NONE ActionMethod = 0
	// Invokes POST request to create a record the third party app.
	ActionMethod_METHOD_POST ActionMethod = 1
	// Invokes PUT request to update existing record on the third party app.
	ActionMethod_METHOD_PUT ActionMethod = 2
	// Invokes DELETE request to delete existing record on the third party app.
	ActionMethod_METHOD_DELETE ActionMethod = 3
)

// Enum value maps for ActionMethod.
var (
	ActionMethod_name = map[int32]string{
		0: "METHOD_NONE",
		1: "METHOD_POST",
		2: "METHOD_PUT",
		3: "METHOD_DELETE",
	}
	ActionMethod_value = map[string]int32{
		"METHOD_NONE":   0,
		"METHOD_POST":   1,
		"METHOD_PUT":    2,
		"METHOD_DELETE": 3,
	}
)

func (x ActionMethod) Enum() *ActionMethod {
	p := new(ActionMethod)
	*p = x
	return p
}

func (x ActionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_integration_proto_enumTypes[7].Descriptor()
}

func (ActionMethod) Type() protoreflect.EnumType {
	return &file_io_common_integration_proto_enumTypes[7]
}

func (x ActionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionMethod.Descriptor instead.
func (ActionMethod) EnumDescriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{7}
}

// Array of subscribing membership protocol events.
type MembershipEventIds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []MembershipEventId    `protobuf:"varint,1,rep,packed,name=ids,proto3,enum=io.MembershipEventId" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MembershipEventIds) Reset() {
	*x = MembershipEventIds{}
	mi := &file_io_common_integration_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MembershipEventIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipEventIds) ProtoMessage() {}

func (x *MembershipEventIds) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipEventIds.ProtoReflect.Descriptor instead.
func (*MembershipEventIds) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{0}
}

func (x *MembershipEventIds) GetIds() []MembershipEventId {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Array of subscribing coupon protocol events.
type CouponEventIds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []CouponEventId        `protobuf:"varint,1,rep,packed,name=ids,proto3,enum=io.CouponEventId" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CouponEventIds) Reset() {
	*x = CouponEventIds{}
	mi := &file_io_common_integration_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CouponEventIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponEventIds) ProtoMessage() {}

func (x *CouponEventIds) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponEventIds.ProtoReflect.Descriptor instead.
func (*CouponEventIds) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{1}
}

func (x *CouponEventIds) GetIds() []CouponEventId {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Integration object contains configuration data to integrate PassKit application with third party application.
type IntegrationConfigs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The uuid for the class object.
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	ClassId string `protobuf:"bytes,1,opt,name=classId,proto3" json:"classId,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// Key string is enum of ConfigurationType (e.g. WEBHOOK, DB_MYSQL, ZOHO). Value string is a json string of configuration object.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	Configurations map[int32]string `protobuf:"bytes,2,rep,name=configurations,proto3" json:"configurations,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IntegrationConfigs) Reset() {
	*x = IntegrationConfigs{}
	mi := &file_io_common_integration_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntegrationConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationConfigs) ProtoMessage() {}

func (x *IntegrationConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationConfigs.ProtoReflect.Descriptor instead.
func (*IntegrationConfigs) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{2}
}

func (x *IntegrationConfigs) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *IntegrationConfigs) GetConfigurations() map[int32]string {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type ProtocolIdInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The protocol which the class object belongs to.
	// @tag: validateGeneric:"required" validateUpdate:"required"
	Protocol PassProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty" validateGeneric:"required" validateUpdate:"required"`
	// The class object Id which integration belongs to.
	// @tag: validateGeneric:"required" validateUpdate:"required"
	ClassId       string `protobuf:"bytes,2,opt,name=classId,proto3" json:"classId,omitempty" validateGeneric:"required" validateUpdate:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtocolIdInput) Reset() {
	*x = ProtocolIdInput{}
	mi := &file_io_common_integration_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtocolIdInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolIdInput) ProtoMessage() {}

func (x *ProtocolIdInput) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolIdInput.ProtoReflect.Descriptor instead.
func (*ProtocolIdInput) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{3}
}

func (x *ProtocolIdInput) GetProtocol() PassProtocol {
	if x != nil {
		return x.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

func (x *ProtocolIdInput) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

type SubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The protocol which the class object belongs to.
	// @tag: validateGeneric:"required" validateUpdate:"required"
	Protocol PassProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty" validateGeneric:"required" validateUpdate:"required"`
	// The class object Id which integration belongs to.
	// @tag: validateGeneric:"required" validateUpdate:"required"
	SubscriptionId string `protobuf:"bytes,2,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty" validateGeneric:"required" validateUpdate:"required"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscriptionRequest) Reset() {
	*x = SubscriptionRequest{}
	mi := &file_io_common_integration_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest) ProtoMessage() {}

func (x *SubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{4}
}

func (x *SubscriptionRequest) GetProtocol() PassProtocol {
	if x != nil {
		return x.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

func (x *SubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type SubscriptionRequestByClassId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The protocol which the class object belongs to.
	// @tag: validateGeneric:"required" validateUpdate:"required"
	Protocol PassProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty" validateGeneric:"required" validateUpdate:"required"`
	// The uuid for the class object. For Membership it is ProgramId, Coupon is CampaignId, Flight is FlightId.
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	ClassId string `protobuf:"bytes,2,opt,name=classId,proto3" json:"classId,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// @tag: validateGeneric:"required" validateUpdate:"required"
	ConfigType ConfigurationType `protobuf:"varint,3,opt,name=configType,proto3,enum=io.ConfigurationType" json:"configType,omitempty" validateGeneric:"required" validateUpdate:"required"`
	// Identifies protocol specific event type.
	// @tag: validateGeneric:"required" validateUpdate:"required"
	//
	// Types that are valid to be assigned to EventId:
	//
	//	*SubscriptionRequestByClassId_PassEventId
	//	*SubscriptionRequestByClassId_MembershipEventId
	//	*SubscriptionRequestByClassId_CouponEventId
	EventId       isSubscriptionRequestByClassId_EventId `protobuf_oneof:"eventId" validateGeneric:"required" validateUpdate:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionRequestByClassId) Reset() {
	*x = SubscriptionRequestByClassId{}
	mi := &file_io_common_integration_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionRequestByClassId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequestByClassId) ProtoMessage() {}

func (x *SubscriptionRequestByClassId) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequestByClassId.ProtoReflect.Descriptor instead.
func (*SubscriptionRequestByClassId) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{5}
}

func (x *SubscriptionRequestByClassId) GetProtocol() PassProtocol {
	if x != nil {
		return x.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

func (x *SubscriptionRequestByClassId) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *SubscriptionRequestByClassId) GetConfigType() ConfigurationType {
	if x != nil {
		return x.ConfigType
	}
	return ConfigurationType_CONFIGURATION_NONE
}

func (x *SubscriptionRequestByClassId) GetEventId() isSubscriptionRequestByClassId_EventId {
	if x != nil {
		return x.EventId
	}
	return nil
}

func (x *SubscriptionRequestByClassId) GetPassEventId() PassEventId {
	if x != nil {
		if x, ok := x.EventId.(*SubscriptionRequestByClassId_PassEventId); ok {
			return x.PassEventId
		}
	}
	return PassEventId_PASS_EVENT_NONE
}

func (x *SubscriptionRequestByClassId) GetMembershipEventId() MembershipEventId {
	if x != nil {
		if x, ok := x.EventId.(*SubscriptionRequestByClassId_MembershipEventId); ok {
			return x.MembershipEventId
		}
	}
	return MembershipEventId_MEMBER_EVENT_NONE
}

func (x *SubscriptionRequestByClassId) GetCouponEventId() CouponEventId {
	if x != nil {
		if x, ok := x.EventId.(*SubscriptionRequestByClassId_CouponEventId); ok {
			return x.CouponEventId
		}
	}
	return CouponEventId_COUPON_EVENT_NONE
}

type isSubscriptionRequestByClassId_EventId interface {
	isSubscriptionRequestByClassId_EventId()
}

type SubscriptionRequestByClassId_PassEventId struct {
	// Identifies pass event type.
	// @tag: validateGeneric:"omitempty" validateUpdate:"omitempty"
	PassEventId PassEventId `protobuf:"varint,4,opt,name=passEventId,proto3,enum=io.PassEventId,oneof" validateGeneric:"omitempty" validateUpdate:"omitempty"`
}

type SubscriptionRequestByClassId_MembershipEventId struct {
	// For membership protocol subscription.
	// @tag: validateGeneric:"omitempty" validateUpdate:"omitempty"
	MembershipEventId MembershipEventId `protobuf:"varint,5,opt,name=membershipEventId,proto3,enum=io.MembershipEventId,oneof" validateGeneric:"omitempty" validateUpdate:"omitempty"`
}

type SubscriptionRequestByClassId_CouponEventId struct {
	// For coupon protocol subscription.
	// @tag: validateGeneric:"omitempty" validateUpdate:"omitempty"
	CouponEventId CouponEventId `protobuf:"varint,6,opt,name=couponEventId,proto3,enum=io.CouponEventId,oneof" validateGeneric:"omitempty" validateUpdate:"omitempty"`
}

func (*SubscriptionRequestByClassId_PassEventId) isSubscriptionRequestByClassId_EventId() {}

func (*SubscriptionRequestByClassId_MembershipEventId) isSubscriptionRequestByClassId_EventId() {}

func (*SubscriptionRequestByClassId_CouponEventId) isSubscriptionRequestByClassId_EventId() {}

// Sets up source and destination field
type FieldMapping struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Field string key of destination data field.
	// @tag: validateGeneric:"required"
	DestinationFieldKey string `protobuf:"bytes,1,opt,name=destinationFieldKey,proto3" json:"destinationFieldKey,omitempty" validateGeneric:"required"`
	// Field string key of destination data field.
	// @tag: validateGeneric:"required"
	DestinationFieldDataType DataType `protobuf:"varint,2,opt,name=destinationFieldDataType,proto3,enum=io.DataType" json:"destinationFieldDataType,omitempty" validateGeneric:"required"`
	// If true, when value is empty default data will be used.
	// @tag: validateGeneric:"omitempty"
	IsRequired bool `protobuf:"varint,3,opt,name=isRequired,proto3" json:"isRequired,omitempty" validateGeneric:"omitempty"`
	// Unique name of data field which becomes the data source.
	// @tag: validateGeneric:"required"
	SourceFieldUniqueName string `protobuf:"bytes,4,opt,name=sourceFieldUniqueName,proto3" json:"sourceFieldUniqueName,omitempty" validateGeneric:"required"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FieldMapping) Reset() {
	*x = FieldMapping{}
	mi := &file_io_common_integration_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMapping) ProtoMessage() {}

func (x *FieldMapping) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMapping.ProtoReflect.Descriptor instead.
func (*FieldMapping) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{6}
}

func (x *FieldMapping) GetDestinationFieldKey() string {
	if x != nil {
		return x.DestinationFieldKey
	}
	return ""
}

func (x *FieldMapping) GetDestinationFieldDataType() DataType {
	if x != nil {
		return x.DestinationFieldDataType
	}
	return DataType_DATA_TYPE_NONE
}

func (x *FieldMapping) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *FieldMapping) GetSourceFieldUniqueName() string {
	if x != nil {
		return x.SourceFieldUniqueName
	}
	return ""
}

type WebhookConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The destination url for PassKit backend to send the data to.
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	TargetUrl    string       `protobuf:"bytes,1,opt,name=targetUrl,proto3" json:"targetUrl,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	ActionMethod ActionMethod `protobuf:"varint,2,opt,name=actionMethod,proto3,enum=io.ActionMethod" json:"actionMethod,omitempty"`
	// Set source fields (fields used within the PassKit platform) and destination fields (fields set on the third party app).
	FieldMapping *FieldMapping `protobuf:"bytes,3,opt,name=fieldMapping,proto3" json:"fieldMapping,omitempty"`
	// Used to sign the webhook payload.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	SigningSecret string `protobuf:"bytes,4,opt,name=signingSecret,proto3" json:"signingSecret,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebhookConfig) Reset() {
	*x = WebhookConfig{}
	mi := &file_io_common_integration_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebhookConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookConfig) ProtoMessage() {}

func (x *WebhookConfig) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookConfig.ProtoReflect.Descriptor instead.
func (*WebhookConfig) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{7}
}

func (x *WebhookConfig) GetTargetUrl() string {
	if x != nil {
		return x.TargetUrl
	}
	return ""
}

func (x *WebhookConfig) GetActionMethod() ActionMethod {
	if x != nil {
		return x.ActionMethod
	}
	return ActionMethod_METHOD_NONE
}

func (x *WebhookConfig) GetFieldMapping() *FieldMapping {
	if x != nil {
		return x.FieldMapping
	}
	return nil
}

func (x *WebhookConfig) GetSigningSecret() string {
	if x != nil {
		return x.SigningSecret
	}
	return ""
}

type SinkSubscriptionPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassEventId enum string to identify trigger event type
	Event         string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Pass          *Pass  `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SinkSubscriptionPayload) Reset() {
	*x = SinkSubscriptionPayload{}
	mi := &file_io_common_integration_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SinkSubscriptionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkSubscriptionPayload) ProtoMessage() {}

func (x *SinkSubscriptionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkSubscriptionPayload.ProtoReflect.Descriptor instead.
func (*SinkSubscriptionPayload) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{8}
}

func (x *SinkSubscriptionPayload) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *SinkSubscriptionPayload) GetPass() *Pass {
	if x != nil {
		return x.Pass
	}
	return nil
}

type SinkSubscription struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The uuid for the sink subscription config.
	// @tag: validateGeneric:"required" validateCreate:"-" validateUpdate:"required"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required" validateCreate:"-" validateUpdate:"required"`
	// The uuid for the class object.
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	ClassId string `protobuf:"bytes,2,opt,name=classId,proto3" json:"classId,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// The protocol of class object which owns this sink subscription.
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	Protocol PassProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// Identifies pass event type you are subscribing to.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	PassEventId []PassEventId `protobuf:"varint,4,rep,packed,name=passEventId,proto3,enum=io.PassEventId" json:"passEventId,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Status IntegrationStatus `protobuf:"varint,5,opt,name=status,proto3,enum=io.IntegrationStatus" json:"status,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	ConfigType ConfigurationType `protobuf:"varint,6,opt,name=configType,proto3,enum=io.ConfigurationType" json:"configType,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// Configuration details for the integration.
	Configuration string `protobuf:"bytes,7,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// Identifies protocol specific event type you are subscribing to.
	//
	// Types that are valid to be assigned to ProtocolEventId:
	//
	//	*SinkSubscription_MembershipEvents
	//	*SinkSubscription_CouponEvents
	ProtocolEventId isSinkSubscription_ProtocolEventId `protobuf_oneof:"protocolEventId"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SinkSubscription) Reset() {
	*x = SinkSubscription{}
	mi := &file_io_common_integration_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SinkSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkSubscription) ProtoMessage() {}

func (x *SinkSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkSubscription.ProtoReflect.Descriptor instead.
func (*SinkSubscription) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{9}
}

func (x *SinkSubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SinkSubscription) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *SinkSubscription) GetProtocol() PassProtocol {
	if x != nil {
		return x.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

func (x *SinkSubscription) GetPassEventId() []PassEventId {
	if x != nil {
		return x.PassEventId
	}
	return nil
}

func (x *SinkSubscription) GetStatus() IntegrationStatus {
	if x != nil {
		return x.Status
	}
	return IntegrationStatus_INTEGRATION_STATUS_NONE
}

func (x *SinkSubscription) GetConfigType() ConfigurationType {
	if x != nil {
		return x.ConfigType
	}
	return ConfigurationType_CONFIGURATION_NONE
}

func (x *SinkSubscription) GetConfiguration() string {
	if x != nil {
		return x.Configuration
	}
	return ""
}

func (x *SinkSubscription) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SinkSubscription) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SinkSubscription) GetProtocolEventId() isSinkSubscription_ProtocolEventId {
	if x != nil {
		return x.ProtocolEventId
	}
	return nil
}

func (x *SinkSubscription) GetMembershipEvents() *MembershipEventIds {
	if x != nil {
		if x, ok := x.ProtocolEventId.(*SinkSubscription_MembershipEvents); ok {
			return x.MembershipEvents
		}
	}
	return nil
}

func (x *SinkSubscription) GetCouponEvents() *CouponEventIds {
	if x != nil {
		if x, ok := x.ProtocolEventId.(*SinkSubscription_CouponEvents); ok {
			return x.CouponEvents
		}
	}
	return nil
}

type isSinkSubscription_ProtocolEventId interface {
	isSinkSubscription_ProtocolEventId()
}

type SinkSubscription_MembershipEvents struct {
	// For membership protocol subscription.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	MembershipEvents *MembershipEventIds `protobuf:"bytes,10,opt,name=membershipEvents,proto3,oneof" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
}

type SinkSubscription_CouponEvents struct {
	// For coupon protocol subscription.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	CouponEvents *CouponEventIds `protobuf:"bytes,11,opt,name=couponEvents,proto3,oneof" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
}

func (*SinkSubscription_MembershipEvents) isSinkSubscription_ProtocolEventId() {}

func (*SinkSubscription_CouponEvents) isSinkSubscription_ProtocolEventId() {}

type DynamicApiInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The uuid for the class object.
	// @tag: validateGeneric:"required"
	ClassId string `protobuf:"bytes,1,opt,name=classId,proto3" json:"classId,omitempty" validateGeneric:"required"`
	// @tag: validateGeneric:"required"
	Request       *DynamicApiRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DynamicApiInput) Reset() {
	*x = DynamicApiInput{}
	mi := &file_io_common_integration_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicApiInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicApiInput) ProtoMessage() {}

func (x *DynamicApiInput) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicApiInput.ProtoReflect.Descriptor instead.
func (*DynamicApiInput) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{10}
}

func (x *DynamicApiInput) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *DynamicApiInput) GetRequest() *DynamicApiRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type DynamicApiRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of an api call.
	// @tag: validateGeneric:"required"
	RequestName string `protobuf:"bytes,1,opt,name=requestName,proto3" json:"requestName,omitempty" validateGeneric:"required"`
	// Variables placed within the path of an endpoint.
	// @tag: validateGeneric:"omitempty"
	Params map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validateGeneric:"omitempty"`
	// Json string of payload data for the request body.
	// @tag: validateGeneric:"omitempty"
	Payload       string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty" validateGeneric:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DynamicApiRequest) Reset() {
	*x = DynamicApiRequest{}
	mi := &file_io_common_integration_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicApiRequest) ProtoMessage() {}

func (x *DynamicApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicApiRequest.ProtoReflect.Descriptor instead.
func (*DynamicApiRequest) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{11}
}

func (x *DynamicApiRequest) GetRequestName() string {
	if x != nil {
		return x.RequestName
	}
	return ""
}

func (x *DynamicApiRequest) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DynamicApiRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type DynamicApiResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Raw response body.
	ResponseBody []byte `protobuf:"bytes,1,opt,name=responseBody,proto3" json:"responseBody,omitempty"`
	// Http status code.
	Status        int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DynamicApiResponse) Reset() {
	*x = DynamicApiResponse{}
	mi := &file_io_common_integration_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicApiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicApiResponse) ProtoMessage() {}

func (x *DynamicApiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_integration_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicApiResponse.ProtoReflect.Descriptor instead.
func (*DynamicApiResponse) Descriptor() ([]byte, []int) {
	return file_io_common_integration_proto_rawDescGZIP(), []int{12}
}

func (x *DynamicApiResponse) GetResponseBody() []byte {
	if x != nil {
		return x.ResponseBody
	}
	return nil
}

func (x *DynamicApiResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_io_common_integration_proto protoreflect.FileDescriptor

var file_io_common_integration_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x69,
	0x6f, 0x1a, 0x14, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a,
	0x12, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x0e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x23,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6f,
	0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69,
	0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xdf, 0x02, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x73,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x34,
	0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x4d, 0x0a, 0x17, 0x53, 0x69,
	0x6e, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x70,
	0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x22, 0xc2, 0x06, 0x0a, 0x10, 0x53, 0x69,
	0x6e, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6f,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0b, 0x70, 0x61,
	0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x8f, 0x02, 0x92, 0x41, 0x8b, 0x02,
	0x0a, 0x88, 0x02, 0x2a, 0x11, 0x53, 0x69, 0x6e, 0x6b, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xe0, 0x01, 0x53, 0x65, 0x74, 0x20, 0x75, 0x70, 0x20,
	0x61, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x73, 0x69, 0x6e, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x53, 0x69, 0x6e, 0x6b, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x20, 0x50, 0x61,
	0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x20, 0x45, 0x2e, 0x67, 0x2e, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x20, 0x61, 0x20, 0x70, 0x61, 0x73, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x6f,
	0x6e, 0x20, 0x61, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0xd2, 0x01, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb5,
	0x01, 0x0a, 0x0f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x69, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x57, 0x92,
	0x41, 0x54, 0x0a, 0x52, 0x2a, 0x11, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x32, 0x33, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x70, 0x69, 0x20, 0x63, 0x61, 0x6c,
	0x6c, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x20, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0xd2, 0x01, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0x99, 0x02, 0x0a, 0x11, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x70, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x52,
	0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a, 0x13, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20, 0x41,
	0x70, 0x69, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x28, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0xd2, 0x01, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x59, 0x92, 0x41, 0x56, 0x0a, 0x54, 0x2a, 0x14, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20, 0x41, 0x50, 0x49, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x3c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x70, 0x69, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x2a, 0x7d, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0xe6, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x42,
	0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x4f, 0x48, 0x4f,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x52, 0x41, 0x5a, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x45, 0x41, 0x44, 0x52, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x5a, 0x41, 0x50, 0x49, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x49, 0x4c,
	0x43, 0x48, 0x49, 0x4d, 0x50, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x50, 0x52, 0x4f, 0x55,
	0x54, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x53, 0x53, 0x49, 0x54, 0x55, 0x52, 0x41,
	0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x54, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0a,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x45, 0x4e, 0x47, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x59, 0x53, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x10, 0x64, 0x2a, 0xa3, 0x04, 0x0a, 0x0f, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x26, 0x0a, 0x22, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x4f, 0x4f, 0x4b, 0x5f,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x1a,
	0x0a, 0x16, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f,
	0x4f, 0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x53,
	0x53, 0x55, 0x45, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x46,
	0x54, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c,
	0x10, 0x40, 0x12, 0x1e, 0x0a, 0x19, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10,
	0x80, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52,
	0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x80, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x48, 0x4f, 0x4f,
	0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x80, 0x04, 0x12,
	0x23, 0x0a, 0x1e, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x80, 0x08, 0x12, 0x22, 0x0a, 0x1d, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x46, 0x54,
	0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x80, 0x10, 0x12, 0x1c, 0x0a, 0x17, 0x48, 0x4f, 0x4f, 0x4b,
	0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x80, 0x20, 0x12, 0x1b, 0x0a, 0x16, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41,
	0x46, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x80, 0x40, 0x12, 0x24, 0x0a, 0x1e, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x45, 0x46, 0x4f,
	0x52, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x80, 0x80, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x48, 0x4f, 0x4f,
	0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x80, 0x80, 0x02, 0x2a, 0xdc,
	0x04, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x49, 0x4e, 0x54, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x24, 0x0a, 0x20, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x53, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41,
	0x46, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x48,
	0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12,
	0x21, 0x0a, 0x1d, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52,
	0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49,
	0x4e, 0x10, 0x20, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49,
	0x4e, 0x10, 0x40, 0x12, 0x21, 0x0a, 0x1c, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x45, 0x46, 0x4f,
	0x52, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x4f, 0x55, 0x54, 0x10, 0x80, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41,
	0x46, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x80, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x48, 0x4f, 0x4f, 0x4b,
	0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x44, 0x45, 0x45, 0x4d, 0x10, 0x80, 0x10, 0x12, 0x1d, 0x0a, 0x18, 0x48, 0x4f, 0x4f, 0x4b,
	0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x44, 0x45, 0x45, 0x4d, 0x10, 0x80, 0x20, 0x12, 0x24, 0x0a, 0x1f, 0x48, 0x4f, 0x4f, 0x4b, 0x5f,
	0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x80, 0x40, 0x12, 0x24, 0x0a,
	0x1e, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10,
	0x80, 0x80, 0x01, 0x12, 0x25, 0x0a, 0x1f, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x45, 0x46, 0x4f,
	0x52, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e,
	0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x80, 0x80, 0x02, 0x12, 0x24, 0x0a, 0x1e, 0x48, 0x4f,
	0x4f, 0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x80, 0x80, 0x04,
	0x12, 0x1d, 0x0a, 0x16, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x49, 0x49, 0x10, 0x80, 0x80, 0x80, 0x01, 0x12,
	0x1c, 0x0a, 0x15, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x49, 0x49, 0x10, 0x80, 0x80, 0x80, 0x02, 0x2a, 0xd1, 0x01,
	0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x41, 0x53, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41,
	0x53, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x20, 0x2a, 0x5f, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e,
	0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x8f, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f,
	0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x08, 0x2a, 0x53, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x42, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x24, 0x73,
	0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f,
	0x2f, 0x69, 0x6f, 0xaa, 0x02, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_common_integration_proto_rawDescOnce sync.Once
	file_io_common_integration_proto_rawDescData []byte
)

func file_io_common_integration_proto_rawDescGZIP() []byte {
	file_io_common_integration_proto_rawDescOnce.Do(func() {
		file_io_common_integration_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_common_integration_proto_rawDesc), len(file_io_common_integration_proto_rawDesc)))
	})
	return file_io_common_integration_proto_rawDescData
}

var file_io_common_integration_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_io_common_integration_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_io_common_integration_proto_goTypes = []any{
	(IntegrationStatus)(0),               // 0: io.IntegrationStatus
	(ConfigurationType)(0),               // 1: io.ConfigurationType
	(IntegrationType)(0),                 // 2: io.IntegrationType
	(ProtocolIntgType)(0),                // 3: io.ProtocolIntgType
	(PassEventId)(0),                     // 4: io.PassEventId
	(MembershipEventId)(0),               // 5: io.MembershipEventId
	(CouponEventId)(0),                   // 6: io.CouponEventId
	(ActionMethod)(0),                    // 7: io.ActionMethod
	(*MembershipEventIds)(nil),           // 8: io.MembershipEventIds
	(*CouponEventIds)(nil),               // 9: io.CouponEventIds
	(*IntegrationConfigs)(nil),           // 10: io.IntegrationConfigs
	(*ProtocolIdInput)(nil),              // 11: io.ProtocolIdInput
	(*SubscriptionRequest)(nil),          // 12: io.SubscriptionRequest
	(*SubscriptionRequestByClassId)(nil), // 13: io.SubscriptionRequestByClassId
	(*FieldMapping)(nil),                 // 14: io.FieldMapping
	(*WebhookConfig)(nil),                // 15: io.WebhookConfig
	(*SinkSubscriptionPayload)(nil),      // 16: io.SinkSubscriptionPayload
	(*SinkSubscription)(nil),             // 17: io.SinkSubscription
	(*DynamicApiInput)(nil),              // 18: io.DynamicApiInput
	(*DynamicApiRequest)(nil),            // 19: io.DynamicApiRequest
	(*DynamicApiResponse)(nil),           // 20: io.DynamicApiResponse
	nil,                                  // 21: io.IntegrationConfigs.ConfigurationsEntry
	nil,                                  // 22: io.DynamicApiRequest.ParamsEntry
	(PassProtocol)(0),                    // 23: io.PassProtocol
	(DataType)(0),                        // 24: io.DataType
	(*Pass)(nil),                         // 25: io.Pass
	(*timestamppb.Timestamp)(nil),        // 26: google.protobuf.Timestamp
}
var file_io_common_integration_proto_depIdxs = []int32{
	5,  // 0: io.MembershipEventIds.ids:type_name -> io.MembershipEventId
	6,  // 1: io.CouponEventIds.ids:type_name -> io.CouponEventId
	21, // 2: io.IntegrationConfigs.configurations:type_name -> io.IntegrationConfigs.ConfigurationsEntry
	23, // 3: io.ProtocolIdInput.protocol:type_name -> io.PassProtocol
	23, // 4: io.SubscriptionRequest.protocol:type_name -> io.PassProtocol
	23, // 5: io.SubscriptionRequestByClassId.protocol:type_name -> io.PassProtocol
	1,  // 6: io.SubscriptionRequestByClassId.configType:type_name -> io.ConfigurationType
	4,  // 7: io.SubscriptionRequestByClassId.passEventId:type_name -> io.PassEventId
	5,  // 8: io.SubscriptionRequestByClassId.membershipEventId:type_name -> io.MembershipEventId
	6,  // 9: io.SubscriptionRequestByClassId.couponEventId:type_name -> io.CouponEventId
	24, // 10: io.FieldMapping.destinationFieldDataType:type_name -> io.DataType
	7,  // 11: io.WebhookConfig.actionMethod:type_name -> io.ActionMethod
	14, // 12: io.WebhookConfig.fieldMapping:type_name -> io.FieldMapping
	25, // 13: io.SinkSubscriptionPayload.pass:type_name -> io.Pass
	23, // 14: io.SinkSubscription.protocol:type_name -> io.PassProtocol
	4,  // 15: io.SinkSubscription.passEventId:type_name -> io.PassEventId
	0,  // 16: io.SinkSubscription.status:type_name -> io.IntegrationStatus
	1,  // 17: io.SinkSubscription.configType:type_name -> io.ConfigurationType
	26, // 18: io.SinkSubscription.createdAt:type_name -> google.protobuf.Timestamp
	26, // 19: io.SinkSubscription.updatedAt:type_name -> google.protobuf.Timestamp
	8,  // 20: io.SinkSubscription.membershipEvents:type_name -> io.MembershipEventIds
	9,  // 21: io.SinkSubscription.couponEvents:type_name -> io.CouponEventIds
	19, // 22: io.DynamicApiInput.request:type_name -> io.DynamicApiRequest
	22, // 23: io.DynamicApiRequest.params:type_name -> io.DynamicApiRequest.ParamsEntry
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_io_common_integration_proto_init() }
func file_io_common_integration_proto_init() {
	if File_io_common_integration_proto != nil {
		return
	}
	file_io_common_pass_proto_init()
	file_io_common_template_proto_init()
	file_io_common_protocols_proto_init()
	file_io_common_integration_proto_msgTypes[5].OneofWrappers = []any{
		(*SubscriptionRequestByClassId_PassEventId)(nil),
		(*SubscriptionRequestByClassId_MembershipEventId)(nil),
		(*SubscriptionRequestByClassId_CouponEventId)(nil),
	}
	file_io_common_integration_proto_msgTypes[9].OneofWrappers = []any{
		(*SinkSubscription_MembershipEvents)(nil),
		(*SinkSubscription_CouponEvents)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_common_integration_proto_rawDesc), len(file_io_common_integration_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_common_integration_proto_goTypes,
		DependencyIndexes: file_io_common_integration_proto_depIdxs,
		EnumInfos:         file_io_common_integration_proto_enumTypes,
		MessageInfos:      file_io_common_integration_proto_msgTypes,
	}.Build()
	File_io_common_integration_proto = out.File
	file_io_common_integration_proto_goTypes = nil
	file_io_common_integration_proto_depIdxs = nil
}
