//*
// Flights
//
// A Flight record represents a flight operation on a particular day. Flights are the main charging driver. Flights can be manually created or updated, but more often, they will be automatically generated from the Carrier and Flight Designation data. A manually updated flight may be overwritten with external data if subscribed to automatic gate or schedule updates and the `suspendAutomaticUpdates` is not set to `true`.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/flights/flight.proto

package flights

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// For customers subscribing to automatic updates, the flight status will be automatically updated. Status is also writable for manual updates.
type FlightStatus int32

const (
	// No status is known, or flight is not yet scheduled.
	FlightStatus_UNKNOWN FlightStatus = 0
	// Flight is scheduled to depart.
	FlightStatus_SCHEDULED FlightStatus = 1
	// Flight has left the departure gate, but may not be airborne yet.
	FlightStatus_DEPARTED FlightStatus = 2
	// Flight is airborne.
	FlightStatus_INAIR FlightStatus = 3
	// Flight has landed, but may not yet be at the arrival gate.
	FlightStatus_LANDED FlightStatus = 4
	// Flight has arrived at the destination gate.
	FlightStatus_ARRIVED FlightStatus = 5
	// Flight has been cancelled.
	FlightStatus_CANCELLED FlightStatus = 6
	// Flight is delayed to depart by at least 15 minutes.
	FlightStatus_DELAYED FlightStatus = 7
	// Flight has been diverted from its scheduled destination and has left the departure gate.
	FlightStatus_DEPARTED_DIVERTED FlightStatus = 8
	// Flight has been diverted from its scheduled destination and is airborne.
	FlightStatus_INAIR_DIVERTED FlightStatus = 9
	// Flight has arrived at a location different to its scheduled destination.
	FlightStatus_ARRIVED_DIVERTED FlightStatus = 10
	// Flight has left its diverted destination en-route to its original destination.
	FlightStatus_DEPARTED_RECOVERY FlightStatus = 11
	// Flight has left its diverted destination airborne en-route to its original destination.
	FlightStatus_INAIR_RECOVERY FlightStatus = 12
	// Flight has landed at is original scheduled destination.
	FlightStatus_ARRIVED_RECOVERY FlightStatus = 13
)

// Enum value maps for FlightStatus.
var (
	FlightStatus_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "SCHEDULED",
		2:  "DEPARTED",
		3:  "INAIR",
		4:  "LANDED",
		5:  "ARRIVED",
		6:  "CANCELLED",
		7:  "DELAYED",
		8:  "DEPARTED_DIVERTED",
		9:  "INAIR_DIVERTED",
		10: "ARRIVED_DIVERTED",
		11: "DEPARTED_RECOVERY",
		12: "INAIR_RECOVERY",
		13: "ARRIVED_RECOVERY",
	}
	FlightStatus_value = map[string]int32{
		"UNKNOWN":           0,
		"SCHEDULED":         1,
		"DEPARTED":          2,
		"INAIR":             3,
		"LANDED":            4,
		"ARRIVED":           5,
		"CANCELLED":         6,
		"DELAYED":           7,
		"DEPARTED_DIVERTED": 8,
		"INAIR_DIVERTED":    9,
		"ARRIVED_DIVERTED":  10,
		"DEPARTED_RECOVERY": 11,
		"INAIR_RECOVERY":    12,
		"ARRIVED_RECOVERY":  13,
	}
)

func (x FlightStatus) Enum() *FlightStatus {
	p := new(FlightStatus)
	*p = x
	return p
}

func (x FlightStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_io_flights_flight_proto_enumTypes[0].Descriptor()
}

func (FlightStatus) Type() protoreflect.EnumType {
	return &file_io_flights_flight_proto_enumTypes[0]
}

func (x FlightStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightStatus.Descriptor instead.
func (FlightStatus) EnumDescriptor() ([]byte, []int) {
	return file_io_flights_flight_proto_rawDescGZIP(), []int{0}
}

type FlightCreateMode int32

const (
	FlightCreateMode_DO_NOT_USE FlightCreateMode = 0
	FlightCreateMode_MANUAL     FlightCreateMode = 1
	FlightCreateMode_AUTOMATIC  FlightCreateMode = 2
)

// Enum value maps for FlightCreateMode.
var (
	FlightCreateMode_name = map[int32]string{
		0: "DO_NOT_USE",
		1: "MANUAL",
		2: "AUTOMATIC",
	}
	FlightCreateMode_value = map[string]int32{
		"DO_NOT_USE": 0,
		"MANUAL":     1,
		"AUTOMATIC":  2,
	}
)

func (x FlightCreateMode) Enum() *FlightCreateMode {
	p := new(FlightCreateMode)
	*p = x
	return p
}

func (x FlightCreateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightCreateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_io_flights_flight_proto_enumTypes[1].Descriptor()
}

func (FlightCreateMode) Type() protoreflect.EnumType {
	return &file_io_flights_flight_proto_enumTypes[1]
}

func (x FlightCreateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightCreateMode.Descriptor instead.
func (FlightCreateMode) EnumDescriptor() ([]byte, []int) {
	return file_io_flights_flight_proto_rawDescGZIP(), []int{1}
}

type Flight struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The IATA or ICAO carrier code for the flight. In the case of a code-share, this should be the carrier code that you wish to present to the customer. This could be the marketing code, or the operating airline code. A carrier record for this code must exist.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=2|fixedLenAlphaNum=3"
	CarrierCode string `protobuf:"bytes,1,opt,name=carrierCode,proto3" json:"carrierCode,omitempty" validateGeneric:"required,fixedLenAlphaNum=2|fixedLenAlphaNum=3"`
	// The flight number.
	// @tag: validateGeneric:"required,alphanum,max=5"
	FlightNumber string `protobuf:"bytes,2,opt,name=flightNumber,proto3" json:"flightNumber,omitempty" validateGeneric:"required,alphanum,max=5"`
	// The IATA airport code of the boarding point. Only required is segment is not provided.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"
	BoardingPoint string `protobuf:"bytes,3,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty" validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"`
	// The IATA airport code of the deplaning point.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"
	DeplaningPoint string `protobuf:"bytes,4,opt,name=deplaningPoint,proto3" json:"deplaningPoint,omitempty" validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"`
	// The scheduled date of departure.
	// @tag: validateGeneric:"required"
	DepartureDate *io.Date `protobuf:"bytes,5,opt,name=departureDate,proto3" json:"departureDate,omitempty" validateGeneric:"required"`
	// Departure Terminal.
	DepartureTerminal string `protobuf:"bytes,6,opt,name=departureTerminal,proto3" json:"departureTerminal,omitempty"`
	// Arrival Terminal.
	ArrivalTerminal string `protobuf:"bytes,7,opt,name=arrivalTerminal,proto3" json:"arrivalTerminal,omitempty"`
	// Departure Gate.
	DepartureGate string `protobuf:"bytes,8,opt,name=departureGate,proto3" json:"departureGate,omitempty"`
	// Arrival Gate.
	ArrivalGate string `protobuf:"bytes,9,opt,name=arrivalGate,proto3" json:"arrivalGate,omitempty"`
	// The scheduled departure time. If omitted then the departureDate must be specified.
	// @tag: validateGeneric:"required,ioLocalDate"
	ScheduledDepartureTime *io.LocalDateTime `protobuf:"bytes,10,opt,name=scheduledDepartureTime,proto3" json:"scheduledDepartureTime,omitempty" validateGeneric:"required,ioLocalDate"`
	// The estimated departure time.
	// @tag: validateGeneric:"omitempty,ioLocalDate"
	EstimatedDepartureTime *io.LocalDateTime `protobuf:"bytes,11,opt,name=estimatedDepartureTime,proto3" json:"estimatedDepartureTime,omitempty" validateGeneric:"omitempty,ioLocalDate"`
	// The boarding time.
	// @tag: validateGeneric:"omitempty,ioLocalDate"
	BoardingTime *io.LocalDateTime `protobuf:"bytes,12,opt,name=boardingTime,proto3" json:"boardingTime,omitempty" validateGeneric:"omitempty,ioLocalDate"`
	// The time the gate will close.
	// @tag: validateGeneric:"omitempty,ioLocalDate"
	GateClosingTime *io.LocalDateTime `protobuf:"bytes,13,opt,name=gateClosingTime,proto3" json:"gateClosingTime,omitempty" validateGeneric:"omitempty,ioLocalDate"`
	// The scheduled arrival time.
	// @tag: validateGeneric:"omitempty,ioLocalDate"
	ScheduledArrivalTime *io.LocalDateTime `protobuf:"bytes,14,opt,name=scheduledArrivalTime,proto3" json:"scheduledArrivalTime,omitempty" validateGeneric:"omitempty,ioLocalDate"`
	// The estimated arrival time.
	// @tag: validateGeneric:"omitempty,ioLocalDate"
	EstimatedArrivalTime *io.LocalDateTime `protobuf:"bytes,15,opt,name=estimatedArrivalTime,proto3" json:"estimatedArrivalTime,omitempty" validateGeneric:"omitempty,ioLocalDate"`
	// If the flight is operated by a carrier other than the carrierCode supplied, provide the IATA or ICAO carrier code for the operating carrier.  A carrier record must exist.
	// @tag: validateGeneric:"omitempty,required_with=OperatingFlightNumber,fixedLenAlphaNum=2|fixedLenAlphaNum=3"
	OperatingCarrierCode string `protobuf:"bytes,16,opt,name=operatingCarrierCode,proto3" json:"operatingCarrierCode,omitempty" validateGeneric:"omitempty,required_with=OperatingFlightNumber,fixedLenAlphaNum=2|fixedLenAlphaNum=3"`
	// If the flight is operated by a carrier other than the carrierCode supplied, provide the flight number for the operating carrier.
	// @tag: validateGeneric:"required_with=OperatingCarrierCode,alphanum|isdefault,max=5"
	OperatingFlightNumber string `protobuf:"bytes,17,opt,name=operatingFlightNumber,proto3" json:"operatingFlightNumber,omitempty" validateGeneric:"required_with=OperatingCarrierCode,alphanum|isdefault,max=5"`
	// If the flight has code shares, then enter the carrier code and flight number. If there is an operating carrier, then do not include this in the list. Code share carriers will not be validated.
	// @tag: validateGeneric:"omitempty,max=10,dive,alphanum|isdefault,max=8"
	CodeShareFlightNumbers []string `protobuf:"bytes,18,rep,name=codeShareFlightNumbers,proto3" json:"codeShareFlightNumbers,omitempty" validateGeneric:"omitempty,max=10,dive,alphanum|isdefault,max=8"`
	// The pass template id.
	// @tag: validateGeneric:"required,uuidCompressedString"
	PassTemplateId string `protobuf:"bytes,19,opt,name=passTemplateId,proto3" json:"passTemplateId,omitempty" validateGeneric:"required,uuidCompressedString"`
	// The baggage belt at the destination.
	BaggageBelt string `protobuf:"bytes,21,opt,name=baggageBelt,proto3" json:"baggageBelt,omitempty"`
	// Minutes after estimated or scheduled arrival to automatically invalidate the pass. Enter a value of 9999999 or greater if the pass should not auto invalidate. Default is 48 hours.
	AutoInvalidateAfter uint32 `protobuf:"varint,22,opt,name=autoInvalidateAfter,proto3" json:"autoInvalidateAfter,omitempty"`
	// Deprecated: Use InvalidateCancelledPasses.
	//
	// Deprecated: Marked as deprecated in io/flights/flight.proto.
	AutoInvalidateCancelledPasses bool `protobuf:"varint,23,opt,name=autoInvalidateCancelledPasses,proto3" json:"autoInvalidateCancelledPasses,omitempty"`
	// A list of up to 10 GPS locations where this boarding pass should be presented on the lock-screen. Values here will override the designated defaults.
	// @tag: validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"
	LocationMessages []*io.GPSLocation `protobuf:"bytes,24,rep,name=locationMessages,proto3" json:"locationMessages,omitempty" validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"`
	// A list of up to 10 Beacon UUIDs that should trigger the boarding pass to be presented on the lock-screen. Values here will override the designated defaults.
	// @tag: validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"
	BeaconMessages []*io.Beacon `protobuf:"bytes,25,rep,name=beaconMessages,proto3" json:"beaconMessages,omitempty" validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"`
	// A list of links to be appended to the end of each boarding pass.
	// @tag: validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"
	Links []*io.Link `protobuf:"bytes,26,rep,name=links,proto3" json:"links,omitempty" validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"`
	// Suspend automatic updates to all boarding passes for this flight.
	SuspendAutomaticUpdates bool `protobuf:"varint,27,opt,name=suspendAutomaticUpdates,proto3" json:"suspendAutomaticUpdates,omitempty"`
	// Used to determine the label printed above the boarding group on the Google Pay pass.
	// @tag: validate:"omitempty,max=3"
	BoardingPolicy BoardingPolicy `protobuf:"varint,28,opt,name=boardingPolicy,proto3,enum=flights.BoardingPolicy" json:"boardingPolicy,omitempty" validate:"omitempty,max=3"`
	// Used to determine the label printed above the seat class on the Google Pay pass. E.g. Economy, Economy Plus.
	// @tag: validate:"omitempty,max=4"
	SeatingPolicy SeatClassPolicy `protobuf:"varint,29,opt,name=seatingPolicy,proto3,enum=flights.SeatClassPolicy" json:"seatingPolicy,omitempty" validate:"omitempty,max=4"`
	// The status of the flight. This can be manually set, or automatically set for customers subscribing to automatic updates.
	// @tag: validateGeneric:"omitempty,max=13"
	Status FlightStatus `protobuf:"varint,30,opt,name=status,proto3,enum=flights.FlightStatus" json:"status,omitempty" validateGeneric:"omitempty,max=13"`
	// If PassKit are generating barcodes, include conditional items. Default false.
	ConditionalItems bool `protobuf:"varint,31,opt,name=ConditionalItems,proto3" json:"ConditionalItems,omitempty"`
	// If PassKit are generating barcodes, default airline use data (IATA item 4). This can be overwritten at the flight and boarding pass level.
	BarcodeAdditionalData string `protobuf:"bytes,32,opt,name=BarcodeAdditionalData,proto3" json:"BarcodeAdditionalData,omitempty"`
	// Issued, installed, uninstalled and invalidated counts. Metrics are not writable.
	// @tag: validateGeneric:"isdefault"
	Metrics *io.Metrics `protobuf:"bytes,33,opt,name=metrics,proto3" json:"metrics,omitempty" validateGeneric:"isdefault"`
	// How the flight was created Create mode, manually or automatically.
	// @tag: validateGeneric:"isdefault"
	CreateMethod FlightCreateMode `protobuf:"varint,34,opt,name=createMethod,proto3,enum=flights.FlightCreateMode" json:"createMethod,omitempty" validateGeneric:"isdefault"`
	// For automatically created flights, shows the ID of the designator that bootstrapped the flight record.
	// @tag: validateGeneric:"isdefault"
	DesignatorId string `protobuf:"bytes,35,opt,name=designatorId,proto3" json:"designatorId,omitempty" validateGeneric:"isdefault"`
	// Invalidate passes where either the booking or the flight have been cancelled. Default is ON.
	InvalidateCancelledPasses io.Toggle `protobuf:"varint,36,opt,name=invalidateCancelledPasses,proto3,enum=io.Toggle" json:"invalidateCancelledPasses,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Flight) Reset() {
	*x = Flight{}
	mi := &file_io_flights_flight_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flight) ProtoMessage() {}

func (x *Flight) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_flight_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flight.ProtoReflect.Descriptor instead.
func (*Flight) Descriptor() ([]byte, []int) {
	return file_io_flights_flight_proto_rawDescGZIP(), []int{0}
}

func (x *Flight) GetCarrierCode() string {
	if x != nil {
		return x.CarrierCode
	}
	return ""
}

func (x *Flight) GetFlightNumber() string {
	if x != nil {
		return x.FlightNumber
	}
	return ""
}

func (x *Flight) GetBoardingPoint() string {
	if x != nil {
		return x.BoardingPoint
	}
	return ""
}

func (x *Flight) GetDeplaningPoint() string {
	if x != nil {
		return x.DeplaningPoint
	}
	return ""
}

func (x *Flight) GetDepartureDate() *io.Date {
	if x != nil {
		return x.DepartureDate
	}
	return nil
}

func (x *Flight) GetDepartureTerminal() string {
	if x != nil {
		return x.DepartureTerminal
	}
	return ""
}

func (x *Flight) GetArrivalTerminal() string {
	if x != nil {
		return x.ArrivalTerminal
	}
	return ""
}

func (x *Flight) GetDepartureGate() string {
	if x != nil {
		return x.DepartureGate
	}
	return ""
}

func (x *Flight) GetArrivalGate() string {
	if x != nil {
		return x.ArrivalGate
	}
	return ""
}

func (x *Flight) GetScheduledDepartureTime() *io.LocalDateTime {
	if x != nil {
		return x.ScheduledDepartureTime
	}
	return nil
}

func (x *Flight) GetEstimatedDepartureTime() *io.LocalDateTime {
	if x != nil {
		return x.EstimatedDepartureTime
	}
	return nil
}

func (x *Flight) GetBoardingTime() *io.LocalDateTime {
	if x != nil {
		return x.BoardingTime
	}
	return nil
}

func (x *Flight) GetGateClosingTime() *io.LocalDateTime {
	if x != nil {
		return x.GateClosingTime
	}
	return nil
}

func (x *Flight) GetScheduledArrivalTime() *io.LocalDateTime {
	if x != nil {
		return x.ScheduledArrivalTime
	}
	return nil
}

func (x *Flight) GetEstimatedArrivalTime() *io.LocalDateTime {
	if x != nil {
		return x.EstimatedArrivalTime
	}
	return nil
}

func (x *Flight) GetOperatingCarrierCode() string {
	if x != nil {
		return x.OperatingCarrierCode
	}
	return ""
}

func (x *Flight) GetOperatingFlightNumber() string {
	if x != nil {
		return x.OperatingFlightNumber
	}
	return ""
}

func (x *Flight) GetCodeShareFlightNumbers() []string {
	if x != nil {
		return x.CodeShareFlightNumbers
	}
	return nil
}

func (x *Flight) GetPassTemplateId() string {
	if x != nil {
		return x.PassTemplateId
	}
	return ""
}

func (x *Flight) GetBaggageBelt() string {
	if x != nil {
		return x.BaggageBelt
	}
	return ""
}

func (x *Flight) GetAutoInvalidateAfter() uint32 {
	if x != nil {
		return x.AutoInvalidateAfter
	}
	return 0
}

// Deprecated: Marked as deprecated in io/flights/flight.proto.
func (x *Flight) GetAutoInvalidateCancelledPasses() bool {
	if x != nil {
		return x.AutoInvalidateCancelledPasses
	}
	return false
}

func (x *Flight) GetLocationMessages() []*io.GPSLocation {
	if x != nil {
		return x.LocationMessages
	}
	return nil
}

func (x *Flight) GetBeaconMessages() []*io.Beacon {
	if x != nil {
		return x.BeaconMessages
	}
	return nil
}

func (x *Flight) GetLinks() []*io.Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Flight) GetSuspendAutomaticUpdates() bool {
	if x != nil {
		return x.SuspendAutomaticUpdates
	}
	return false
}

func (x *Flight) GetBoardingPolicy() BoardingPolicy {
	if x != nil {
		return x.BoardingPolicy
	}
	return BoardingPolicy_BOARDING_POLICY_UNSPECIFIED
}

func (x *Flight) GetSeatingPolicy() SeatClassPolicy {
	if x != nil {
		return x.SeatingPolicy
	}
	return SeatClassPolicy_SEAT_CLASS_POLICY_UNSPECIFIED
}

func (x *Flight) GetStatus() FlightStatus {
	if x != nil {
		return x.Status
	}
	return FlightStatus_UNKNOWN
}

func (x *Flight) GetConditionalItems() bool {
	if x != nil {
		return x.ConditionalItems
	}
	return false
}

func (x *Flight) GetBarcodeAdditionalData() string {
	if x != nil {
		return x.BarcodeAdditionalData
	}
	return ""
}

func (x *Flight) GetMetrics() *io.Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Flight) GetCreateMethod() FlightCreateMode {
	if x != nil {
		return x.CreateMethod
	}
	return FlightCreateMode_DO_NOT_USE
}

func (x *Flight) GetDesignatorId() string {
	if x != nil {
		return x.DesignatorId
	}
	return ""
}

func (x *Flight) GetInvalidateCancelledPasses() io.Toggle {
	if x != nil {
		return x.InvalidateCancelledPasses
	}
	return io.Toggle(0)
}

// A Flight Request message is used to retrieve or identify an individual flight operation. For direct flights with multiple stops, a segment number or departure point is required.
type FlightRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The 2 character IATA code or 3 character ICAO code.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=2|fixedLenAlphaNum=3"
	CarrierCode string `protobuf:"bytes,1,opt,name=carrierCode,proto3" json:"carrierCode,omitempty" validateGeneric:"required,fixedLenAlphaNum=2|fixedLenAlphaNum=3"`
	// The flight number.
	// @tag: validateGeneric:"required,alphanum,max=5"
	FlightNumber string `protobuf:"bytes,2,opt,name=flightNumber,proto3" json:"flightNumber,omitempty" validateGeneric:"required,alphanum,max=5"`
	// The scheduled date of the flight, stated in the timezone of the boarding point.
	// @tag: validateGeneric:"required"
	DepartureDate *io.Date `protobuf:"bytes,3,opt,name=departureDate,proto3" json:"departureDate,omitempty" validateGeneric:"required"`
	// The IATA airport code for the boarding point of the flight. Only required for direct flights with stops where the boarding point is after the first port and segment is not provided.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"
	BoardingPoint string `protobuf:"bytes,5,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty" validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"`
	// The IATA airport code for the destination of the flight. Only required for direct flights with stops where the flight ends before the final port.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"
	DeplaningPoint string `protobuf:"bytes,6,opt,name=deplaningPoint,proto3" json:"deplaningPoint,omitempty" validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FlightRequest) Reset() {
	*x = FlightRequest{}
	mi := &file_io_flights_flight_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightRequest) ProtoMessage() {}

func (x *FlightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_flight_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightRequest.ProtoReflect.Descriptor instead.
func (*FlightRequest) Descriptor() ([]byte, []int) {
	return file_io_flights_flight_proto_rawDescGZIP(), []int{1}
}

func (x *FlightRequest) GetCarrierCode() string {
	if x != nil {
		return x.CarrierCode
	}
	return ""
}

func (x *FlightRequest) GetFlightNumber() string {
	if x != nil {
		return x.FlightNumber
	}
	return ""
}

func (x *FlightRequest) GetDepartureDate() *io.Date {
	if x != nil {
		return x.DepartureDate
	}
	return nil
}

func (x *FlightRequest) GetBoardingPoint() string {
	if x != nil {
		return x.BoardingPoint
	}
	return ""
}

func (x *FlightRequest) GetDeplaningPoint() string {
	if x != nil {
		return x.DeplaningPoint
	}
	return ""
}

var File_io_flights_flight_proto protoreflect.FileDescriptor

var file_io_flights_flight_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x69, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x1a, 0x1e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x69,
	0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd8, 0x10, 0x0a, 0x06, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x0b,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0x92, 0x41, 0x05, 0x78, 0x03, 0x80, 0x01, 0x02, 0x52, 0x0b, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0x92, 0x41, 0x02, 0x78, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x41, 0x02, 0x78,
	0x03, 0x52, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x41, 0x02, 0x78, 0x03, 0x52,
	0x0e, 0x64, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x12,
	0x49, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x16, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x16, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0f,
	0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x92, 0x41, 0x05, 0x78, 0x03, 0x80, 0x01, 0x02, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x41, 0x02, 0x78, 0x05, 0x52, 0x15, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61,
	0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x42, 0x65, 0x6c,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65,
	0x42, 0x65, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x09, 0x92, 0x41, 0x06, 0x3a, 0x04, 0x32, 0x38, 0x38, 0x30, 0x52, 0x13, 0x61, 0x75,
	0x74, 0x6f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1d, 0x61, 0x75,
	0x74, 0x6f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x50, 0x53, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x92, 0x41, 0x03, 0xa0, 0x01, 0x0a, 0x52, 0x10,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x0e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x42, 0x06, 0x92, 0x41, 0x03, 0xa0, 0x01, 0x0a, 0x52, 0x0e, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x06, 0x92, 0x41, 0x03, 0xa0, 0x01, 0x0a, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3f,
	0x0a, 0x0e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x3e, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2e, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x25, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x19, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x69, 0x6f, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04, 0x3a, 0x02,
	0x4f, 0x4e, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x3a, 0xdc, 0x01,
	0x92, 0x41, 0xd8, 0x01, 0x0a, 0xd5, 0x01, 0x2a, 0x06, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x32,
	0x53, 0x41, 0x20, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0xd2, 0x01, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0xd2, 0x01, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0xd2, 0x01, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0xd2, 0x01, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0xd2, 0x01, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0xd2, 0x01, 0x0e, 0x70, 0x61,
	0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0xd2, 0x01, 0x0d, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0xe4, 0x01, 0x0a,
	0x0d, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0x92, 0x41, 0x05, 0x78, 0x03, 0x80, 0x01, 0x02, 0x52, 0x0b, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0x92, 0x41, 0x02, 0x78, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x65, 0x70, 0x6c, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2a, 0xfa, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4e, 0x41, 0x49, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x07, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x45, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x41, 0x49, 0x52, 0x5f, 0x44,
	0x49, 0x56, 0x45, 0x52, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x52, 0x52,
	0x49, 0x56, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x45, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x41, 0x49, 0x52, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x52,
	0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x0d,
	0x2a, 0x3d, 0x0a, 0x10, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x42,
	0x5f, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5a, 0x2c, 0x73, 0x74, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69,
	0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0xaa, 0x02, 0x14, 0x50, 0x61, 0x73, 0x73,
	0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_flights_flight_proto_rawDescOnce sync.Once
	file_io_flights_flight_proto_rawDescData []byte
)

func file_io_flights_flight_proto_rawDescGZIP() []byte {
	file_io_flights_flight_proto_rawDescOnce.Do(func() {
		file_io_flights_flight_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_flights_flight_proto_rawDesc), len(file_io_flights_flight_proto_rawDesc)))
	})
	return file_io_flights_flight_proto_rawDescData
}

var file_io_flights_flight_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_io_flights_flight_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_io_flights_flight_proto_goTypes = []any{
	(FlightStatus)(0),        // 0: flights.FlightStatus
	(FlightCreateMode)(0),    // 1: flights.FlightCreateMode
	(*Flight)(nil),           // 2: flights.Flight
	(*FlightRequest)(nil),    // 3: flights.FlightRequest
	(*io.Date)(nil),          // 4: io.Date
	(*io.LocalDateTime)(nil), // 5: io.LocalDateTime
	(*io.GPSLocation)(nil),   // 6: io.GPSLocation
	(*io.Beacon)(nil),        // 7: io.Beacon
	(*io.Link)(nil),          // 8: io.Link
	(BoardingPolicy)(0),      // 9: flights.BoardingPolicy
	(SeatClassPolicy)(0),     // 10: flights.SeatClassPolicy
	(*io.Metrics)(nil),       // 11: io.Metrics
	(io.Toggle)(0),           // 12: io.Toggle
}
var file_io_flights_flight_proto_depIdxs = []int32{
	4,  // 0: flights.Flight.departureDate:type_name -> io.Date
	5,  // 1: flights.Flight.scheduledDepartureTime:type_name -> io.LocalDateTime
	5,  // 2: flights.Flight.estimatedDepartureTime:type_name -> io.LocalDateTime
	5,  // 3: flights.Flight.boardingTime:type_name -> io.LocalDateTime
	5,  // 4: flights.Flight.gateClosingTime:type_name -> io.LocalDateTime
	5,  // 5: flights.Flight.scheduledArrivalTime:type_name -> io.LocalDateTime
	5,  // 6: flights.Flight.estimatedArrivalTime:type_name -> io.LocalDateTime
	6,  // 7: flights.Flight.locationMessages:type_name -> io.GPSLocation
	7,  // 8: flights.Flight.beaconMessages:type_name -> io.Beacon
	8,  // 9: flights.Flight.links:type_name -> io.Link
	9,  // 10: flights.Flight.boardingPolicy:type_name -> flights.BoardingPolicy
	10, // 11: flights.Flight.seatingPolicy:type_name -> flights.SeatClassPolicy
	0,  // 12: flights.Flight.status:type_name -> flights.FlightStatus
	11, // 13: flights.Flight.metrics:type_name -> io.Metrics
	1,  // 14: flights.Flight.createMethod:type_name -> flights.FlightCreateMode
	12, // 15: flights.Flight.invalidateCancelledPasses:type_name -> io.Toggle
	4,  // 16: flights.FlightRequest.departureDate:type_name -> io.Date
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_io_flights_flight_proto_init() }
func file_io_flights_flight_proto_init() {
	if File_io_flights_flight_proto != nil {
		return
	}
	file_io_flights_flight_designator_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_flights_flight_proto_rawDesc), len(file_io_flights_flight_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_flights_flight_proto_goTypes,
		DependencyIndexes: file_io_flights_flight_proto_depIdxs,
		EnumInfos:         file_io_flights_flight_proto_enumTypes,
		MessageInfos:      file_io_flights_flight_proto_msgTypes,
	}.Build()
	File_io_flights_flight_proto = out.File
	file_io_flights_flight_proto_goTypes = nil
	file_io_flights_flight_proto_depIdxs = nil
}
