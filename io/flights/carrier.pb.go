//*
// Carriers
//
// A carrier record is required for each Carrier Code that you wish to issue boarding passes for.  Carrier codes are not required for Operating Carriers where you are issuing boarding passes under the brand of a Marketing Carrier.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/flights/carrier.proto

package flights

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A carrier record contains details of the carrier.  The carrier will be the issuer of the boarding pass and may be used as a marketing or operating carrier.
type Carrier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The IATA carrier code. If the carrier has not been issued an IATA carrier code or an ICAO carrier code, use YY.
	// @tag: validateGeneric:"required_without=IcaoCarrierCode,fixedLenAlphaNum=2"
	IataCarrierCode string `protobuf:"bytes,1,opt,name=iataCarrierCode,proto3" json:"iataCarrierCode,omitempty" validateGeneric:"required_without=IcaoCarrierCode,fixedLenAlphaNum=2"`
	// The ICAO carrier code. Required if an iataCarrierCode is not provided.
	// @tag: validateGeneric:"required_without=IataCarrierCode,fixedLenAlphaNum=3|isdefault"
	IcaoCarrierCode string `protobuf:"bytes,2,opt,name=icaoCarrierCode,proto3" json:"icaoCarrierCode,omitempty" validateGeneric:"required_without=IataCarrierCode,fixedLenAlphaNum=3|isdefault"`
	// The IATA accounting code / AWB prefix.  If no code has been allocated, enter zero.
	// @tag: validateGeneric:"numeric,max=999"
	IataAccountingCode int32 `protobuf:"varint,3,opt,name=iataAccountingCode,proto3" json:"iataAccountingCode,omitempty" validateGeneric:"numeric,max=999"`
	// The name of the airline. This will be printed below the logo on the Google Pay pass.
	// @tag: validateGeneric:"required"
	AirlineName string `protobuf:"bytes,4,opt,name=airlineName,proto3" json:"airlineName,omitempty" validateGeneric:"required"`
	// The localized airline name, if applicable.
	LocalizedAirlineName *io.LocalizedString `protobuf:"bytes,5,opt,name=localizedAirlineName,proto3" json:"localizedAirlineName,omitempty"`
	// If the carrier will issue Apple Wallet passes, supply the certificate id (E.g. pass.com.passkitair). The certificate must have previously been uploaded.
	// @tag: validateGeneric:"required"
	PassTypeIdentifier string `protobuf:"bytes,6,opt,name=passTypeIdentifier,proto3" json:"passTypeIdentifier,omitempty" validateGeneric:"required"`
	// If PassKit are generating the boarding pass barcode, and the barcode needs signing, the ID of the private key used to sign the barcode payload.
	PrivateKeyId  string `protobuf:"bytes,7,opt,name=privateKeyId,proto3" json:"privateKeyId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Carrier) Reset() {
	*x = Carrier{}
	mi := &file_io_flights_carrier_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Carrier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Carrier) ProtoMessage() {}

func (x *Carrier) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_carrier_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Carrier.ProtoReflect.Descriptor instead.
func (*Carrier) Descriptor() ([]byte, []int) {
	return file_io_flights_carrier_proto_rawDescGZIP(), []int{0}
}

func (x *Carrier) GetIataCarrierCode() string {
	if x != nil {
		return x.IataCarrierCode
	}
	return ""
}

func (x *Carrier) GetIcaoCarrierCode() string {
	if x != nil {
		return x.IcaoCarrierCode
	}
	return ""
}

func (x *Carrier) GetIataAccountingCode() int32 {
	if x != nil {
		return x.IataAccountingCode
	}
	return 0
}

func (x *Carrier) GetAirlineName() string {
	if x != nil {
		return x.AirlineName
	}
	return ""
}

func (x *Carrier) GetLocalizedAirlineName() *io.LocalizedString {
	if x != nil {
		return x.LocalizedAirlineName
	}
	return nil
}

func (x *Carrier) GetPassTypeIdentifier() string {
	if x != nil {
		return x.PassTypeIdentifier
	}
	return ""
}

func (x *Carrier) GetPrivateKeyId() string {
	if x != nil {
		return x.PrivateKeyId
	}
	return ""
}

// CarrierCode is used for retrieving or deleting a port record.
type CarrierCode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The IATA or ICAO carrier code.
	CarrierCode   string `protobuf:"bytes,1,opt,name=carrierCode,proto3" json:"carrierCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CarrierCode) Reset() {
	*x = CarrierCode{}
	mi := &file_io_flights_carrier_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CarrierCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarrierCode) ProtoMessage() {}

func (x *CarrierCode) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_carrier_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarrierCode.ProtoReflect.Descriptor instead.
func (*CarrierCode) Descriptor() ([]byte, []int) {
	return file_io_flights_carrier_proto_rawDescGZIP(), []int{1}
}

func (x *CarrierCode) GetCarrierCode() string {
	if x != nil {
		return x.CarrierCode
	}
	return ""
}

var File_io_flights_carrier_proto protoreflect.FileDescriptor

var file_io_flights_carrier_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x69, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x1a, 0x1c, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xaa, 0x05, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x0f, 0x69, 0x61, 0x74, 0x61, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x8a, 0x01, 0x0d, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d, 0x24, 0x52, 0x0f, 0x69, 0x61, 0x74,
	0x61, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0f,
	0x69, 0x63, 0x61, 0x6f, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x8a, 0x01, 0x0d, 0x5e, 0x5b, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x33, 0x7d, 0x24, 0x52, 0x0f, 0x69, 0x63, 0x61, 0x6f,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x12, 0x69,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x59, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x38, 0x8f, 0x40, 0x52, 0x12, 0x69, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x69, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x14, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x3a, 0xa3, 0x02, 0x92, 0x41, 0x9f, 0x02, 0x0a,
	0x9c, 0x02, 0x2a, 0x07, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x32, 0xdb, 0x01, 0x41, 0x20,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x20,
	0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x20, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x61, 0x20, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0xd2, 0x01, 0x0f, 0x69, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x0b, 0x61, 0x69,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x12, 0x70, 0x61, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x2f,
	0x0a, 0x0b, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x5f, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5a, 0x2c, 0x73, 0x74, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69,
	0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0xaa, 0x02, 0x14, 0x50, 0x61, 0x73, 0x73,
	0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_flights_carrier_proto_rawDescOnce sync.Once
	file_io_flights_carrier_proto_rawDescData []byte
)

func file_io_flights_carrier_proto_rawDescGZIP() []byte {
	file_io_flights_carrier_proto_rawDescOnce.Do(func() {
		file_io_flights_carrier_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_flights_carrier_proto_rawDesc), len(file_io_flights_carrier_proto_rawDesc)))
	})
	return file_io_flights_carrier_proto_rawDescData
}

var file_io_flights_carrier_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_io_flights_carrier_proto_goTypes = []any{
	(*Carrier)(nil),            // 0: flights.Carrier
	(*CarrierCode)(nil),        // 1: flights.CarrierCode
	(*io.LocalizedString)(nil), // 2: io.LocalizedString
}
var file_io_flights_carrier_proto_depIdxs = []int32{
	2, // 0: flights.Carrier.localizedAirlineName:type_name -> io.LocalizedString
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_io_flights_carrier_proto_init() }
func file_io_flights_carrier_proto_init() {
	if File_io_flights_carrier_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_flights_carrier_proto_rawDesc), len(file_io_flights_carrier_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_flights_carrier_proto_goTypes,
		DependencyIndexes: file_io_flights_carrier_proto_depIdxs,
		MessageInfos:      file_io_flights_carrier_proto_msgTypes,
	}.Build()
	File_io_flights_carrier_proto = out.File
	file_io_flights_carrier_proto_goTypes = nil
	file_io_flights_carrier_proto_depIdxs = nil
}
