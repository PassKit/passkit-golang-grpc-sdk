//*
// Flights RPC
//
// The PassKit Flights API lets you manage your flights and boarding passes for Apple Wallet and Google Pay.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: io/flights/a_rpc.proto

package flights

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Flights_CreatePort_FullMethodName             = "/flights.Flights/createPort"
	Flights_GetPort_FullMethodName                = "/flights.Flights/getPort"
	Flights_UpdatePort_FullMethodName             = "/flights.Flights/updatePort"
	Flights_DeletePort_FullMethodName             = "/flights.Flights/deletePort"
	Flights_CreateCarrier_FullMethodName          = "/flights.Flights/createCarrier"
	Flights_GetCarrier_FullMethodName             = "/flights.Flights/getCarrier"
	Flights_UpdateCarrier_FullMethodName          = "/flights.Flights/updateCarrier"
	Flights_DeleteCarrier_FullMethodName          = "/flights.Flights/deleteCarrier"
	Flights_CreateFlightDesignator_FullMethodName = "/flights.Flights/createFlightDesignator"
	Flights_GetFlightDesignator_FullMethodName    = "/flights.Flights/getFlightDesignator"
	Flights_UpdateFlightDesignator_FullMethodName = "/flights.Flights/updateFlightDesignator"
	Flights_DeleteFlightDesignator_FullMethodName = "/flights.Flights/deleteFlightDesignator"
	Flights_CreateFlight_FullMethodName           = "/flights.Flights/createFlight"
	Flights_GetFlight_FullMethodName              = "/flights.Flights/getFlight"
	Flights_UpdateFlight_FullMethodName           = "/flights.Flights/updateFlight"
	Flights_DeleteFlight_FullMethodName           = "/flights.Flights/deleteFlight"
	Flights_CreateBoardingPass_FullMethodName     = "/flights.Flights/createBoardingPass"
	Flights_GetBoardingPassRecord_FullMethodName  = "/flights.Flights/getBoardingPassRecord"
	Flights_GetBoardingPass_FullMethodName        = "/flights.Flights/getBoardingPass"
	Flights_UpdateBoardingPass_FullMethodName     = "/flights.Flights/updateBoardingPass"
	Flights_DeleteBoardingPass_FullMethodName     = "/flights.Flights/deleteBoardingPass"
)

// FlightsClient is the client API for Flights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightsClient interface {
	// Create an airport record. Optional method allowing the carrier to specify how the airport name is rendered in the pass and the GPS location that will trigger a lock-screen alert.
	CreatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieve an airport record. The AirportCode is the three character IATA code or 4 character ICAO code.
	GetPort(ctx context.Context, in *AirportCode, opts ...grpc.CallOption) (*Port, error)
	// Update an airport record.
	UpdatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Port, error)
	// Delete an airport record. Deleting a record will remove any custom data provided. A new Airport record may be automatically created for a flight departing, arriving or transiting an airport which does not have a record, using publicly available data.
	DeletePort(ctx context.Context, in *AirportCode, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create a carrier record. All Flight Designations and Flights must have a carrier record.
	CreateCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieve a carrier record.
	GetCarrier(ctx context.Context, in *CarrierCode, opts ...grpc.CallOption) (*Carrier, error)
	// Update a carrier record
	UpdateCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*Carrier, error)
	// Delete a carrier record.
	DeleteCarrier(ctx context.Context, in *CarrierCode, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create a flight designator record. As much default information as possible should be provided to facilitate the automatic generation of flight records.
	CreateFlightDesignator(ctx context.Context, in *FlightDesignator, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieve a flight designation record.
	GetFlightDesignator(ctx context.Context, in *FlightDesignatorRequest, opts ...grpc.CallOption) (*FlightDesignator, error)
	// Update a flight designation record.
	UpdateFlightDesignator(ctx context.Context, in *FlightDesignator, opts ...grpc.CallOption) (*FlightDesignator, error)
	// Delete a flight designation record.
	DeleteFlightDesignator(ctx context.Context, in *FlightDesignatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create a flight record. In practice, this method is not often used, since flight records can be automatically generated. Any information in the flight record will override information in the carrier and flight designation records.
	CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieve a flight record.
	GetFlight(ctx context.Context, in *FlightRequest, opts ...grpc.CallOption) (*Flight, error)
	// Update a flight record.
	UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	// Delete a flight record.
	DeleteFlight(ctx context.Context, in *FlightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create a boarding pass record. Flight related information not present in the boarding pass record will be populated from the flight, flight designator or carrier records.
	CreateBoardingPass(ctx context.Context, in *BoardingPassRecord, opts ...grpc.CallOption) (*BoardingPassesResponse, error)
	// Retrieve a boarding pass record.
	GetBoardingPassRecord(ctx context.Context, in *BoardingPassRecordRequest, opts ...grpc.CallOption) (*BoardingPassRecord, error)
	// Retrieve digital boarding pass(es) in the requested format by ticket number, index, PNR or id.
	GetBoardingPass(ctx context.Context, in *BoardingPassRequest, opts ...grpc.CallOption) (*BoardingPassesResponse, error)
	// Update a boarding pass record.
	UpdateBoardingPass(ctx context.Context, in *BoardingPassRecord, opts ...grpc.CallOption) (*BoardingPassRecord, error)
	// Delete a boarding pass record.
	DeleteBoardingPass(ctx context.Context, in *BoardingPassRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type flightsClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightsClient(cc grpc.ClientConnInterface) FlightsClient {
	return &flightsClient{cc}
}

func (c *flightsClient) CreatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Flights_CreatePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetPort(ctx context.Context, in *AirportCode, opts ...grpc.CallOption) (*Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Port)
	err := c.cc.Invoke(ctx, Flights_GetPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) UpdatePort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Port)
	err := c.cc.Invoke(ctx, Flights_UpdatePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) DeletePort(ctx context.Context, in *AirportCode, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Flights_DeletePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) CreateCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Flights_CreateCarrier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetCarrier(ctx context.Context, in *CarrierCode, opts ...grpc.CallOption) (*Carrier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Carrier)
	err := c.cc.Invoke(ctx, Flights_GetCarrier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) UpdateCarrier(ctx context.Context, in *Carrier, opts ...grpc.CallOption) (*Carrier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Carrier)
	err := c.cc.Invoke(ctx, Flights_UpdateCarrier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) DeleteCarrier(ctx context.Context, in *CarrierCode, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Flights_DeleteCarrier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) CreateFlightDesignator(ctx context.Context, in *FlightDesignator, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Flights_CreateFlightDesignator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetFlightDesignator(ctx context.Context, in *FlightDesignatorRequest, opts ...grpc.CallOption) (*FlightDesignator, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlightDesignator)
	err := c.cc.Invoke(ctx, Flights_GetFlightDesignator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) UpdateFlightDesignator(ctx context.Context, in *FlightDesignator, opts ...grpc.CallOption) (*FlightDesignator, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlightDesignator)
	err := c.cc.Invoke(ctx, Flights_UpdateFlightDesignator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) DeleteFlightDesignator(ctx context.Context, in *FlightDesignatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Flights_DeleteFlightDesignator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Flights_CreateFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetFlight(ctx context.Context, in *FlightRequest, opts ...grpc.CallOption) (*Flight, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Flight)
	err := c.cc.Invoke(ctx, Flights_GetFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Flight)
	err := c.cc.Invoke(ctx, Flights_UpdateFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) DeleteFlight(ctx context.Context, in *FlightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Flights_DeleteFlight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) CreateBoardingPass(ctx context.Context, in *BoardingPassRecord, opts ...grpc.CallOption) (*BoardingPassesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoardingPassesResponse)
	err := c.cc.Invoke(ctx, Flights_CreateBoardingPass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetBoardingPassRecord(ctx context.Context, in *BoardingPassRecordRequest, opts ...grpc.CallOption) (*BoardingPassRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoardingPassRecord)
	err := c.cc.Invoke(ctx, Flights_GetBoardingPassRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) GetBoardingPass(ctx context.Context, in *BoardingPassRequest, opts ...grpc.CallOption) (*BoardingPassesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoardingPassesResponse)
	err := c.cc.Invoke(ctx, Flights_GetBoardingPass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) UpdateBoardingPass(ctx context.Context, in *BoardingPassRecord, opts ...grpc.CallOption) (*BoardingPassRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoardingPassRecord)
	err := c.cc.Invoke(ctx, Flights_UpdateBoardingPass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightsClient) DeleteBoardingPass(ctx context.Context, in *BoardingPassRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Flights_DeleteBoardingPass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightsServer is the server API for Flights service.
// All implementations should embed UnimplementedFlightsServer
// for forward compatibility.
type FlightsServer interface {
	// Create an airport record. Optional method allowing the carrier to specify how the airport name is rendered in the pass and the GPS location that will trigger a lock-screen alert.
	CreatePort(context.Context, *Port) (*emptypb.Empty, error)
	// Retrieve an airport record. The AirportCode is the three character IATA code or 4 character ICAO code.
	GetPort(context.Context, *AirportCode) (*Port, error)
	// Update an airport record.
	UpdatePort(context.Context, *Port) (*Port, error)
	// Delete an airport record. Deleting a record will remove any custom data provided. A new Airport record may be automatically created for a flight departing, arriving or transiting an airport which does not have a record, using publicly available data.
	DeletePort(context.Context, *AirportCode) (*emptypb.Empty, error)
	// Create a carrier record. All Flight Designations and Flights must have a carrier record.
	CreateCarrier(context.Context, *Carrier) (*emptypb.Empty, error)
	// Retrieve a carrier record.
	GetCarrier(context.Context, *CarrierCode) (*Carrier, error)
	// Update a carrier record
	UpdateCarrier(context.Context, *Carrier) (*Carrier, error)
	// Delete a carrier record.
	DeleteCarrier(context.Context, *CarrierCode) (*emptypb.Empty, error)
	// Create a flight designator record. As much default information as possible should be provided to facilitate the automatic generation of flight records.
	CreateFlightDesignator(context.Context, *FlightDesignator) (*emptypb.Empty, error)
	// Retrieve a flight designation record.
	GetFlightDesignator(context.Context, *FlightDesignatorRequest) (*FlightDesignator, error)
	// Update a flight designation record.
	UpdateFlightDesignator(context.Context, *FlightDesignator) (*FlightDesignator, error)
	// Delete a flight designation record.
	DeleteFlightDesignator(context.Context, *FlightDesignatorRequest) (*emptypb.Empty, error)
	// Create a flight record. In practice, this method is not often used, since flight records can be automatically generated. Any information in the flight record will override information in the carrier and flight designation records.
	CreateFlight(context.Context, *Flight) (*emptypb.Empty, error)
	// Retrieve a flight record.
	GetFlight(context.Context, *FlightRequest) (*Flight, error)
	// Update a flight record.
	UpdateFlight(context.Context, *Flight) (*Flight, error)
	// Delete a flight record.
	DeleteFlight(context.Context, *FlightRequest) (*emptypb.Empty, error)
	// Create a boarding pass record. Flight related information not present in the boarding pass record will be populated from the flight, flight designator or carrier records.
	CreateBoardingPass(context.Context, *BoardingPassRecord) (*BoardingPassesResponse, error)
	// Retrieve a boarding pass record.
	GetBoardingPassRecord(context.Context, *BoardingPassRecordRequest) (*BoardingPassRecord, error)
	// Retrieve digital boarding pass(es) in the requested format by ticket number, index, PNR or id.
	GetBoardingPass(context.Context, *BoardingPassRequest) (*BoardingPassesResponse, error)
	// Update a boarding pass record.
	UpdateBoardingPass(context.Context, *BoardingPassRecord) (*BoardingPassRecord, error)
	// Delete a boarding pass record.
	DeleteBoardingPass(context.Context, *BoardingPassRecordRequest) (*emptypb.Empty, error)
}

// UnimplementedFlightsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlightsServer struct{}

func (UnimplementedFlightsServer) CreatePort(context.Context, *Port) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (UnimplementedFlightsServer) GetPort(context.Context, *AirportCode) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedFlightsServer) UpdatePort(context.Context, *Port) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePort not implemented")
}
func (UnimplementedFlightsServer) DeletePort(context.Context, *AirportCode) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePort not implemented")
}
func (UnimplementedFlightsServer) CreateCarrier(context.Context, *Carrier) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCarrier not implemented")
}
func (UnimplementedFlightsServer) GetCarrier(context.Context, *CarrierCode) (*Carrier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarrier not implemented")
}
func (UnimplementedFlightsServer) UpdateCarrier(context.Context, *Carrier) (*Carrier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarrier not implemented")
}
func (UnimplementedFlightsServer) DeleteCarrier(context.Context, *CarrierCode) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarrier not implemented")
}
func (UnimplementedFlightsServer) CreateFlightDesignator(context.Context, *FlightDesignator) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlightDesignator not implemented")
}
func (UnimplementedFlightsServer) GetFlightDesignator(context.Context, *FlightDesignatorRequest) (*FlightDesignator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightDesignator not implemented")
}
func (UnimplementedFlightsServer) UpdateFlightDesignator(context.Context, *FlightDesignator) (*FlightDesignator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlightDesignator not implemented")
}
func (UnimplementedFlightsServer) DeleteFlightDesignator(context.Context, *FlightDesignatorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlightDesignator not implemented")
}
func (UnimplementedFlightsServer) CreateFlight(context.Context, *Flight) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlight not implemented")
}
func (UnimplementedFlightsServer) GetFlight(context.Context, *FlightRequest) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlight not implemented")
}
func (UnimplementedFlightsServer) UpdateFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlight not implemented")
}
func (UnimplementedFlightsServer) DeleteFlight(context.Context, *FlightRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlight not implemented")
}
func (UnimplementedFlightsServer) CreateBoardingPass(context.Context, *BoardingPassRecord) (*BoardingPassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoardingPass not implemented")
}
func (UnimplementedFlightsServer) GetBoardingPassRecord(context.Context, *BoardingPassRecordRequest) (*BoardingPassRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardingPassRecord not implemented")
}
func (UnimplementedFlightsServer) GetBoardingPass(context.Context, *BoardingPassRequest) (*BoardingPassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardingPass not implemented")
}
func (UnimplementedFlightsServer) UpdateBoardingPass(context.Context, *BoardingPassRecord) (*BoardingPassRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoardingPass not implemented")
}
func (UnimplementedFlightsServer) DeleteBoardingPass(context.Context, *BoardingPassRecordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoardingPass not implemented")
}
func (UnimplementedFlightsServer) testEmbeddedByValue() {}

// UnsafeFlightsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightsServer will
// result in compilation errors.
type UnsafeFlightsServer interface {
	mustEmbedUnimplementedFlightsServer()
}

func RegisterFlightsServer(s grpc.ServiceRegistrar, srv FlightsServer) {
	// If the following call pancis, it indicates UnimplementedFlightsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Flights_ServiceDesc, srv)
}

func _Flights_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_CreatePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).CreatePort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirportCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_GetPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetPort(ctx, req.(*AirportCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_UpdatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).UpdatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_UpdatePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).UpdatePort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_DeletePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirportCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).DeletePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_DeletePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).DeletePort(ctx, req.(*AirportCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_CreateCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Carrier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).CreateCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_CreateCarrier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).CreateCarrier(ctx, req.(*Carrier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarrierCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_GetCarrier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetCarrier(ctx, req.(*CarrierCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_UpdateCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Carrier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).UpdateCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_UpdateCarrier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).UpdateCarrier(ctx, req.(*Carrier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_DeleteCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarrierCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).DeleteCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_DeleteCarrier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).DeleteCarrier(ctx, req.(*CarrierCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_CreateFlightDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightDesignator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).CreateFlightDesignator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_CreateFlightDesignator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).CreateFlightDesignator(ctx, req.(*FlightDesignator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetFlightDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightDesignatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetFlightDesignator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_GetFlightDesignator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetFlightDesignator(ctx, req.(*FlightDesignatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_UpdateFlightDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightDesignator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).UpdateFlightDesignator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_UpdateFlightDesignator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).UpdateFlightDesignator(ctx, req.(*FlightDesignator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_DeleteFlightDesignator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightDesignatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).DeleteFlightDesignator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_DeleteFlightDesignator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).DeleteFlightDesignator(ctx, req.(*FlightDesignatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_CreateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).CreateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_CreateFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).CreateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_GetFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetFlight(ctx, req.(*FlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_UpdateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).UpdateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_UpdateFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).UpdateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_DeleteFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).DeleteFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_DeleteFlight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).DeleteFlight(ctx, req.(*FlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_CreateBoardingPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).CreateBoardingPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_CreateBoardingPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).CreateBoardingPass(ctx, req.(*BoardingPassRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetBoardingPassRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetBoardingPassRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_GetBoardingPassRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetBoardingPassRecord(ctx, req.(*BoardingPassRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_GetBoardingPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).GetBoardingPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_GetBoardingPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).GetBoardingPass(ctx, req.(*BoardingPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_UpdateBoardingPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).UpdateBoardingPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_UpdateBoardingPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).UpdateBoardingPass(ctx, req.(*BoardingPassRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flights_DeleteBoardingPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardingPassRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).DeleteBoardingPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flights_DeleteBoardingPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).DeleteBoardingPass(ctx, req.(*BoardingPassRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Flights_ServiceDesc is the grpc.ServiceDesc for Flights service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flights_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flights.Flights",
	HandlerType: (*FlightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createPort",
			Handler:    _Flights_CreatePort_Handler,
		},
		{
			MethodName: "getPort",
			Handler:    _Flights_GetPort_Handler,
		},
		{
			MethodName: "updatePort",
			Handler:    _Flights_UpdatePort_Handler,
		},
		{
			MethodName: "deletePort",
			Handler:    _Flights_DeletePort_Handler,
		},
		{
			MethodName: "createCarrier",
			Handler:    _Flights_CreateCarrier_Handler,
		},
		{
			MethodName: "getCarrier",
			Handler:    _Flights_GetCarrier_Handler,
		},
		{
			MethodName: "updateCarrier",
			Handler:    _Flights_UpdateCarrier_Handler,
		},
		{
			MethodName: "deleteCarrier",
			Handler:    _Flights_DeleteCarrier_Handler,
		},
		{
			MethodName: "createFlightDesignator",
			Handler:    _Flights_CreateFlightDesignator_Handler,
		},
		{
			MethodName: "getFlightDesignator",
			Handler:    _Flights_GetFlightDesignator_Handler,
		},
		{
			MethodName: "updateFlightDesignator",
			Handler:    _Flights_UpdateFlightDesignator_Handler,
		},
		{
			MethodName: "deleteFlightDesignator",
			Handler:    _Flights_DeleteFlightDesignator_Handler,
		},
		{
			MethodName: "createFlight",
			Handler:    _Flights_CreateFlight_Handler,
		},
		{
			MethodName: "getFlight",
			Handler:    _Flights_GetFlight_Handler,
		},
		{
			MethodName: "updateFlight",
			Handler:    _Flights_UpdateFlight_Handler,
		},
		{
			MethodName: "deleteFlight",
			Handler:    _Flights_DeleteFlight_Handler,
		},
		{
			MethodName: "createBoardingPass",
			Handler:    _Flights_CreateBoardingPass_Handler,
		},
		{
			MethodName: "getBoardingPassRecord",
			Handler:    _Flights_GetBoardingPassRecord_Handler,
		},
		{
			MethodName: "getBoardingPass",
			Handler:    _Flights_GetBoardingPass_Handler,
		},
		{
			MethodName: "updateBoardingPass",
			Handler:    _Flights_UpdateBoardingPass_Handler,
		},
		{
			MethodName: "deleteBoardingPass",
			Handler:    _Flights_DeleteBoardingPass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "io/flights/a_rpc.proto",
}
