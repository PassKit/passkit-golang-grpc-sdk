//*
// Passengers
//
// Passenger information can optionally be provided. All fields are optional with the exception of the Passenger name to be rendered on the boarding pass.
// All passenger is treated as PII and encrypted at rest. Passenger information is deleted or rendered unusable once the pass record has invalidated.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/flights/passenger.proto

package flights

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of document used to validate the traveler's identity.
type IdentityDocument int32

const (
	// Passport
	IdentityDocument_PASSPORT IdentityDocument = 0
	// National ID card
	IdentityDocument_NATIONAL_ID_CARD IdentityDocument = 1
	// Driving license
	IdentityDocument_DRIVING_LICENSE IdentityDocument = 2
	// Credit card
	IdentityDocument_CREDIT_CARD IdentityDocument = 3
	// Frequent flyer card
	IdentityDocument_FREQUENT_FLYER_CARD IdentityDocument = 4
	// Other travel document
	IdentityDocument_OTHER_TRAVEL_DOCUMENT IdentityDocument = 5
)

// Enum value maps for IdentityDocument.
var (
	IdentityDocument_name = map[int32]string{
		0: "PASSPORT",
		1: "NATIONAL_ID_CARD",
		2: "DRIVING_LICENSE",
		3: "CREDIT_CARD",
		4: "FREQUENT_FLYER_CARD",
		5: "OTHER_TRAVEL_DOCUMENT",
	}
	IdentityDocument_value = map[string]int32{
		"PASSPORT":              0,
		"NATIONAL_ID_CARD":      1,
		"DRIVING_LICENSE":       2,
		"CREDIT_CARD":           3,
		"FREQUENT_FLYER_CARD":   4,
		"OTHER_TRAVEL_DOCUMENT": 5,
	}
)

func (x IdentityDocument) Enum() *IdentityDocument {
	p := new(IdentityDocument)
	*p = x
	return p
}

func (x IdentityDocument) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityDocument) Descriptor() protoreflect.EnumDescriptor {
	return file_io_flights_passenger_proto_enumTypes[0].Descriptor()
}

func (IdentityDocument) Type() protoreflect.EnumType {
	return &file_io_flights_passenger_proto_enumTypes[0]
}

func (x IdentityDocument) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityDocument.Descriptor instead.
func (IdentityDocument) EnumDescriptor() ([]byte, []int) {
	return file_io_flights_passenger_proto_rawDescGZIP(), []int{0}
}

// Details of a passenger and any infant.
type Passenger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Personal details of the passenger.
	// @tag: "validateGeneric:"required"
	PassengerDetails *io.Person `protobuf:"bytes,1,opt,name=passengerDetails,proto3" json:"passengerDetails,omitempty" validateGeneric:"required"`
	// Frequent flyer details for th passenger.
	// @tag: "validateGeneric:"omitempty"
	FrequentFlyerInfo *FrequentFlyerInfo `protobuf:"bytes,2,opt,name=frequentFlyerInfo,proto3" json:"frequentFlyerInfo,omitempty" validateGeneric:"omitempty"`
	// Optional identity details, only required if need to be rendered on the pass, or for analytics purposes.
	// @tag: "validateGeneric:"omitempty"
	IdentityDetails *IdentityDetails `protobuf:"bytes,3,opt,name=identityDetails,proto3" json:"identityDetails,omitempty" validateGeneric:"omitempty"`
	// If the passenger is travelling with an infant under 2 years old, not occupying a seat, set to true.
	// @tag: "validateGeneric:"omitempty"
	WithInfant bool `protobuf:"varint,4,opt,name=withInfant,proto3" json:"withInfant,omitempty" validateGeneric:"omitempty"`
	// Details of the infant travelling with the passenger.
	// @tag: "validateGeneric:"omitempty"
	InfantDetails *Infant `protobuf:"bytes,5,opt,name=infantDetails,proto3" json:"infantDetails,omitempty" validateGeneric:"omitempty"`
	// If a passenger has a Known Traveler Number (KTN) or trusted traveler number, record it here.
	// @tag: "validateGeneric:"omitempty"
	KnownTravelerNumber string `protobuf:"bytes,7,opt,name=knownTravelerNumber,proto3" json:"knownTravelerNumber,omitempty" validateGeneric:"omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Passenger) Reset() {
	*x = Passenger{}
	mi := &file_io_flights_passenger_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Passenger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Passenger) ProtoMessage() {}

func (x *Passenger) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_passenger_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Passenger.ProtoReflect.Descriptor instead.
func (*Passenger) Descriptor() ([]byte, []int) {
	return file_io_flights_passenger_proto_rawDescGZIP(), []int{0}
}

func (x *Passenger) GetPassengerDetails() *io.Person {
	if x != nil {
		return x.PassengerDetails
	}
	return nil
}

func (x *Passenger) GetFrequentFlyerInfo() *FrequentFlyerInfo {
	if x != nil {
		return x.FrequentFlyerInfo
	}
	return nil
}

func (x *Passenger) GetIdentityDetails() *IdentityDetails {
	if x != nil {
		return x.IdentityDetails
	}
	return nil
}

func (x *Passenger) GetWithInfant() bool {
	if x != nil {
		return x.WithInfant
	}
	return false
}

func (x *Passenger) GetInfantDetails() *Infant {
	if x != nil {
		return x.InfantDetails
	}
	return nil
}

func (x *Passenger) GetKnownTravelerNumber() string {
	if x != nil {
		return x.KnownTravelerNumber
	}
	return ""
}

// Passenger Frequent Flyer information
type FrequentFlyerInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The the marketing name for the frequent flyer program, e.g. KrisFlyer, Miles & More, Skymiles, etc.
	// @tag: "validateGeneric:"omitempty"
	ProgramName string `protobuf:"bytes,1,opt,name=programName,proto3" json:"programName,omitempty" validateGeneric:"omitempty"`
	// The airline designator of the traveler's frequent flyer program.
	// @tag: "validateGeneric:"required"
	AirlineDesignator string `protobuf:"bytes,2,opt,name=airlineDesignator,proto3" json:"airlineDesignator,omitempty" validateGeneric:"required"`
	// The traveler frequent flyer number.
	// @tag: "validateGeneric:"required"
	Number string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty" validateGeneric:"required"`
	// An optional code to represent the tier of the traveler, if known. This field may be used to render a tier specific logo on the boarding pass.
	// @tag: "validateGeneric:"omitempty"
	Tier          string `protobuf:"bytes,4,opt,name=tier,proto3" json:"tier,omitempty" validateGeneric:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrequentFlyerInfo) Reset() {
	*x = FrequentFlyerInfo{}
	mi := &file_io_flights_passenger_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequentFlyerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequentFlyerInfo) ProtoMessage() {}

func (x *FrequentFlyerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_passenger_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequentFlyerInfo.ProtoReflect.Descriptor instead.
func (*FrequentFlyerInfo) Descriptor() ([]byte, []int) {
	return file_io_flights_passenger_proto_rawDescGZIP(), []int{1}
}

func (x *FrequentFlyerInfo) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

func (x *FrequentFlyerInfo) GetAirlineDesignator() string {
	if x != nil {
		return x.AirlineDesignator
	}
	return ""
}

func (x *FrequentFlyerInfo) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *FrequentFlyerInfo) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

// Details of document used to identify the traveler's identity.
type IdentityDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of document used to validate the traveler's identity.
	IdentityDocument IdentityDocument `protobuf:"varint,1,opt,name=identityDocument,proto3,enum=flights.IdentityDocument" json:"identityDocument,omitempty"`
	// The two digit ISO 3166 country code of the country of the travel document issuing authority.
	IssuingCountry string `protobuf:"bytes,2,opt,name=issuingCountry,proto3" json:"issuingCountry,omitempty"`
	// The two digit ISO 3166 country code of the traveler's nationality.
	Nationality string `protobuf:"bytes,3,opt,name=nationality,proto3" json:"nationality,omitempty"`
	// The number or other unique identifying reference of the traveler's document.
	DocumentNumber string `protobuf:"bytes,4,opt,name=documentNumber,proto3" json:"documentNumber,omitempty"`
	// The date of birth as marked on the traveler's identity document.
	DateOfBirth *io.Date `protobuf:"bytes,5,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	// The gender as marked on the traveler's identity document.
	Gender io.Gender `protobuf:"varint,6,opt,name=gender,proto3,enum=io.Gender" json:"gender,omitempty"`
	// The issue date of the traveler's identity document.
	IssuedDate *io.Date `protobuf:"bytes,7,opt,name=issuedDate,proto3" json:"issuedDate,omitempty"`
	// The expiry date of the traveler's identity document.
	ExpiryDate    *io.Date `protobuf:"bytes,8,opt,name=expiryDate,proto3" json:"expiryDate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityDetails) Reset() {
	*x = IdentityDetails{}
	mi := &file_io_flights_passenger_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityDetails) ProtoMessage() {}

func (x *IdentityDetails) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_passenger_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityDetails.ProtoReflect.Descriptor instead.
func (*IdentityDetails) Descriptor() ([]byte, []int) {
	return file_io_flights_passenger_proto_rawDescGZIP(), []int{2}
}

func (x *IdentityDetails) GetIdentityDocument() IdentityDocument {
	if x != nil {
		return x.IdentityDocument
	}
	return IdentityDocument_PASSPORT
}

func (x *IdentityDetails) GetIssuingCountry() string {
	if x != nil {
		return x.IssuingCountry
	}
	return ""
}

func (x *IdentityDetails) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *IdentityDetails) GetDocumentNumber() string {
	if x != nil {
		return x.DocumentNumber
	}
	return ""
}

func (x *IdentityDetails) GetDateOfBirth() *io.Date {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *IdentityDetails) GetGender() io.Gender {
	if x != nil {
		return x.Gender
	}
	return io.Gender(0)
}

func (x *IdentityDetails) GetIssuedDate() *io.Date {
	if x != nil {
		return x.IssuedDate
	}
	return nil
}

func (x *IdentityDetails) GetExpiryDate() *io.Date {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

// Details of infant under 2 years not occupying a seat.
type Infant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Personal details of the infant.
	// @tag: "validateGeneric:"required"
	InfantDetails *io.Person `protobuf:"bytes,1,opt,name=infantDetails,proto3" json:"infantDetails,omitempty" validateGeneric:"required"`
	// Optional identity details, only required if need to be rendered on the pass, or for analytics purposes.
	// @tag: "validateGeneric:"omitempty"
	IdentityDetails *IdentityDetails `protobuf:"bytes,2,opt,name=identityDetails,proto3" json:"identityDetails,omitempty" validateGeneric:"omitempty"`
	// The barcode payload to be rendered on the infant boarding pass. If not provided, an IATA barcode will be compiled, based on the adult boarding pass barcode data.
	// @tag: "validateGeneric:"omitempty"
	BarcodePayload string `protobuf:"bytes,3,opt,name=barcodePayload,proto3" json:"barcodePayload,omitempty" validateGeneric:"omitempty"`
	// Optional conditional items for the infant barcode.  Not required if barcode payload is set.
	// @tag: "validateGeneric:"omitempty"
	ConditionalItems *ConditionalItems `protobuf:"bytes,4,opt,name=conditionalItems,proto3" json:"conditionalItems,omitempty" validateGeneric:"omitempty"`
	// Optional additional barcode data. If PassKit are generating barcodes, airline use data (IATA item 4) to be included in the infant barcode.
	// @tag: "validateGeneric:"omitempty"
	BarcodeAdditionalData string `protobuf:"bytes,5,opt,name=barcodeAdditionalData,proto3" json:"barcodeAdditionalData,omitempty" validateGeneric:"omitempty"`
	// Security image id for display above the barcode on a Google Pay pass.
	// @tag: validateGeneric:"omitempty"
	SecurityImage string `protobuf:"bytes,6,opt,name=securityImage,proto3" json:"securityImage,omitempty" validateGeneric:"omitempty"`
	// Privilege image id for display above the barcode on a Google Pay pass.
	// @tag: validateGeneric:"omitempty"
	PrivilegeImage string `protobuf:"bytes,7,opt,name=privilegeImage,proto3" json:"privilegeImage,omitempty" validateGeneric:"omitempty"`
	// Footer image id for display above the barcode on iOS devices.
	// @tag: validateGeneric:"omitempty"
	FooterImage   string `protobuf:"bytes,8,opt,name=footerImage,proto3" json:"footerImage,omitempty" validateGeneric:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Infant) Reset() {
	*x = Infant{}
	mi := &file_io_flights_passenger_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Infant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Infant) ProtoMessage() {}

func (x *Infant) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_passenger_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Infant.ProtoReflect.Descriptor instead.
func (*Infant) Descriptor() ([]byte, []int) {
	return file_io_flights_passenger_proto_rawDescGZIP(), []int{3}
}

func (x *Infant) GetInfantDetails() *io.Person {
	if x != nil {
		return x.InfantDetails
	}
	return nil
}

func (x *Infant) GetIdentityDetails() *IdentityDetails {
	if x != nil {
		return x.IdentityDetails
	}
	return nil
}

func (x *Infant) GetBarcodePayload() string {
	if x != nil {
		return x.BarcodePayload
	}
	return ""
}

func (x *Infant) GetConditionalItems() *ConditionalItems {
	if x != nil {
		return x.ConditionalItems
	}
	return nil
}

func (x *Infant) GetBarcodeAdditionalData() string {
	if x != nil {
		return x.BarcodeAdditionalData
	}
	return ""
}

func (x *Infant) GetSecurityImage() string {
	if x != nil {
		return x.SecurityImage
	}
	return ""
}

func (x *Infant) GetPrivilegeImage() string {
	if x != nil {
		return x.PrivilegeImage
	}
	return ""
}

func (x *Infant) GetFooterImage() string {
	if x != nil {
		return x.FooterImage
	}
	return ""
}

var File_io_flights_passenger_proto protoreflect.FileDescriptor

var file_io_flights_passenger_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x69, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0x18, 0x69, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x05, 0x0a, 0x09, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x48, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x46, 0x6c, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x12, 0x35, 0x0a,
	0x0d, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x49,
	0x6e, 0x66, 0x61, 0x6e, 0x74, 0x52, 0x0d, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0xd2, 0x02, 0x92, 0x41, 0xce, 0x02, 0x0a, 0xcb, 0x02,
	0x2a, 0x09, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x32, 0xaa, 0x02, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x6c, 0x79, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2e, 0x20,
	0x41, 0x6c, 0x6c, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x2e, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x74, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61,
	0x73, 0x20, 0x50, 0x49, 0x49, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x20, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x72,
	0x20, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x75, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x6f, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x68, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2e, 0xd2, 0x01, 0x10, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x11,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x22, 0xee, 0x02,
	0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x45, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0a, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0x93,
	0x03, 0x0a, 0x06, 0x49, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0d, 0x69, 0x6e, 0x66,
	0x61, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e,
	0x66, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x2a, 0x90, 0x01, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x53,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x52, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x4c, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x42, 0x5f, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x5a, 0x2c, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b,
	0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0xaa, 0x02, 0x14, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_flights_passenger_proto_rawDescOnce sync.Once
	file_io_flights_passenger_proto_rawDescData []byte
)

func file_io_flights_passenger_proto_rawDescGZIP() []byte {
	file_io_flights_passenger_proto_rawDescOnce.Do(func() {
		file_io_flights_passenger_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_flights_passenger_proto_rawDesc), len(file_io_flights_passenger_proto_rawDesc)))
	})
	return file_io_flights_passenger_proto_rawDescData
}

var file_io_flights_passenger_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_io_flights_passenger_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_io_flights_passenger_proto_goTypes = []any{
	(IdentityDocument)(0),     // 0: flights.IdentityDocument
	(*Passenger)(nil),         // 1: flights.Passenger
	(*FrequentFlyerInfo)(nil), // 2: flights.FrequentFlyerInfo
	(*IdentityDetails)(nil),   // 3: flights.IdentityDetails
	(*Infant)(nil),            // 4: flights.Infant
	(*io.Person)(nil),         // 5: io.Person
	(*io.Date)(nil),           // 6: io.Date
	(io.Gender)(0),            // 7: io.Gender
	(*ConditionalItems)(nil),  // 8: flights.ConditionalItems
}
var file_io_flights_passenger_proto_depIdxs = []int32{
	5,  // 0: flights.Passenger.passengerDetails:type_name -> io.Person
	2,  // 1: flights.Passenger.frequentFlyerInfo:type_name -> flights.FrequentFlyerInfo
	3,  // 2: flights.Passenger.identityDetails:type_name -> flights.IdentityDetails
	4,  // 3: flights.Passenger.infantDetails:type_name -> flights.Infant
	0,  // 4: flights.IdentityDetails.identityDocument:type_name -> flights.IdentityDocument
	6,  // 5: flights.IdentityDetails.dateOfBirth:type_name -> io.Date
	7,  // 6: flights.IdentityDetails.gender:type_name -> io.Gender
	6,  // 7: flights.IdentityDetails.issuedDate:type_name -> io.Date
	6,  // 8: flights.IdentityDetails.expiryDate:type_name -> io.Date
	5,  // 9: flights.Infant.infantDetails:type_name -> io.Person
	3,  // 10: flights.Infant.identityDetails:type_name -> flights.IdentityDetails
	8,  // 11: flights.Infant.conditionalItems:type_name -> flights.ConditionalItems
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_io_flights_passenger_proto_init() }
func file_io_flights_passenger_proto_init() {
	if File_io_flights_passenger_proto != nil {
		return
	}
	file_io_flights_barcode_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_flights_passenger_proto_rawDesc), len(file_io_flights_passenger_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_flights_passenger_proto_goTypes,
		DependencyIndexes: file_io_flights_passenger_proto_depIdxs,
		EnumInfos:         file_io_flights_passenger_proto_enumTypes,
		MessageInfos:      file_io_flights_passenger_proto_msgTypes,
	}.Build()
	File_io_flights_passenger_proto = out.File
	file_io_flights_passenger_proto_goTypes = nil
	file_io_flights_passenger_proto_depIdxs = nil
}
