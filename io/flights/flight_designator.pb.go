//*
// Flight Designators
//
// Flight Designators hold permanent and semi-permanent data for a Flight.  A Flight Designator record requires a Carrier Record to be set up first. Multiple Flight designations can simultaneously exist with the `validFrom` field being used to identify which data to use for a particular Flight date.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/flights/flight_designator.proto

package flights

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Flight alerts automatically update boarding passes as information becomes available or changes. Note that these services may incur additional usage charges.
type FlightAlerts int32

const (
	// Boarding passes will not automatically update.
	FlightAlerts_NO_ALERTS FlightAlerts = 0
	// Boarding passes will automatically update whenever a change to the departure gate/time, arrival gate/time or baggage belt information is detected.
	FlightAlerts_ALL_ALERTS FlightAlerts = 1
	// Boarding passes will automatically update whenever a change to the departure gate is detected.
	FlightAlerts_DEPARTURE_GATE_ALERT FlightAlerts = 2
	// Boarding passes will automatically update whenever a change to the estimated departure gate is detected.
	FlightAlerts_DEPARTURE_TIME_ALERT FlightAlerts = 4
	// Boarding passes will automatically update whenever a change to the arrival gate is detected.
	FlightAlerts_ARRIVAL_GATE_ALERT FlightAlerts = 8
	// Boarding passes will automatically update whenever a change to the estimated arrival time is detected.
	FlightAlerts_ARRIVAL_TIME_ALERT FlightAlerts = 16
	// Boarding passes will automatically update whenever the baggage collection belt or area is known or changes.
	FlightAlerts_BAGGAGE_BELT_ALERT FlightAlerts = 32
)

// Enum value maps for FlightAlerts.
var (
	FlightAlerts_name = map[int32]string{
		0:  "NO_ALERTS",
		1:  "ALL_ALERTS",
		2:  "DEPARTURE_GATE_ALERT",
		4:  "DEPARTURE_TIME_ALERT",
		8:  "ARRIVAL_GATE_ALERT",
		16: "ARRIVAL_TIME_ALERT",
		32: "BAGGAGE_BELT_ALERT",
	}
	FlightAlerts_value = map[string]int32{
		"NO_ALERTS":            0,
		"ALL_ALERTS":           1,
		"DEPARTURE_GATE_ALERT": 2,
		"DEPARTURE_TIME_ALERT": 4,
		"ARRIVAL_GATE_ALERT":   8,
		"ARRIVAL_TIME_ALERT":   16,
		"BAGGAGE_BELT_ALERT":   32,
	}
)

func (x FlightAlerts) Enum() *FlightAlerts {
	p := new(FlightAlerts)
	*p = x
	return p
}

func (x FlightAlerts) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightAlerts) Descriptor() protoreflect.EnumDescriptor {
	return file_io_flights_flight_designator_proto_enumTypes[0].Descriptor()
}

func (FlightAlerts) Type() protoreflect.EnumType {
	return &file_io_flights_flight_designator_proto_enumTypes[0]
}

func (x FlightAlerts) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightAlerts.Descriptor instead.
func (FlightAlerts) EnumDescriptor() ([]byte, []int) {
	return file_io_flights_flight_designator_proto_rawDescGZIP(), []int{0}
}

// The Boarding Policy is used to determine informational labels on the pass.
type BoardingPolicy int32

const (
	BoardingPolicy_BOARDING_POLICY_UNSPECIFIED BoardingPolicy = 0
	// Boarding is managed by zone.
	BoardingPolicy_ZONE_BASED BoardingPolicy = 1
	// Boarding is managed by group.
	BoardingPolicy_GROUP_BASED BoardingPolicy = 2
	// Another, or No boarding policy is in place.
	BoardingPolicy_BOARDING_POLICY_OTHER BoardingPolicy = 3
)

// Enum value maps for BoardingPolicy.
var (
	BoardingPolicy_name = map[int32]string{
		0: "BOARDING_POLICY_UNSPECIFIED",
		1: "ZONE_BASED",
		2: "GROUP_BASED",
		3: "BOARDING_POLICY_OTHER",
	}
	BoardingPolicy_value = map[string]int32{
		"BOARDING_POLICY_UNSPECIFIED": 0,
		"ZONE_BASED":                  1,
		"GROUP_BASED":                 2,
		"BOARDING_POLICY_OTHER":       3,
	}
)

func (x BoardingPolicy) Enum() *BoardingPolicy {
	p := new(BoardingPolicy)
	*p = x
	return p
}

func (x BoardingPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoardingPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_io_flights_flight_designator_proto_enumTypes[1].Descriptor()
}

func (BoardingPolicy) Type() protoreflect.EnumType {
	return &file_io_flights_flight_designator_proto_enumTypes[1]
}

func (x BoardingPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoardingPolicy.Descriptor instead.
func (BoardingPolicy) EnumDescriptor() ([]byte, []int) {
	return file_io_flights_flight_designator_proto_rawDescGZIP(), []int{1}
}

// The Seat Class Policy is used to determine informational labels on the pass.
type SeatClassPolicy int32

const (
	SeatClassPolicy_SEAT_CLASS_POLICY_UNSPECIFIED SeatClassPolicy = 0
	// Seats groups are determined by cabin. "Cabin" will be used as the label on the pass.
	SeatClassPolicy_CABIN_BASED SeatClassPolicy = 1
	// Seats groups are determined by class of travel. "Class" will be used as the label on the pass.
	SeatClassPolicy_CLASS_BASED SeatClassPolicy = 2
	// Seat groups are determined by tier. "Tier" will be used as the label on the pass.
	SeatClassPolicy_TIER_BASED SeatClassPolicy = 3
	// Another, or no seat policy is in place. No label will be used on the pass.
	SeatClassPolicy_SEAT_CLASS_POLICY_OTHER SeatClassPolicy = 4
)

// Enum value maps for SeatClassPolicy.
var (
	SeatClassPolicy_name = map[int32]string{
		0: "SEAT_CLASS_POLICY_UNSPECIFIED",
		1: "CABIN_BASED",
		2: "CLASS_BASED",
		3: "TIER_BASED",
		4: "SEAT_CLASS_POLICY_OTHER",
	}
	SeatClassPolicy_value = map[string]int32{
		"SEAT_CLASS_POLICY_UNSPECIFIED": 0,
		"CABIN_BASED":                   1,
		"CLASS_BASED":                   2,
		"TIER_BASED":                    3,
		"SEAT_CLASS_POLICY_OTHER":       4,
	}
)

func (x SeatClassPolicy) Enum() *SeatClassPolicy {
	p := new(SeatClassPolicy)
	*p = x
	return p
}

func (x SeatClassPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeatClassPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_io_flights_flight_designator_proto_enumTypes[2].Descriptor()
}

func (SeatClassPolicy) Type() protoreflect.EnumType {
	return &file_io_flights_flight_designator_proto_enumTypes[2]
}

func (x SeatClassPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeatClassPolicy.Descriptor instead.
func (SeatClassPolicy) EnumDescriptor() ([]byte, []int) {
	return file_io_flights_flight_designator_proto_rawDescGZIP(), []int{2}
}

// The authority of an identifier (carrier code, airport code, etc.).
type Authority int32

const (
	// International Air Transport Association (IATA).
	Authority_IATA Authority = 0
	// International Civil Aviation Organization (ICAO).
	Authority_ICAO Authority = 1
)

// Enum value maps for Authority.
var (
	Authority_name = map[int32]string{
		0: "IATA",
		1: "ICAO",
	}
	Authority_value = map[string]int32{
		"IATA": 0,
		"ICAO": 1,
	}
)

func (x Authority) Enum() *Authority {
	p := new(Authority)
	*p = x
	return p
}

func (x Authority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authority) Descriptor() protoreflect.EnumDescriptor {
	return file_io_flights_flight_designator_proto_enumTypes[3].Descriptor()
}

func (Authority) Type() protoreflect.EnumType {
	return &file_io_flights_flight_designator_proto_enumTypes[3]
}

func (x Authority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Authority.Descriptor instead.
func (Authority) EnumDescriptor() ([]byte, []int) {
	return file_io_flights_flight_designator_proto_rawDescGZIP(), []int{3}
}

// carrier code and flight number and valid from represent the primary key.
type FlightDesignator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The IATA or ICAO carrier code for the flight. In the case of a code-share, this should be the carrier code that you wish to present to the customer. This could be the marketing code, or the operating airline code. A carrier record for this code must exist.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=2|fixedLenAlphaNum=3"
	CarrierCode string `protobuf:"bytes,1,opt,name=carrierCode,proto3" json:"carrierCode,omitempty" validateGeneric:"required,fixedLenAlphaNum=2|fixedLenAlphaNum=3"`
	// The flight number.  Note this number must match the carrier code.
	// @tag: validateGeneric:"required,alphanum,max=5"
	FlightNumber string `protobuf:"bytes,2,opt,name=flightNumber,proto3" json:"flightNumber,omitempty" validateGeneric:"required,alphanum,max=5"`
	// The date that the record is valid from. If not provided, then the date of submission will be used.
	ValidFrom *io.Date `protobuf:"bytes,3,opt,name=validFrom,proto3" json:"validFrom,omitempty"`
	// Multiple designators can be active at a time. Provide a revision to distinguish between versions.
	// @tag: validateGeneric:"required,min=1"
	Revision uint32 `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty" validateGeneric:"required,min=1"`
	// Setting to false will prevent further flights to be created against this flight number. Will automatically be set to false if a second designator with a validFrom date before the current date and after this designator's validFrom date is found.
	Active bool `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	// The published flight schedule. If a flight object for a particular departure doesn't exist, these defaults are used. One-off changes to scheduled times for an individual departure should be handled by the Flight object. Long term changes should create a new revision of the FlightDesignator record.
	// @tag: validateGeneric:"required,flightSchedule"
	Schedule *FlightSchedule `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule,omitempty" validateGeneric:"required,flightSchedule"`
	// If the flight is operated by a carrier other than the carrierCode supplied, provide the IATA or ICAO carrier code for the operating carrier.  A carrier record must exist.
	// @tag: validateGeneric:"required_with=OperatingFlightNumber,fixedLenAlphaNum=2|fixedLenAlphaNum=3|isdefault"
	OperatingCarrierCode string `protobuf:"bytes,7,opt,name=operatingCarrierCode,proto3" json:"operatingCarrierCode,omitempty" validateGeneric:"required_with=OperatingFlightNumber,fixedLenAlphaNum=2|fixedLenAlphaNum=3|isdefault"`
	// If the flight is operated by a carrier other than the carrierCode supplied, provide the flight number for the operating carrier.
	// @tag: validateGeneric:"required_with=OperatingCarrierCode,alphanum|isdefault,max=5"
	OperatingFlightNumber string `protobuf:"bytes,8,opt,name=operatingFlightNumber,proto3" json:"operatingFlightNumber,omitempty" validateGeneric:"required_with=OperatingCarrierCode,alphanum|isdefault,max=5"`
	// If the flight has code shares, then enter the carrier code and flight number. If there is an operating carrier, then do not include this in the list.  Code share carriers will not be validated.
	// @tag: validateGeneric:"omitempty,max=10,dive,alphanum,max=8"
	CodeShareFlightNumbers []string `protobuf:"bytes,9,rep,name=codeShareFlightNumbers,proto3" json:"codeShareFlightNumbers,omitempty" validateGeneric:"omitempty,max=10,dive,alphanum,max=8"`
	// The origin port of the flight. In the case of direct flights with multiple stops, this will represent the port where the route commences.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"
	Origin string `protobuf:"bytes,10,opt,name=origin,proto3" json:"origin,omitempty" validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"`
	// The destination port of the flight. In the case of direct flights with multiple stops, this will represent the final port where the route terminates.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"
	Destination string `protobuf:"bytes,11,opt,name=destination,proto3" json:"destination,omitempty" validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"`
	// In the case of multiple stops, an ordered array of transit points, commencing with the first port after the origin and ending with the penultimate port.
	// @tag: validateGeneric:"omitempty,dive,fixedLenAlphaNum=3|fixedLenAlphaNum=4"
	TransitPoints []string `protobuf:"bytes,12,rep,name=transitPoints,proto3" json:"transitPoints,omitempty" validateGeneric:"omitempty,dive,fixedLenAlphaNum=3|fixedLenAlphaNum=4"`
	// The default terminal that the flight departs from.
	DepartureTerminal string `protobuf:"bytes,13,opt,name=departureTerminal,proto3" json:"departureTerminal,omitempty"`
	// The default terminal of the final destination.
	ArrivalTerminal string `protobuf:"bytes,14,opt,name=arrivalTerminal,proto3" json:"arrivalTerminal,omitempty"`
	// In the case of multiple stops, an ordered array of transit terminals. The length of this array should match the number of transit points.
	TransitTerminals []string `protobuf:"bytes,15,rep,name=transitTerminals,proto3" json:"transitTerminals,omitempty"`
	// The Boarding Policy is used to determine informational labels on the pass.
	BoardingPolicy BoardingPolicy `protobuf:"varint,16,opt,name=boardingPolicy,proto3,enum=flights.BoardingPolicy" json:"boardingPolicy,omitempty"`
	// The Seat Class Policy is used to determine informational labels on the pass.
	SeatClassPolicy SeatClassPolicy `protobuf:"varint,17,opt,name=seatClassPolicy,proto3,enum=flights.SeatClassPolicy" json:"seatClassPolicy,omitempty"`
	// An array of alerts to subscribe to for the flight. Note that additional charges apply.
	Alerts []FlightAlerts `protobuf:"varint,18,rep,packed,name=alerts,proto3,enum=flights.FlightAlerts" json:"alerts,omitempty"`
	// The PassKit template id that will be used for boarding passes for this flight. It can be overwritten at the flight level.
	// @tag: validateGeneric:"required,uuidCompressedString"
	PassTemplateId string `protobuf:"bytes,19,opt,name=passTemplateId,proto3" json:"passTemplateId,omitempty" validateGeneric:"required,uuidCompressedString"`
	// Minutes after scheduled arrival time to automatically invalidate the pass. Enter a value of 9999999 or greater if the pass should not auto invalidate. Default is 48 hours.
	AutoInvalidateAfter uint32 `protobuf:"varint,20,opt,name=autoInvalidateAfter,proto3" json:"autoInvalidateAfter,omitempty"`
	// Deprecated: Use InvalidateCancelledPasses.
	//
	// Deprecated: Marked as deprecated in io/flights/flight_designator.proto.
	AutoInvalidateCancelledPasses bool `protobuf:"varint,21,opt,name=autoInvalidateCancelledPasses,proto3" json:"autoInvalidateCancelledPasses,omitempty"`
	// A list of up to 10 GPS locations where this boarding pass should be presented on the lock-screen.
	// @tag: validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"
	LocationMessages []*io.GPSLocation `protobuf:"bytes,22,rep,name=locationMessages,proto3" json:"locationMessages,omitempty" validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"`
	// A list of up to 10 Beacon UUIDs that should trigger the boarding pass to be presented on the lock-screen.
	// @tag: validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"
	BeaconMessages []*io.Beacon `protobuf:"bytes,23,rep,name=beaconMessages,proto3" json:"beaconMessages,omitempty" validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"`
	// A list of links to be appended to the end of each boarding pass.
	// @tag: validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"
	DefaultLinks []*io.Link `protobuf:"bytes,24,rep,name=defaultLinks,proto3" json:"defaultLinks,omitempty" validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"`
	// If PassKit are generating barcodes, include conditional items. Default false.
	ConditionalItems bool `protobuf:"varint,25,opt,name=ConditionalItems,proto3" json:"ConditionalItems,omitempty"`
	// If PassKit are generating barcodes, default airline use data (IATA item 4). This can be overwritten at the flight and boarding pass level.
	BarcodeAdditionalData string `protobuf:"bytes,26,opt,name=BarcodeAdditionalData,proto3" json:"BarcodeAdditionalData,omitempty"`
	// Invalidate passes where either the booking or the flight have been cancelled. Default is ON.
	InvalidateCancelledPasses io.Toggle `protobuf:"varint,27,opt,name=invalidateCancelledPasses,proto3,enum=io.Toggle" json:"invalidateCancelledPasses,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *FlightDesignator) Reset() {
	*x = FlightDesignator{}
	mi := &file_io_flights_flight_designator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlightDesignator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightDesignator) ProtoMessage() {}

func (x *FlightDesignator) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_flight_designator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightDesignator.ProtoReflect.Descriptor instead.
func (*FlightDesignator) Descriptor() ([]byte, []int) {
	return file_io_flights_flight_designator_proto_rawDescGZIP(), []int{0}
}

func (x *FlightDesignator) GetCarrierCode() string {
	if x != nil {
		return x.CarrierCode
	}
	return ""
}

func (x *FlightDesignator) GetFlightNumber() string {
	if x != nil {
		return x.FlightNumber
	}
	return ""
}

func (x *FlightDesignator) GetValidFrom() *io.Date {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *FlightDesignator) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *FlightDesignator) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *FlightDesignator) GetSchedule() *FlightSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *FlightDesignator) GetOperatingCarrierCode() string {
	if x != nil {
		return x.OperatingCarrierCode
	}
	return ""
}

func (x *FlightDesignator) GetOperatingFlightNumber() string {
	if x != nil {
		return x.OperatingFlightNumber
	}
	return ""
}

func (x *FlightDesignator) GetCodeShareFlightNumbers() []string {
	if x != nil {
		return x.CodeShareFlightNumbers
	}
	return nil
}

func (x *FlightDesignator) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *FlightDesignator) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *FlightDesignator) GetTransitPoints() []string {
	if x != nil {
		return x.TransitPoints
	}
	return nil
}

func (x *FlightDesignator) GetDepartureTerminal() string {
	if x != nil {
		return x.DepartureTerminal
	}
	return ""
}

func (x *FlightDesignator) GetArrivalTerminal() string {
	if x != nil {
		return x.ArrivalTerminal
	}
	return ""
}

func (x *FlightDesignator) GetTransitTerminals() []string {
	if x != nil {
		return x.TransitTerminals
	}
	return nil
}

func (x *FlightDesignator) GetBoardingPolicy() BoardingPolicy {
	if x != nil {
		return x.BoardingPolicy
	}
	return BoardingPolicy_BOARDING_POLICY_UNSPECIFIED
}

func (x *FlightDesignator) GetSeatClassPolicy() SeatClassPolicy {
	if x != nil {
		return x.SeatClassPolicy
	}
	return SeatClassPolicy_SEAT_CLASS_POLICY_UNSPECIFIED
}

func (x *FlightDesignator) GetAlerts() []FlightAlerts {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *FlightDesignator) GetPassTemplateId() string {
	if x != nil {
		return x.PassTemplateId
	}
	return ""
}

func (x *FlightDesignator) GetAutoInvalidateAfter() uint32 {
	if x != nil {
		return x.AutoInvalidateAfter
	}
	return 0
}

// Deprecated: Marked as deprecated in io/flights/flight_designator.proto.
func (x *FlightDesignator) GetAutoInvalidateCancelledPasses() bool {
	if x != nil {
		return x.AutoInvalidateCancelledPasses
	}
	return false
}

func (x *FlightDesignator) GetLocationMessages() []*io.GPSLocation {
	if x != nil {
		return x.LocationMessages
	}
	return nil
}

func (x *FlightDesignator) GetBeaconMessages() []*io.Beacon {
	if x != nil {
		return x.BeaconMessages
	}
	return nil
}

func (x *FlightDesignator) GetDefaultLinks() []*io.Link {
	if x != nil {
		return x.DefaultLinks
	}
	return nil
}

func (x *FlightDesignator) GetConditionalItems() bool {
	if x != nil {
		return x.ConditionalItems
	}
	return false
}

func (x *FlightDesignator) GetBarcodeAdditionalData() string {
	if x != nil {
		return x.BarcodeAdditionalData
	}
	return ""
}

func (x *FlightDesignator) GetInvalidateCancelledPasses() io.Toggle {
	if x != nil {
		return x.InvalidateCancelledPasses
	}
	return io.Toggle(0)
}

type FlightDesignatorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The IATA or ICAO carrier code for the flight.
	// @tag: validateGeneric:"required"
	CarrierCode string `protobuf:"bytes,1,opt,name=carrierCode,proto3" json:"carrierCode,omitempty" validateGeneric:"required"`
	// The flight number.
	// @tag: validateGeneric:"required"
	FlightNumber string `protobuf:"bytes,2,opt,name=flightNumber,proto3" json:"flightNumber,omitempty" validateGeneric:"required"`
	// Revision. Each designator record requires a version number.
	// @tag: validateGeneric:"required"
	Revision      uint32 `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlightDesignatorRequest) Reset() {
	*x = FlightDesignatorRequest{}
	mi := &file_io_flights_flight_designator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlightDesignatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightDesignatorRequest) ProtoMessage() {}

func (x *FlightDesignatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_flight_designator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightDesignatorRequest.ProtoReflect.Descriptor instead.
func (*FlightDesignatorRequest) Descriptor() ([]byte, []int) {
	return file_io_flights_flight_designator_proto_rawDescGZIP(), []int{1}
}

func (x *FlightDesignatorRequest) GetCarrierCode() string {
	if x != nil {
		return x.CarrierCode
	}
	return ""
}

func (x *FlightDesignatorRequest) GetFlightNumber() string {
	if x != nil {
		return x.FlightNumber
	}
	return ""
}

func (x *FlightDesignatorRequest) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

// If there are no departures on a given day (E.g. flight only operates on Tuesdays and Thursdays), the days with no departures should be nil.
type FlightSchedule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required_without_all=Tuesday Wednesday Thursday Friday Saturday Sunday"
	Monday *FlightTimes `protobuf:"bytes,1,opt,name=monday,proto3" json:"monday,omitempty" validateGeneric:"required_without_all=Tuesday Wednesday Thursday Friday Saturday Sunday"`
	// @tag: validateGeneric:"required_without_all=Monday Wednesday Thursday Friday Saturday Sunday"
	Tuesday *FlightTimes `protobuf:"bytes,2,opt,name=tuesday,proto3" json:"tuesday,omitempty" validateGeneric:"required_without_all=Monday Wednesday Thursday Friday Saturday Sunday"`
	// @tag: validateGeneric:"required_without_all=Tuesday Monday Thursday Friday Saturday Sunday"
	Wednesday *FlightTimes `protobuf:"bytes,3,opt,name=wednesday,proto3" json:"wednesday,omitempty" validateGeneric:"required_without_all=Tuesday Monday Thursday Friday Saturday Sunday"`
	// @tag: validateGeneric:"required_without_all=Tuesday Wednesday Monday Friday Saturday Sunday"
	Thursday *FlightTimes `protobuf:"bytes,4,opt,name=thursday,proto3" json:"thursday,omitempty" validateGeneric:"required_without_all=Tuesday Wednesday Monday Friday Saturday Sunday"`
	// @tag: validateGeneric:"required_without_all=Tuesday Wednesday Thursday Monday Saturday Sunday"
	Friday *FlightTimes `protobuf:"bytes,5,opt,name=friday,proto3" json:"friday,omitempty" validateGeneric:"required_without_all=Tuesday Wednesday Thursday Monday Saturday Sunday"`
	// @tag: validateGeneric:"required_without_all=Tuesday Wednesday Thursday Friday Monday Sunday"
	Saturday *FlightTimes `protobuf:"bytes,6,opt,name=saturday,proto3" json:"saturday,omitempty" validateGeneric:"required_without_all=Tuesday Wednesday Thursday Friday Monday Sunday"`
	// @tag: validateGeneric:"required_without_all=Tuesday Wednesday Thursday Friday Saturday Monday"
	Sunday        *FlightTimes `protobuf:"bytes,7,opt,name=sunday,proto3" json:"sunday,omitempty" validateGeneric:"required_without_all=Tuesday Wednesday Thursday Friday Saturday Monday"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlightSchedule) Reset() {
	*x = FlightSchedule{}
	mi := &file_io_flights_flight_designator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlightSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightSchedule) ProtoMessage() {}

func (x *FlightSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_flight_designator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightSchedule.ProtoReflect.Descriptor instead.
func (*FlightSchedule) Descriptor() ([]byte, []int) {
	return file_io_flights_flight_designator_proto_rawDescGZIP(), []int{2}
}

func (x *FlightSchedule) GetMonday() *FlightTimes {
	if x != nil {
		return x.Monday
	}
	return nil
}

func (x *FlightSchedule) GetTuesday() *FlightTimes {
	if x != nil {
		return x.Tuesday
	}
	return nil
}

func (x *FlightSchedule) GetWednesday() *FlightTimes {
	if x != nil {
		return x.Wednesday
	}
	return nil
}

func (x *FlightSchedule) GetThursday() *FlightTimes {
	if x != nil {
		return x.Thursday
	}
	return nil
}

func (x *FlightSchedule) GetFriday() *FlightTimes {
	if x != nil {
		return x.Friday
	}
	return nil
}

func (x *FlightSchedule) GetSaturday() *FlightTimes {
	if x != nil {
		return x.Saturday
	}
	return nil
}

func (x *FlightSchedule) GetSunday() *FlightTimes {
	if x != nil {
		return x.Sunday
	}
	return nil
}

type FlightTimes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The published departure time.
	// @tag: validateGeneric:"required"
	ScheduledDepartureTime *io.Time `protobuf:"bytes,1,opt,name=scheduledDepartureTime,proto3" json:"scheduledDepartureTime,omitempty" validateGeneric:"required"`
	// The published boarding time.
	BoardingTime *io.Time `protobuf:"bytes,2,opt,name=boardingTime,proto3" json:"boardingTime,omitempty"`
	// The point after which passengers will be denied boarding.
	GateClosingTime *io.Time `protobuf:"bytes,3,opt,name=gateClosingTime,proto3" json:"gateClosingTime,omitempty"`
	// The published, scheduled arrival time.
	ScheduledArrivalTime *io.Time `protobuf:"bytes,4,opt,name=scheduledArrivalTime,proto3" json:"scheduledArrivalTime,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FlightTimes) Reset() {
	*x = FlightTimes{}
	mi := &file_io_flights_flight_designator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlightTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightTimes) ProtoMessage() {}

func (x *FlightTimes) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_flight_designator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightTimes.ProtoReflect.Descriptor instead.
func (*FlightTimes) Descriptor() ([]byte, []int) {
	return file_io_flights_flight_designator_proto_rawDescGZIP(), []int{3}
}

func (x *FlightTimes) GetScheduledDepartureTime() *io.Time {
	if x != nil {
		return x.ScheduledDepartureTime
	}
	return nil
}

func (x *FlightTimes) GetBoardingTime() *io.Time {
	if x != nil {
		return x.BoardingTime
	}
	return nil
}

func (x *FlightTimes) GetGateClosingTime() *io.Time {
	if x != nil {
		return x.GateClosingTime
	}
	return nil
}

func (x *FlightTimes) GetScheduledArrivalTime() *io.Time {
	if x != nil {
		return x.ScheduledArrivalTime
	}
	return nil
}

var File_io_flights_flight_designator_proto protoreflect.FileDescriptor

var file_io_flights_flight_designator_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x69, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0x1e, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc6, 0x0c, 0x0a, 0x10, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x8a, 0x01,
	0x0f, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x33, 0x2c, 0x34, 0x7d, 0x24,
	0x52, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a,
	0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x41, 0x02, 0x78, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0x41,
	0x06, 0x3a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x33, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0x92, 0x41, 0x05, 0x78, 0x03, 0x80, 0x01, 0x02, 0x52, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3b, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x05, 0x92, 0x41, 0x02, 0x78, 0x05, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x16, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x16, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x0f,
	0x73, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0f, 0x73, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0x92, 0x41, 0x06, 0x3a, 0x04, 0x32, 0x38, 0x38, 0x30, 0x52,
	0x13, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x1d, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x43,
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x50,
	0x53, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x92, 0x41, 0x03, 0xa0, 0x01,
	0x0a, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f,
	0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x06, 0x92, 0x41, 0x03, 0xa0, 0x01, 0x0a, 0x52,
	0x0e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x53, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x09,
	0x92, 0x41, 0x06, 0x3a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x3a, 0xd1, 0x01, 0x92, 0x41, 0xcd, 0x01, 0x0a, 0xca, 0x01, 0x2a, 0x11,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x32, 0x5a, 0x41, 0x20, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x6c, 0x79, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0xd2, 0x01, 0x0b,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x0c, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xd2, 0x01, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0xd2, 0x01, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0xd2, 0x01,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x17, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x92, 0x41, 0x05, 0x78, 0x03,
	0x80, 0x01, 0x02, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x41, 0x02, 0x78, 0x05, 0x52, 0x0c, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x7d, 0x92, 0x41, 0x7a, 0x0a, 0x78, 0x2a, 0x19,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x3e, 0x55, 0x73, 0x65, 0x64, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x64, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0xd2, 0x01, 0x0b, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe2, 0x02, 0x0a, 0x0e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x6e,
	0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52,
	0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x07,
	0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65,
	0x73, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x74,
	0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x52, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x2c, 0x0a,
	0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x52, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x73,
	0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x12, 0x2c, 0x0a,
	0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x52, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x22, 0xef, 0x01, 0x0a, 0x0b,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x16, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x0c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x67,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f,
	0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x69, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0xa9, 0x01,
	0x0a, 0x0c, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x50, 0x41, 0x52,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10,
	0x04, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x52, 0x52, 0x49, 0x56, 0x41, 0x4c, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x52, 0x52,
	0x49, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10,
	0x10, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x47, 0x47, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x45, 0x4c,
	0x54, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x20, 0x2a, 0x6d, 0x0a, 0x0e, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x83, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x42, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x1f,
	0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x41, 0x54, 0x41, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x41, 0x4f, 0x10, 0x01, 0x42,
	0x5f, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5a, 0x2c, 0x73, 0x74, 0x61,
	0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69,
	0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0xaa, 0x02, 0x14, 0x50, 0x61, 0x73, 0x73,
	0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_flights_flight_designator_proto_rawDescOnce sync.Once
	file_io_flights_flight_designator_proto_rawDescData []byte
)

func file_io_flights_flight_designator_proto_rawDescGZIP() []byte {
	file_io_flights_flight_designator_proto_rawDescOnce.Do(func() {
		file_io_flights_flight_designator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_flights_flight_designator_proto_rawDesc), len(file_io_flights_flight_designator_proto_rawDesc)))
	})
	return file_io_flights_flight_designator_proto_rawDescData
}

var file_io_flights_flight_designator_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_io_flights_flight_designator_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_io_flights_flight_designator_proto_goTypes = []any{
	(FlightAlerts)(0),               // 0: flights.FlightAlerts
	(BoardingPolicy)(0),             // 1: flights.BoardingPolicy
	(SeatClassPolicy)(0),            // 2: flights.SeatClassPolicy
	(Authority)(0),                  // 3: flights.Authority
	(*FlightDesignator)(nil),        // 4: flights.FlightDesignator
	(*FlightDesignatorRequest)(nil), // 5: flights.FlightDesignatorRequest
	(*FlightSchedule)(nil),          // 6: flights.FlightSchedule
	(*FlightTimes)(nil),             // 7: flights.FlightTimes
	(*io.Date)(nil),                 // 8: io.Date
	(*io.GPSLocation)(nil),          // 9: io.GPSLocation
	(*io.Beacon)(nil),               // 10: io.Beacon
	(*io.Link)(nil),                 // 11: io.Link
	(io.Toggle)(0),                  // 12: io.Toggle
	(*io.Time)(nil),                 // 13: io.Time
}
var file_io_flights_flight_designator_proto_depIdxs = []int32{
	8,  // 0: flights.FlightDesignator.validFrom:type_name -> io.Date
	6,  // 1: flights.FlightDesignator.schedule:type_name -> flights.FlightSchedule
	1,  // 2: flights.FlightDesignator.boardingPolicy:type_name -> flights.BoardingPolicy
	2,  // 3: flights.FlightDesignator.seatClassPolicy:type_name -> flights.SeatClassPolicy
	0,  // 4: flights.FlightDesignator.alerts:type_name -> flights.FlightAlerts
	9,  // 5: flights.FlightDesignator.locationMessages:type_name -> io.GPSLocation
	10, // 6: flights.FlightDesignator.beaconMessages:type_name -> io.Beacon
	11, // 7: flights.FlightDesignator.defaultLinks:type_name -> io.Link
	12, // 8: flights.FlightDesignator.invalidateCancelledPasses:type_name -> io.Toggle
	7,  // 9: flights.FlightSchedule.monday:type_name -> flights.FlightTimes
	7,  // 10: flights.FlightSchedule.tuesday:type_name -> flights.FlightTimes
	7,  // 11: flights.FlightSchedule.wednesday:type_name -> flights.FlightTimes
	7,  // 12: flights.FlightSchedule.thursday:type_name -> flights.FlightTimes
	7,  // 13: flights.FlightSchedule.friday:type_name -> flights.FlightTimes
	7,  // 14: flights.FlightSchedule.saturday:type_name -> flights.FlightTimes
	7,  // 15: flights.FlightSchedule.sunday:type_name -> flights.FlightTimes
	13, // 16: flights.FlightTimes.scheduledDepartureTime:type_name -> io.Time
	13, // 17: flights.FlightTimes.boardingTime:type_name -> io.Time
	13, // 18: flights.FlightTimes.gateClosingTime:type_name -> io.Time
	13, // 19: flights.FlightTimes.scheduledArrivalTime:type_name -> io.Time
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_io_flights_flight_designator_proto_init() }
func file_io_flights_flight_designator_proto_init() {
	if File_io_flights_flight_designator_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_flights_flight_designator_proto_rawDesc), len(file_io_flights_flight_designator_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_flights_flight_designator_proto_goTypes,
		DependencyIndexes: file_io_flights_flight_designator_proto_depIdxs,
		EnumInfos:         file_io_flights_flight_designator_proto_enumTypes,
		MessageInfos:      file_io_flights_flight_designator_proto_msgTypes,
	}.Build()
	File_io_flights_flight_designator_proto = out.File
	file_io_flights_flight_designator_proto_goTypes = nil
	file_io_flights_flight_designator_proto_depIdxs = nil
}
