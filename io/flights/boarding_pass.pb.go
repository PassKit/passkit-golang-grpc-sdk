//*
// Boarding Passes
//
// A boarding pass record is unique to an individual passenger journey form a boarding point to a deplaning point. A Flight Designation record must exist. If a Flight record does not already exist, then it will be auto-generated based on the Flight Designation record and other publicly available data.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/flights/boarding_pass.proto

package flights

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	cabincodes "github.com/PassKit/passkit-golang-grpc-sdk/io/flights/cabincodes"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A Boarding Pass record is unique to an individual passenger journey form a boarding point to a deplaning point. A Carrier and a Flight Designation record must exist. If a Flight record does not already exist, then it will be auto-generated based on the Flight Designation record and other publicly available data.
type BoardingPassRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id assigned by PassKit to represent the boarding pass record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable.
	// @tag: validateCreate"isdefault" validateUpdate="uuidCompressedString"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// PNR code of the carrier operating the flight, independent of code-share, lease or other issues.
	// @tag: validateGeneric:"required,alphanum,min=5,max=7"
	OperatingCarrierPNR string `protobuf:"bytes,2,opt,name=operatingCarrierPNR,proto3" json:"operatingCarrierPNR,omitempty" validateGeneric:"required,alphanum,min=5,max=7"`
	// Up to three related PNRs can be used to index the record and can be the marketing carrier PNR or a master PNR containing multiple bookings. If required, a related PNR can be followed by the two or three character designator of the carrier or CRS controlling the PNR, separated by an oblique.
	// @tag: validateGeneric:"omitempty,max=3,dive,alphanum,min=5,max=7"
	RelatedPNRs []string `protobuf:"bytes,3,rep,name=relatedPNRs,proto3" json:"relatedPNRs,omitempty" validateGeneric:"omitempty,max=3,dive,alphanum,min=5,max=7"`
	// Ticket number can optionally be prefixed by the 3 digit airline code, followed by a 10 digit ticket number.  For ticket numbers less than 10 digits, pad with zeros.
	// @tag: validateGeneric:"omitempty,ticketnum,numeric,len=10|len=13
	TicketNumber string `protobuf:"bytes,4,opt,name=ticketNumber,proto3" json:"ticketNumber,omitempty"`
	// The leg of the ticketed journey. For a return flight, the outbound flight would be leg 1 and the inbound flight would be leg 2.  For Direct flights, a ticketed leg includes all stops between the boarding point and deplaning point. Leg cannot be zero and ticket/leg combination cannot already exist for a 'create' call.
	// @tag: validateGeneric:"required_with=TicketNumber,max=20"
	TicketLeg int32 `protobuf:"varint,5,opt,name=ticketLeg,proto3" json:"ticketLeg,omitempty" validateGeneric:"required_with=TicketNumber,max=20"`
	// 3 letter IATA code or 4 letter ICAO code of the passenger boarding point.
	// @tag: validateGeneric:"fixedLenAlphaNum=3|fixedLenAlphaNum=4"
	BoardingPoint string `protobuf:"bytes,6,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty" validateGeneric:"fixedLenAlphaNum=3|fixedLenAlphaNum=4"`
	// 3 letter IATA code or 4 letter ICAO code of the passenger deplaning point.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"
	DeplaningPoint string `protobuf:"bytes,7,opt,name=deplaningPoint,proto3" json:"deplaningPoint,omitempty" validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"`
	// The two or three character airline code of the marketing carrier.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=2|fixedLenAlphaNum=3"
	CarrierCode string `protobuf:"bytes,8,opt,name=carrierCode,proto3" json:"carrierCode,omitempty" validateGeneric:"required,fixedLenAlphaNum=2|fixedLenAlphaNum=3"`
	// The flight number of the marketing character (excluding the carrier code).
	// @tag: validateGeneric:"required,alphanum,max=5"
	FlightNumber string `protobuf:"bytes,9,opt,name=flightNumber,proto3" json:"flightNumber,omitempty" validateGeneric:"required,alphanum,max=5"`
	// The date of departure in local airport time.
	// @tag: validateGeneric:"required"
	DepartureDate *io.Date `protobuf:"bytes,11,opt,name=departureDate,proto3" json:"departureDate,omitempty" validateGeneric:"required"`
	// Details of the passenger and any infant.
	// @tag: validateGeneric:"required"
	Passenger *Passenger `protobuf:"bytes,12,opt,name=passenger,proto3" json:"passenger,omitempty" validateGeneric:"required"`
	// Free-form text that can be used to describe the ticket class, tier or cabin. E.g. "Business", "Premium Economy", "Club World".
	// @tag: validateGeneric:"omitempty"
	Class string `protobuf:"bytes,13,opt,name=class,proto3" json:"class,omitempty" validateGeneric:"omitempty"`
	// The compartment code / class of the ticket.
	// @tag: validateGeneric:"omitempty"
	CompartmentCode cabincodes.CompartmentCode `protobuf:"varint,14,opt,name=compartmentCode,proto3,enum=cabin_codes.CompartmentCode" json:"compartmentCode,omitempty" validateGeneric:"omitempty"`
	// The allocated seat number.  The text "ANY" or "XXX" can be used where a free seating condition exists.
	// @tag: validateGeneric:"omitempty,max=5"
	SeatNumber string `protobuf:"bytes,15,opt,name=seatNumber,proto3" json:"seatNumber,omitempty" validateGeneric:"omitempty,max=5"`
	// The check in sequence number.
	// @tag: validateGeneric:"required"
	SequenceNumber int32 `protobuf:"varint,16,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty" validateGeneric:"required"`
	// A boarding group or zone indicator. This is displayed on the pass to assist passengers and ground-staff to expedite boarding.
	// @tag: validateGeneric:"omitempty"
	BoardingGroup string `protobuf:"bytes,17,opt,name=boardingGroup,proto3" json:"boardingGroup,omitempty" validateGeneric:"omitempty"`
	// An additional field to indicate boarding priority or order.
	// @tag: validateGeneric:"omitempty"
	BoardingPosition string `protobuf:"bytes,18,opt,name=boardingPosition,proto3" json:"boardingPosition,omitempty" validateGeneric:"omitempty"`
	// 3 character string comprising the quantity, followed by the unit code (PC - piece, L - lbs, K - kgs). E.g. 2PC, 20K.
	// @tag: validateGeneric:"omitempty,baggage,max=3"
	FreeBaggageAllowance string `protobuf:"bytes,19,opt,name=freeBaggageAllowance,proto3" json:"freeBaggageAllowance,omitempty" validateGeneric:"omitempty,baggage,max=3"`
	// 3 character string comprising the quantity, followed by the unit code (PC - piece, L - lbs, K - kgs). E.g. 2PC, 20K.
	// @tag: validateGeneric:"omitempty,baggage,max=3"
	CarryOnAllowance string `protobuf:"bytes,20,opt,name=carryOnAllowance,proto3" json:"carryOnAllowance,omitempty" validateGeneric:"omitempty,baggage,max=3"`
	// An array of SSR codes. Codes should be 4 capitalized letters. Codes may be annotated.
	// @tag: validateGeneric:"omitempty,dive,alphanum"
	SsrCodes []string `protobuf:"bytes,21,rep,name=ssrCodes,proto3" json:"ssrCodes,omitempty" validateGeneric:"omitempty,dive,alphanum"`
	// Other service information that may be relevant to the booking.
	// @tag: validateGeneric:"omitempty"
	Osi string `protobuf:"bytes,22,opt,name=osi,proto3" json:"osi,omitempty" validateGeneric:"omitempty"`
	// Free text booking remarks.
	// @tag: validateGeneric:"omitempty"
	Remarks string `protobuf:"bytes,23,opt,name=remarks,proto3" json:"remarks,omitempty" validateGeneric:"omitempty"`
	// Passenger Description as detailed in IATA PSC Resolution 792 Attachment 'C'.
	// @tag: validateGeneric:"omitempty,max=10"
	PassengerStatus PassengerStatus `protobuf:"varint,24,opt,name=passengerStatus,proto3,enum=flights.PassengerStatus" json:"passengerStatus,omitempty" validateGeneric:"omitempty,max=10"`
	// Conditional items for the flight segment as described in IATA PSC Resolution 792.
	ConditionalItems *ConditionalItems `protobuf:"bytes,25,opt,name=conditionalItems,proto3" json:"conditionalItems,omitempty"`
	// Payload to be encoded in the pass barcode. If omitted, an IATA BCBP Standard (Resolution 792) barcode will be generated.
	// @tag: validateGeneric:"omitempty"
	BarcodePayload string `protobuf:"bytes,26,opt,name=barcodePayload,proto3" json:"barcodePayload,omitempty" validateGeneric:"omitempty"`
	// Security image id for display above the barcode on a Google Pay pass.
	// @tag: validateGeneric:"omitempty"
	SecurityImage string `protobuf:"bytes,27,opt,name=securityImage,proto3" json:"securityImage,omitempty" validateGeneric:"omitempty"`
	// Privilege image id for display above the barcode on a Google Pay pass.
	// @tag: validateGeneric:"omitempty"
	PrivilegeImage string `protobuf:"bytes,28,opt,name=privilegeImage,proto3" json:"privilegeImage,omitempty" validateGeneric:"omitempty"`
	// Footer image id for display above the barcode on iOS devices.
	// @tag: validateGeneric:"omitempty"
	FooterImage string `protobuf:"bytes,29,opt,name=footerImage,proto3" json:"footerImage,omitempty" validateGeneric:"omitempty"`
	// A list of up to 10 GPS locations where this boarding pass should be presented on the lock-screen. Values here will override the designation and flight values.
	// @tag: validateGeneric:"omitempty,max=10,dive"
	LocationMessages []*io.GPSLocation `protobuf:"bytes,30,rep,name=locationMessages,proto3" json:"locationMessages,omitempty" validateGeneric:"omitempty,max=10,dive"`
	// A list of up to 10 Beacon UUIDs that should trigger the boarding pass to be presented on the lock-screen. Values here will override the designation and flight values.
	// @tag: validateGeneric:"omitempty,max=10,dive"
	BeaconMessages []*io.Beacon `protobuf:"bytes,31,rep,name=beaconMessages,proto3" json:"beaconMessages,omitempty" validateGeneric:"omitempty,max=10,dive"`
	// A list of links to be appended to the end of each boarding pass.
	// @tag: validateGeneric:"omitempty,dive"
	Links []*io.Link `protobuf:"bytes,32,rep,name=links,proto3" json:"links,omitempty" validateGeneric:"omitempty,dive"`
	// If PassKit are generating barcodes, airline use data (IATA item 4) to be included in the barcode.
	BarcodeAdditionalData string `protobuf:"bytes,33,opt,name=barcodeAdditionalData,proto3" json:"barcodeAdditionalData,omitempty"`
	// If a passenger is travelling as an infant and the airline is not using conditional data with a passenger description of 6 (Adult With Infant), an id of the infant's boarding pass will be recorded here.
	// @tag: "validateGeneric:"isdefault"  validateUpdate:"omitempty,uuidCompressedString"
	InfantPassId string `protobuf:"bytes,34,opt,name=infantPassId,proto3" json:"infantPassId,omitempty" validateGeneric:"isdefault" validateUpdate:"omitempty,uuidCompressedString"`
	// Optional key value pairs to be added in to the flight record
	// @tag: validateGeneric:"omitempty"
	AdditionalDataItems *io.DataItems `protobuf:"bytes,35,opt,name=additionalDataItems,proto3" json:"additionalDataItems,omitempty" validateGeneric:"omitempty"`
	// Pass Metadata
	// @tag: validateUpdate:"isdefault"
	Metadata      *io.Metadata `protobuf:"bytes,36,opt,name=metadata,proto3" json:"metadata,omitempty" validateUpdate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoardingPassRecord) Reset() {
	*x = BoardingPassRecord{}
	mi := &file_io_flights_boarding_pass_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoardingPassRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardingPassRecord) ProtoMessage() {}

func (x *BoardingPassRecord) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_boarding_pass_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardingPassRecord.ProtoReflect.Descriptor instead.
func (*BoardingPassRecord) Descriptor() ([]byte, []int) {
	return file_io_flights_boarding_pass_proto_rawDescGZIP(), []int{0}
}

func (x *BoardingPassRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BoardingPassRecord) GetOperatingCarrierPNR() string {
	if x != nil {
		return x.OperatingCarrierPNR
	}
	return ""
}

func (x *BoardingPassRecord) GetRelatedPNRs() []string {
	if x != nil {
		return x.RelatedPNRs
	}
	return nil
}

func (x *BoardingPassRecord) GetTicketNumber() string {
	if x != nil {
		return x.TicketNumber
	}
	return ""
}

func (x *BoardingPassRecord) GetTicketLeg() int32 {
	if x != nil {
		return x.TicketLeg
	}
	return 0
}

func (x *BoardingPassRecord) GetBoardingPoint() string {
	if x != nil {
		return x.BoardingPoint
	}
	return ""
}

func (x *BoardingPassRecord) GetDeplaningPoint() string {
	if x != nil {
		return x.DeplaningPoint
	}
	return ""
}

func (x *BoardingPassRecord) GetCarrierCode() string {
	if x != nil {
		return x.CarrierCode
	}
	return ""
}

func (x *BoardingPassRecord) GetFlightNumber() string {
	if x != nil {
		return x.FlightNumber
	}
	return ""
}

func (x *BoardingPassRecord) GetDepartureDate() *io.Date {
	if x != nil {
		return x.DepartureDate
	}
	return nil
}

func (x *BoardingPassRecord) GetPassenger() *Passenger {
	if x != nil {
		return x.Passenger
	}
	return nil
}

func (x *BoardingPassRecord) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *BoardingPassRecord) GetCompartmentCode() cabincodes.CompartmentCode {
	if x != nil {
		return x.CompartmentCode
	}
	return cabincodes.CompartmentCode(0)
}

func (x *BoardingPassRecord) GetSeatNumber() string {
	if x != nil {
		return x.SeatNumber
	}
	return ""
}

func (x *BoardingPassRecord) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *BoardingPassRecord) GetBoardingGroup() string {
	if x != nil {
		return x.BoardingGroup
	}
	return ""
}

func (x *BoardingPassRecord) GetBoardingPosition() string {
	if x != nil {
		return x.BoardingPosition
	}
	return ""
}

func (x *BoardingPassRecord) GetFreeBaggageAllowance() string {
	if x != nil {
		return x.FreeBaggageAllowance
	}
	return ""
}

func (x *BoardingPassRecord) GetCarryOnAllowance() string {
	if x != nil {
		return x.CarryOnAllowance
	}
	return ""
}

func (x *BoardingPassRecord) GetSsrCodes() []string {
	if x != nil {
		return x.SsrCodes
	}
	return nil
}

func (x *BoardingPassRecord) GetOsi() string {
	if x != nil {
		return x.Osi
	}
	return ""
}

func (x *BoardingPassRecord) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *BoardingPassRecord) GetPassengerStatus() PassengerStatus {
	if x != nil {
		return x.PassengerStatus
	}
	return PassengerStatus_ISSUED_NOT_CHECKED_IN
}

func (x *BoardingPassRecord) GetConditionalItems() *ConditionalItems {
	if x != nil {
		return x.ConditionalItems
	}
	return nil
}

func (x *BoardingPassRecord) GetBarcodePayload() string {
	if x != nil {
		return x.BarcodePayload
	}
	return ""
}

func (x *BoardingPassRecord) GetSecurityImage() string {
	if x != nil {
		return x.SecurityImage
	}
	return ""
}

func (x *BoardingPassRecord) GetPrivilegeImage() string {
	if x != nil {
		return x.PrivilegeImage
	}
	return ""
}

func (x *BoardingPassRecord) GetFooterImage() string {
	if x != nil {
		return x.FooterImage
	}
	return ""
}

func (x *BoardingPassRecord) GetLocationMessages() []*io.GPSLocation {
	if x != nil {
		return x.LocationMessages
	}
	return nil
}

func (x *BoardingPassRecord) GetBeaconMessages() []*io.Beacon {
	if x != nil {
		return x.BeaconMessages
	}
	return nil
}

func (x *BoardingPassRecord) GetLinks() []*io.Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *BoardingPassRecord) GetBarcodeAdditionalData() string {
	if x != nil {
		return x.BarcodeAdditionalData
	}
	return ""
}

func (x *BoardingPassRecord) GetInfantPassId() string {
	if x != nil {
		return x.InfantPassId
	}
	return ""
}

func (x *BoardingPassRecord) GetAdditionalDataItems() *io.DataItems {
	if x != nil {
		return x.AdditionalDataItems
	}
	return nil
}

func (x *BoardingPassRecord) GetMetadata() *io.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Boarding passes are indexed by ticket number and leg or boarding point. Either a journey leg or boarding point is required.
type BoardingPassRecordRequestByTicketNumber struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ticket number can optionally be prefixed by the 3 digit airline code, followed by a 10 digit ticket number.  For ticket numbers less than 10 digits, pad with zeros.
	// @tag: validateGeneric:"omitempty,ticketnum,numeric,len=10|len=13
	TicketNumber string `protobuf:"bytes,1,opt,name=ticketNumber,proto3" json:"ticketNumber,omitempty"`
	// The leg of the ticketed journey. For a return flight, the outbound flight would be leg 1 and the inbound flight would be leg 2.  For Direct flights, a ticketed leg includes all stops between the boarding point and deplaning point. Leg cannot be zero and ticket/leg combination cannot already exist for a 'create' call.
	// @tag: validateGeneric:"omitempty"
	TicketLeg int32 `protobuf:"varint,2,opt,name=ticketLeg,proto3" json:"ticketLeg,omitempty" validateGeneric:"omitempty"`
	// Required if no ticket leg. The 3 letter IATA code or 4 letter ICAO code of the passenger boarding point.
	// @tag: validateGeneric:"required_without=TicketLeg,fixedLenAlphaNum=3|fixedLenAlphaNum=4|isdefault"
	BoardingPoint string `protobuf:"bytes,3,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty" validateGeneric:"required_without=TicketLeg,fixedLenAlphaNum=3|fixedLenAlphaNum=4|isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoardingPassRecordRequestByTicketNumber) Reset() {
	*x = BoardingPassRecordRequestByTicketNumber{}
	mi := &file_io_flights_boarding_pass_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoardingPassRecordRequestByTicketNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardingPassRecordRequestByTicketNumber) ProtoMessage() {}

func (x *BoardingPassRecordRequestByTicketNumber) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_boarding_pass_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardingPassRecordRequestByTicketNumber.ProtoReflect.Descriptor instead.
func (*BoardingPassRecordRequestByTicketNumber) Descriptor() ([]byte, []int) {
	return file_io_flights_boarding_pass_proto_rawDescGZIP(), []int{1}
}

func (x *BoardingPassRecordRequestByTicketNumber) GetTicketNumber() string {
	if x != nil {
		return x.TicketNumber
	}
	return ""
}

func (x *BoardingPassRecordRequestByTicketNumber) GetTicketLeg() int32 {
	if x != nil {
		return x.TicketLeg
	}
	return 0
}

func (x *BoardingPassRecordRequestByTicketNumber) GetBoardingPoint() string {
	if x != nil {
		return x.BoardingPoint
	}
	return ""
}

// Boarding passes are indexed by carrier code, flight number, departure date, boarding point and sequence number.  All values are required.
type BoardingPassRecordRequestByIndex struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The two or three character airline code of the marketing carrier.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=2|fixedLenAlphaNum=3"
	CarrierCode string `protobuf:"bytes,1,opt,name=carrierCode,proto3" json:"carrierCode,omitempty" validateGeneric:"required,fixedLenAlphaNum=2|fixedLenAlphaNum=3"`
	// The flight number of the marketing character (excluding the carrier code).
	// @tag: validateGeneric:"required,alphanum,max=5"
	FlightNumber string `protobuf:"bytes,2,opt,name=flightNumber,proto3" json:"flightNumber,omitempty" validateGeneric:"required,alphanum,max=5"`
	// The date of departure in local airport time.
	// @tag: validateGeneric:"required"
	DepartureDate *io.Date `protobuf:"bytes,3,opt,name=departureDate,proto3" json:"departureDate,omitempty" validateGeneric:"required"`
	// 3 letter IATA code or 4 letter ICAO code of the passenger boarding point.
	// @tag: validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"
	BoardingPoint string `protobuf:"bytes,4,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty" validateGeneric:"required,fixedLenAlphaNum=3|fixedLenAlphaNum=4"`
	// The check in sequence number.
	// @tag: validateGeneric:"required"
	SequenceNumber int32 `protobuf:"varint,5,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty" validateGeneric:"required"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BoardingPassRecordRequestByIndex) Reset() {
	*x = BoardingPassRecordRequestByIndex{}
	mi := &file_io_flights_boarding_pass_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoardingPassRecordRequestByIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardingPassRecordRequestByIndex) ProtoMessage() {}

func (x *BoardingPassRecordRequestByIndex) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_boarding_pass_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardingPassRecordRequestByIndex.ProtoReflect.Descriptor instead.
func (*BoardingPassRecordRequestByIndex) Descriptor() ([]byte, []int) {
	return file_io_flights_boarding_pass_proto_rawDescGZIP(), []int{2}
}

func (x *BoardingPassRecordRequestByIndex) GetCarrierCode() string {
	if x != nil {
		return x.CarrierCode
	}
	return ""
}

func (x *BoardingPassRecordRequestByIndex) GetFlightNumber() string {
	if x != nil {
		return x.FlightNumber
	}
	return ""
}

func (x *BoardingPassRecordRequestByIndex) GetDepartureDate() *io.Date {
	if x != nil {
		return x.DepartureDate
	}
	return nil
}

func (x *BoardingPassRecordRequestByIndex) GetBoardingPoint() string {
	if x != nil {
		return x.BoardingPoint
	}
	return ""
}

func (x *BoardingPassRecordRequestByIndex) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Used to request a digital boarding pass by ticket number, index, PassKit ID or PNR.
type BoardingPassRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Either a ticket number, index, PNR information or Pass Id should be provided.
	//
	// Types that are valid to be assigned to Request:
	//
	//	*BoardingPassRequest_TicketNumber
	//	*BoardingPassRequest_Index
	//	*BoardingPassRequest_Pnr
	//	*BoardingPassRequest_PassId
	Request isBoardingPassRequest_Request `protobuf_oneof:"request"`
	// Optional. If omitted, return the URL to the web pass landing page. Not used when getting or deleting the underlying boarding pass record.
	Format        []io.PassBundleFormat `protobuf:"varint,5,rep,packed,name=format,proto3,enum=io.PassBundleFormat" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoardingPassRequest) Reset() {
	*x = BoardingPassRequest{}
	mi := &file_io_flights_boarding_pass_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoardingPassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardingPassRequest) ProtoMessage() {}

func (x *BoardingPassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_boarding_pass_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardingPassRequest.ProtoReflect.Descriptor instead.
func (*BoardingPassRequest) Descriptor() ([]byte, []int) {
	return file_io_flights_boarding_pass_proto_rawDescGZIP(), []int{3}
}

func (x *BoardingPassRequest) GetRequest() isBoardingPassRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *BoardingPassRequest) GetTicketNumber() *BoardingPassRecordRequestByTicketNumber {
	if x != nil {
		if x, ok := x.Request.(*BoardingPassRequest_TicketNumber); ok {
			return x.TicketNumber
		}
	}
	return nil
}

func (x *BoardingPassRequest) GetIndex() *BoardingPassRecordRequestByIndex {
	if x != nil {
		if x, ok := x.Request.(*BoardingPassRequest_Index); ok {
			return x.Index
		}
	}
	return nil
}

func (x *BoardingPassRequest) GetPnr() *BoardingPassesForBookingRequest {
	if x != nil {
		if x, ok := x.Request.(*BoardingPassRequest_Pnr); ok {
			return x.Pnr
		}
	}
	return nil
}

func (x *BoardingPassRequest) GetPassId() *io.Id {
	if x != nil {
		if x, ok := x.Request.(*BoardingPassRequest_PassId); ok {
			return x.PassId
		}
	}
	return nil
}

func (x *BoardingPassRequest) GetFormat() []io.PassBundleFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

type isBoardingPassRequest_Request interface {
	isBoardingPassRequest_Request()
}

type BoardingPassRequest_TicketNumber struct {
	TicketNumber *BoardingPassRecordRequestByTicketNumber `protobuf:"bytes,1,opt,name=ticketNumber,proto3,oneof"`
}

type BoardingPassRequest_Index struct {
	Index *BoardingPassRecordRequestByIndex `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type BoardingPassRequest_Pnr struct {
	Pnr *BoardingPassesForBookingRequest `protobuf:"bytes,3,opt,name=pnr,proto3,oneof"`
}

type BoardingPassRequest_PassId struct {
	PassId *io.Id `protobuf:"bytes,4,opt,name=passId,proto3,oneof"`
}

func (*BoardingPassRequest_TicketNumber) isBoardingPassRequest_Request() {}

func (*BoardingPassRequest_Index) isBoardingPassRequest_Request() {}

func (*BoardingPassRequest_Pnr) isBoardingPassRequest_Request() {}

func (*BoardingPassRequest_PassId) isBoardingPassRequest_Request() {}

// Used to request a digital boarding pass record by ticket number, index or pass id.
type BoardingPassRecordRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Either a ticket number, index or PNR information should be provided.
	//
	// Types that are valid to be assigned to Request:
	//
	//	*BoardingPassRecordRequest_TicketNumber
	//	*BoardingPassRecordRequest_Index
	//	*BoardingPassRecordRequest_PassId
	Request       isBoardingPassRecordRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoardingPassRecordRequest) Reset() {
	*x = BoardingPassRecordRequest{}
	mi := &file_io_flights_boarding_pass_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoardingPassRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardingPassRecordRequest) ProtoMessage() {}

func (x *BoardingPassRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_boarding_pass_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardingPassRecordRequest.ProtoReflect.Descriptor instead.
func (*BoardingPassRecordRequest) Descriptor() ([]byte, []int) {
	return file_io_flights_boarding_pass_proto_rawDescGZIP(), []int{4}
}

func (x *BoardingPassRecordRequest) GetRequest() isBoardingPassRecordRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *BoardingPassRecordRequest) GetTicketNumber() *BoardingPassRecordRequestByTicketNumber {
	if x != nil {
		if x, ok := x.Request.(*BoardingPassRecordRequest_TicketNumber); ok {
			return x.TicketNumber
		}
	}
	return nil
}

func (x *BoardingPassRecordRequest) GetIndex() *BoardingPassRecordRequestByIndex {
	if x != nil {
		if x, ok := x.Request.(*BoardingPassRecordRequest_Index); ok {
			return x.Index
		}
	}
	return nil
}

func (x *BoardingPassRecordRequest) GetPassId() *io.Id {
	if x != nil {
		if x, ok := x.Request.(*BoardingPassRecordRequest_PassId); ok {
			return x.PassId
		}
	}
	return nil
}

type isBoardingPassRecordRequest_Request interface {
	isBoardingPassRecordRequest_Request()
}

type BoardingPassRecordRequest_TicketNumber struct {
	TicketNumber *BoardingPassRecordRequestByTicketNumber `protobuf:"bytes,1,opt,name=ticketNumber,proto3,oneof"`
}

type BoardingPassRecordRequest_Index struct {
	Index *BoardingPassRecordRequestByIndex `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type BoardingPassRecordRequest_PassId struct {
	PassId *io.Id `protobuf:"bytes,3,opt,name=passId,proto3,oneof"`
}

func (*BoardingPassRecordRequest_TicketNumber) isBoardingPassRecordRequest_Request() {}

func (*BoardingPassRecordRequest_Index) isBoardingPassRecordRequest_Request() {}

func (*BoardingPassRecordRequest_PassId) isBoardingPassRecordRequest_Request() {}

// Used to request digital boarding pass(es) by booking number. Either a journey leg or boarding point is required.
type BoardingPassesForBookingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The master PNR for the booking.
	// @tag: validateGeneric:"required,alphanum,min=5,max=7"
	Pnr string `protobuf:"bytes,1,opt,name=pnr,proto3" json:"pnr,omitempty" validateGeneric:"required,alphanum,min=5,max=7"`
	// Optional. The leg of the ticket. Typically for a return ticket, the outbound leg will be 1 and the return leg will be 2.
	// @tag: validate:"omitempty"
	TicketLeg int32 `protobuf:"varint,2,opt,name=ticketLeg,proto3" json:"ticketLeg,omitempty" validate:"omitempty"`
	// @tag: validateGeneric:"required_without=TicketLeg,fixedLenAlphaNum=3|fixedLenAlphaNum=4|isdefault"
	// Required if no ticket leg. The 3 letter IATA code or 4 letter ICAO code of the passenger boarding point.
	BoardingPoint string `protobuf:"bytes,3,opt,name=boardingPoint,proto3" json:"boardingPoint,omitempty" validateGeneric:"required_without=TicketLeg,fixedLenAlphaNum=3|fixedLenAlphaNum=4|isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoardingPassesForBookingRequest) Reset() {
	*x = BoardingPassesForBookingRequest{}
	mi := &file_io_flights_boarding_pass_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoardingPassesForBookingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardingPassesForBookingRequest) ProtoMessage() {}

func (x *BoardingPassesForBookingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_boarding_pass_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardingPassesForBookingRequest.ProtoReflect.Descriptor instead.
func (*BoardingPassesForBookingRequest) Descriptor() ([]byte, []int) {
	return file_io_flights_boarding_pass_proto_rawDescGZIP(), []int{5}
}

func (x *BoardingPassesForBookingRequest) GetPnr() string {
	if x != nil {
		return x.Pnr
	}
	return ""
}

func (x *BoardingPassesForBookingRequest) GetTicketLeg() int32 {
	if x != nil {
		return x.TicketLeg
	}
	return 0
}

func (x *BoardingPassesForBookingRequest) GetBoardingPoint() string {
	if x != nil {
		return x.BoardingPoint
	}
	return ""
}

// Contains an array of digital boarding passes.
type BoardingPassesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An array of boarding passes found relating to the PNR.
	BoardingPasses []*io.PassBundle `protobuf:"bytes,1,rep,name=boardingPasses,proto3" json:"boardingPasses,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BoardingPassesResponse) Reset() {
	*x = BoardingPassesResponse{}
	mi := &file_io_flights_boarding_pass_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoardingPassesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardingPassesResponse) ProtoMessage() {}

func (x *BoardingPassesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_flights_boarding_pass_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardingPassesResponse.ProtoReflect.Descriptor instead.
func (*BoardingPassesResponse) Descriptor() ([]byte, []int) {
	return file_io_flights_boarding_pass_proto_rawDescGZIP(), []int{6}
}

func (x *BoardingPassesResponse) GetBoardingPasses() []*io.PassBundle {
	if x != nil {
		return x.BoardingPasses
	}
	return nil
}

var File_io_flights_boarding_pass_proto protoreflect.FileDescriptor

var file_io_flights_boarding_pass_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x69, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0x1a, 0x69, 0x6f, 0x2f, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x69, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x28, 0x69, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x63, 0x61, 0x62, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x69, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6f, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x13, 0x0a, 0x12, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x13, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50,
	0x4e, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x8a, 0x01, 0x0f,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x35, 0x2c, 0x37, 0x7d, 0x24, 0x52,
	0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x50, 0x4e, 0x52, 0x12, 0xe5, 0x02, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x4e, 0x52, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0xc2, 0x02, 0x92, 0x41, 0xbe,
	0x02, 0x32, 0x97, 0x02, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x50, 0x4e, 0x52, 0x73,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x20, 0x50, 0x4e, 0x52, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x20, 0x50, 0x4e, 0x52, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c,
	0x20, 0x61, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x50, 0x4e, 0x52, 0x20, 0x63,
	0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x72,
	0x65, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x43, 0x52, 0x53, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x4e,
	0x52, 0x2c, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x2e, 0x8a, 0x01, 0x21, 0x5e, 0x5b,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x35, 0x2c, 0x37, 0x7d, 0x28, 0x5c, 0x2f, 0x5b,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x2c, 0x33, 0x7d, 0x29, 0x3f, 0x24, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x4e, 0x52, 0x73, 0x12, 0x38, 0x0a, 0x0c,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x8a, 0x01, 0x0e, 0x5e, 0x28, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x33, 0x2c, 0x31, 0x30, 0x7d, 0x24, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x65, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x69, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c,
	0x65, 0x67, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x8a, 0x01,
	0x0c, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b, 0x33, 0x2c, 0x34, 0x7d, 0x24, 0x52, 0x0d, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0e,
	0x64, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x8a, 0x01, 0x0c, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x5d, 0x7b, 0x33, 0x2c, 0x34, 0x7d, 0x24, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x61, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x92,
	0x41, 0x05, 0x78, 0x03, 0x80, 0x01, 0x02, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x41, 0x02, 0x78,
	0x05, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x41, 0x02, 0x78, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x14, 0x66, 0x72, 0x65, 0x65, 0x42, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0x92, 0x41, 0x05, 0x78, 0x03, 0x80, 0x01, 0x03, 0x52, 0x14, 0x66, 0x72, 0x65, 0x65, 0x42, 0x61,
	0x67, 0x67, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x10, 0x63, 0x61, 0x72, 0x72, 0x79, 0x4f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x92, 0x41, 0x05, 0x78, 0x03, 0x80,
	0x01, 0x03, 0x52, 0x10, 0x63, 0x61, 0x72, 0x72, 0x79, 0x4f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x73, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x73, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x73, 0x69, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x73, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x0f,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x45, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x43, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x47,
	0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x92, 0x41, 0x03, 0xa0,
	0x01, 0x0a, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69,
	0x6f, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x06, 0x92, 0x41, 0x03, 0xa0, 0x01, 0x0a,
	0x52, 0x0e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x06, 0x92, 0x41, 0x03, 0xa0, 0x01,
	0x0a, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x13,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0xfa, 0x03,
	0x92, 0x41, 0xf6, 0x03, 0x0a, 0xf3, 0x03, 0x2a, 0x14, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x20, 0x50, 0x61, 0x73, 0x73, 0x20, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x32, 0xd9, 0x02,
	0x41, 0x20, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x50, 0x61, 0x73, 0x73, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x20, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x64,
	0x65, 0x70, 0x6c, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x20,
	0x41, 0x20, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x61, 0x20, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2c,
	0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x75, 0x74, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x20, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x28, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x66, 0x20, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x29, 0x2e, 0xd2, 0x01, 0x13, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x50, 0x4e, 0x52, 0xd2,
	0x01, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0xd2, 0x01, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0xd2, 0x01, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0xd2, 0x01, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0xd2, 0x01, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0xd2, 0x01, 0x09, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0xd2, 0x01, 0x0b, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x27, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x8a, 0x01, 0x0e, 0x5e, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x33, 0x2c, 0x31, 0x30,
	0x7d, 0x24, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x3a, 0xb7, 0x01, 0x92, 0x41, 0xb3, 0x01, 0x0a, 0xb0, 0x01, 0x2a, 0x25,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x50, 0x61, 0x73, 0x73, 0x20, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x20, 0x42, 0x79, 0x20, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0x78, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x20, 0x20, 0x45, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x20,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x6c, 0x65, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0xd2,
	0x01, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc2,
	0x03, 0x0a, 0x20, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x92, 0x41, 0x05, 0x78, 0x03, 0x80,
	0x01, 0x02, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x29, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x41, 0x02, 0x78, 0x05, 0x52, 0x0c, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0d, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x8a, 0x01, 0x0c, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x7b,
	0x33, 0x2c, 0x34, 0x7d, 0x24, 0x52, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0xb4, 0x01, 0x92,
	0x41, 0xb0, 0x01, 0x0a, 0xad, 0x01, 0x2a, 0x1d, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x20, 0x50, 0x61, 0x73, 0x73, 0x20, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x42, 0x79, 0x20,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x3e, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0xd2, 0x01, 0x0b, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0xd2, 0x01, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x65, 0xd2, 0x01, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0xd2, 0x01, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xc9, 0x02, 0x0a, 0x13, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0c, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x03, 0x70, 0x6e, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x03, 0x70, 0x6e, 0x72, 0x12, 0x20, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x69, 0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xe3, 0x01, 0x0a, 0x19, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a,
	0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x69, 0x6f, 0x2e, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x1f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6e, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6e, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x3a,
	0x7e, 0x92, 0x41, 0x7b, 0x0a, 0x79, 0x2a, 0x22, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x20, 0x50, 0x61, 0x73, 0x73, 0x20, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x42, 0x79, 0x20,
	0x50, 0x4e, 0x52, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x32, 0x4d, 0x55, 0x73, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20,
	0x6f, 0x72, 0x20, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x73, 0x73,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0xd2, 0x01, 0x03, 0x70, 0x6e, 0x72, 0x22,
	0x50, 0x0a, 0x16, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x0e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x42, 0x5f, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5a, 0x2c, 0x73,
	0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f,
	0x2f, 0x69, 0x6f, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0xaa, 0x02, 0x14, 0x50, 0x61,
	0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_flights_boarding_pass_proto_rawDescOnce sync.Once
	file_io_flights_boarding_pass_proto_rawDescData []byte
)

func file_io_flights_boarding_pass_proto_rawDescGZIP() []byte {
	file_io_flights_boarding_pass_proto_rawDescOnce.Do(func() {
		file_io_flights_boarding_pass_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_flights_boarding_pass_proto_rawDesc), len(file_io_flights_boarding_pass_proto_rawDesc)))
	})
	return file_io_flights_boarding_pass_proto_rawDescData
}

var file_io_flights_boarding_pass_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_io_flights_boarding_pass_proto_goTypes = []any{
	(*BoardingPassRecord)(nil),                      // 0: flights.BoardingPassRecord
	(*BoardingPassRecordRequestByTicketNumber)(nil), // 1: flights.BoardingPassRecordRequestByTicketNumber
	(*BoardingPassRecordRequestByIndex)(nil),        // 2: flights.BoardingPassRecordRequestByIndex
	(*BoardingPassRequest)(nil),                     // 3: flights.BoardingPassRequest
	(*BoardingPassRecordRequest)(nil),               // 4: flights.BoardingPassRecordRequest
	(*BoardingPassesForBookingRequest)(nil),         // 5: flights.BoardingPassesForBookingRequest
	(*BoardingPassesResponse)(nil),                  // 6: flights.BoardingPassesResponse
	(*io.Date)(nil),                                 // 7: io.Date
	(*Passenger)(nil),                               // 8: flights.Passenger
	(cabincodes.CompartmentCode)(0),                 // 9: cabin_codes.CompartmentCode
	(PassengerStatus)(0),                            // 10: flights.PassengerStatus
	(*ConditionalItems)(nil),                        // 11: flights.ConditionalItems
	(*io.GPSLocation)(nil),                          // 12: io.GPSLocation
	(*io.Beacon)(nil),                               // 13: io.Beacon
	(*io.Link)(nil),                                 // 14: io.Link
	(*io.DataItems)(nil),                            // 15: io.DataItems
	(*io.Metadata)(nil),                             // 16: io.Metadata
	(*io.Id)(nil),                                   // 17: io.Id
	(io.PassBundleFormat)(0),                        // 18: io.PassBundleFormat
	(*io.PassBundle)(nil),                           // 19: io.PassBundle
}
var file_io_flights_boarding_pass_proto_depIdxs = []int32{
	7,  // 0: flights.BoardingPassRecord.departureDate:type_name -> io.Date
	8,  // 1: flights.BoardingPassRecord.passenger:type_name -> flights.Passenger
	9,  // 2: flights.BoardingPassRecord.compartmentCode:type_name -> cabin_codes.CompartmentCode
	10, // 3: flights.BoardingPassRecord.passengerStatus:type_name -> flights.PassengerStatus
	11, // 4: flights.BoardingPassRecord.conditionalItems:type_name -> flights.ConditionalItems
	12, // 5: flights.BoardingPassRecord.locationMessages:type_name -> io.GPSLocation
	13, // 6: flights.BoardingPassRecord.beaconMessages:type_name -> io.Beacon
	14, // 7: flights.BoardingPassRecord.links:type_name -> io.Link
	15, // 8: flights.BoardingPassRecord.additionalDataItems:type_name -> io.DataItems
	16, // 9: flights.BoardingPassRecord.metadata:type_name -> io.Metadata
	7,  // 10: flights.BoardingPassRecordRequestByIndex.departureDate:type_name -> io.Date
	1,  // 11: flights.BoardingPassRequest.ticketNumber:type_name -> flights.BoardingPassRecordRequestByTicketNumber
	2,  // 12: flights.BoardingPassRequest.index:type_name -> flights.BoardingPassRecordRequestByIndex
	5,  // 13: flights.BoardingPassRequest.pnr:type_name -> flights.BoardingPassesForBookingRequest
	17, // 14: flights.BoardingPassRequest.passId:type_name -> io.Id
	18, // 15: flights.BoardingPassRequest.format:type_name -> io.PassBundleFormat
	1,  // 16: flights.BoardingPassRecordRequest.ticketNumber:type_name -> flights.BoardingPassRecordRequestByTicketNumber
	2,  // 17: flights.BoardingPassRecordRequest.index:type_name -> flights.BoardingPassRecordRequestByIndex
	17, // 18: flights.BoardingPassRecordRequest.passId:type_name -> io.Id
	19, // 19: flights.BoardingPassesResponse.boardingPasses:type_name -> io.PassBundle
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_io_flights_boarding_pass_proto_init() }
func file_io_flights_boarding_pass_proto_init() {
	if File_io_flights_boarding_pass_proto != nil {
		return
	}
	file_io_flights_passenger_proto_init()
	file_io_flights_barcode_proto_init()
	file_io_flights_boarding_pass_proto_msgTypes[3].OneofWrappers = []any{
		(*BoardingPassRequest_TicketNumber)(nil),
		(*BoardingPassRequest_Index)(nil),
		(*BoardingPassRequest_Pnr)(nil),
		(*BoardingPassRequest_PassId)(nil),
	}
	file_io_flights_boarding_pass_proto_msgTypes[4].OneofWrappers = []any{
		(*BoardingPassRecordRequest_TicketNumber)(nil),
		(*BoardingPassRecordRequest_Index)(nil),
		(*BoardingPassRecordRequest_PassId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_flights_boarding_pass_proto_rawDesc), len(file_io_flights_boarding_pass_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_flights_boarding_pass_proto_goTypes,
		DependencyIndexes: file_io_flights_boarding_pass_proto_depIdxs,
		MessageInfos:      file_io_flights_boarding_pass_proto_msgTypes,
	}.Build()
	File_io_flights_boarding_pass_proto = out.File
	file_io_flights_boarding_pass_proto_goTypes = nil
	file_io_flights_boarding_pass_proto_depIdxs = nil
}
