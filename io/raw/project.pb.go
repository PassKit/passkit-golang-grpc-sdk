//*
// Pass Project belongs to the raw protocol for issuing Apple Wallet and Google Passes.
//
// This protocol is suit for cases where the business logic is handled elsewhere, and the purpose is purely to issue and
// update content for Apple Wallet and Google Pay.
//
// Pass Projects are the class level object of the raw protocol, and hold basic business logic on the project.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/raw/project.proto

package raw

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Pass Project holds the basic business logic of the Pass Project. It holds details on pass distribution, quotas, Apple certificate, integrations & hooks to use.
type PassProject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated project id (22 characters)
	// @tag: validateGeneric:"required" validateCreate:"-" validateUpdate:"required"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required" validateCreate:"-" validateUpdate:"required"`
	// Name of the pass project; will be shown on the data collection page (if set) and as pass issuer name.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// Localized name of the pass project
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedName *io.LocalizedString `protobuf:"bytes,3,opt,name=localizedName,proto3" json:"localizedName,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The pass project status (bitmask of ProjectStatus). Defaults to io.ProjectStatus.PROJECT_ACTIVE_FOR_OBJECT_CREATION + io.ProjectStatus.PROJECT_DRAFT
	// @tag: validateGeneric:"-" validateCreate:"-" validateUpdate:"-"
	Status []io.ProjectStatus `protobuf:"varint,4,rep,packed,name=status,proto3,enum=io.ProjectStatus" json:"status,omitempty" validateGeneric:"-" validateCreate:"-" validateUpdate:"-"`
	// The pass project quota
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Quota *io.Quota `protobuf:"bytes,5,opt,name=quota,proto3" json:"quota,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Leave empty for draft projects. Mandatory for projects where status contains PROJECT_PUBLISHED. Certificate to be used for signing the Apple passes.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"-"
	PassTypeIdentifier string `protobuf:"bytes,6,opt,name=passTypeIdentifier,proto3" json:"passTypeIdentifier,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"-"`
	// Contains the email & sms distribution settings for the project
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	DistributionSettings *io.DistributionSettings `protobuf:"bytes,7,opt,name=distributionSettings,proto3" json:"distributionSettings,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date the project was created.
	// @tag: validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created,proto3" json:"created,omitempty" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The date the project was updated.
	// @tag: validateCreate:"isdefault" validateUpdate:"isdefault"
	Updated       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated,proto3" json:"updated,omitempty" validateCreate:"isdefault" validateUpdate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PassProject) Reset() {
	*x = PassProject{}
	mi := &file_io_raw_project_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassProject) ProtoMessage() {}

func (x *PassProject) ProtoReflect() protoreflect.Message {
	mi := &file_io_raw_project_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassProject.ProtoReflect.Descriptor instead.
func (*PassProject) Descriptor() ([]byte, []int) {
	return file_io_raw_project_proto_rawDescGZIP(), []int{0}
}

func (x *PassProject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PassProject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PassProject) GetLocalizedName() *io.LocalizedString {
	if x != nil {
		return x.LocalizedName
	}
	return nil
}

func (x *PassProject) GetStatus() []io.ProjectStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PassProject) GetQuota() *io.Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *PassProject) GetPassTypeIdentifier() string {
	if x != nil {
		return x.PassTypeIdentifier
	}
	return ""
}

func (x *PassProject) GetDistributionSettings() *io.DistributionSettings {
	if x != nil {
		return x.DistributionSettings
	}
	return nil
}

func (x *PassProject) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PassProject) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

// Contains payload for copying a pass project
type PassProjectCopyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// uuid of the pass project to copy
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// optional name for the new pass project
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Status to set the copied project to
	Status []io.ProjectStatus `protobuf:"varint,3,rep,packed,name=status,proto3,enum=io.ProjectStatus" json:"status,omitempty"`
	// Can optionally be provided if setting status to published (requires a prod cert)
	PassTypeIdentifier string `protobuf:"bytes,4,opt,name=passTypeIdentifier,proto3" json:"passTypeIdentifier,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PassProjectCopyRequest) Reset() {
	*x = PassProjectCopyRequest{}
	mi := &file_io_raw_project_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassProjectCopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassProjectCopyRequest) ProtoMessage() {}

func (x *PassProjectCopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_raw_project_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassProjectCopyRequest.ProtoReflect.Descriptor instead.
func (*PassProjectCopyRequest) Descriptor() ([]byte, []int) {
	return file_io_raw_project_proto_rawDescGZIP(), []int{1}
}

func (x *PassProjectCopyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PassProjectCopyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PassProjectCopyRequest) GetStatus() []io.ProjectStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PassProjectCopyRequest) GetPassTypeIdentifier() string {
	if x != nil {
		return x.PassTypeIdentifier
	}
	return ""
}

var File_io_raw_project_proto protoreflect.FileDescriptor

var file_io_raw_project_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x69, 0x6f, 0x2f, 0x72, 0x61, 0x77, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x61, 0x77, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x04, 0x0a, 0x0b, 0x50,
	0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x6f, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a,
	0xbd, 0x01, 0x92, 0x41, 0xb9, 0x01, 0x0a, 0xb6, 0x01, 0x2a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x20,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x95, 0x01, 0x50, 0x61, 0x73, 0x73, 0x20, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x20, 0x50, 0x61, 0x73, 0x73, 0x20, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x20, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2c, 0x20,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x26, 0x20, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x2e, 0xd2,
	0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x97, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x53, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61,
	0x77, 0x5a, 0x28, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64,
	0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0x2f, 0x72, 0x61, 0x77, 0xaa, 0x02, 0x10, 0x50, 0x61,
	0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x77, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_raw_project_proto_rawDescOnce sync.Once
	file_io_raw_project_proto_rawDescData []byte
)

func file_io_raw_project_proto_rawDescGZIP() []byte {
	file_io_raw_project_proto_rawDescOnce.Do(func() {
		file_io_raw_project_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_raw_project_proto_rawDesc), len(file_io_raw_project_proto_rawDesc)))
	})
	return file_io_raw_project_proto_rawDescData
}

var file_io_raw_project_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_io_raw_project_proto_goTypes = []any{
	(*PassProject)(nil),             // 0: raw.PassProject
	(*PassProjectCopyRequest)(nil),  // 1: raw.PassProjectCopyRequest
	(*io.LocalizedString)(nil),      // 2: io.LocalizedString
	(io.ProjectStatus)(0),           // 3: io.ProjectStatus
	(*io.Quota)(nil),                // 4: io.Quota
	(*io.DistributionSettings)(nil), // 5: io.DistributionSettings
	(*timestamppb.Timestamp)(nil),   // 6: google.protobuf.Timestamp
}
var file_io_raw_project_proto_depIdxs = []int32{
	2, // 0: raw.PassProject.localizedName:type_name -> io.LocalizedString
	3, // 1: raw.PassProject.status:type_name -> io.ProjectStatus
	4, // 2: raw.PassProject.quota:type_name -> io.Quota
	5, // 3: raw.PassProject.distributionSettings:type_name -> io.DistributionSettings
	6, // 4: raw.PassProject.created:type_name -> google.protobuf.Timestamp
	6, // 5: raw.PassProject.updated:type_name -> google.protobuf.Timestamp
	3, // 6: raw.PassProjectCopyRequest.status:type_name -> io.ProjectStatus
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_io_raw_project_proto_init() }
func file_io_raw_project_proto_init() {
	if File_io_raw_project_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_raw_project_proto_rawDesc), len(file_io_raw_project_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_raw_project_proto_goTypes,
		DependencyIndexes: file_io_raw_project_proto_depIdxs,
		MessageInfos:      file_io_raw_project_proto_msgTypes,
	}.Build()
	File_io_raw_project_proto = out.File
	file_io_raw_project_proto_goTypes = nil
	file_io_raw_project_proto_depIdxs = nil
}
