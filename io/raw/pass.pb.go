//*
// Pass Object belongs to the raw protocol for issuing Apple Wallet and Google Passes.
//
// This protocol is suit for cases where the business logic is handled elsewhere, and the purpose is purely to issue and
// update content for Apple Wallet and Google Pay.
//
// A Pass Object holds object level data for the pass.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/raw/pass.proto

package raw

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The pass object
type Pass struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id assigned by PassKit to represent the pass record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable.
	// @tag: validateGeneric:"required" validateCreate:"-" validateUpdate:"-"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required" validateCreate:"-" validateUpdate:"-"`
	// This can be used to set the 'external' ID of pass (i.e. the ID as it's being used in your system). If provided then this can be used to query & update passes. This field will be treated as unique within the pass project, and cannot be updated at a later stage.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty,max=100" validateUpdate:"omitempty,max=100"
	ExternalId string `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty,max=100" validateUpdate:"omitempty,max=100"`
	// The pass project id to issue this pass for.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"
	PassProjectId string `protobuf:"bytes,3,opt,name=passProjectId,proto3" json:"passProjectId,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"`
	// The ID of the template this pass is issued for.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"
	PassTemplateId string `protobuf:"bytes,4,opt,name=passTemplateId,proto3" json:"passTemplateId,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"`
	// Can contain personal details. Any data in the personalDetails object is stored encrypted.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	PersonalDetails *io.Person `protobuf:"bytes,5,opt,name=personalDetails,proto3" json:"personalDetails,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Dynamic data fields. This data cannot be queried on, but can be used to render / update on the pass. Fields will render in the correct format based on template settings.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	DynamicData map[string]string `protobuf:"bytes,6,rep,name=dynamicData,proto3" json:"dynamicData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Indicates if this pass is opted out to receive marketing promotions (defaults to false).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	OptOut bool `protobuf:"varint,8,opt,name=optOut,proto3" json:"optOut,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Indicates if this pass is currently voided.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	IsVoided bool `protobuf:"varint,9,opt,name=isVoided,proto3" json:"isVoided,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Indicates when the pass invalidates. When the invalidate date hits, the pass is automatically invalidated.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	InvalidateDate *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=invalidateDate,proto3" json:"invalidateDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Indicates when the pass expires. When the expiry date hits, it will automatically gray out the barcode.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	ExpiryDate *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expiryDate,proto3" json:"expiryDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Can hold optional pass customization fields like appLaunchURL and userData
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	PassOptions *io.PassOptions `protobuf:"bytes,12,opt,name=passOptions,proto3" json:"passOptions,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Pass level overrides for proximity & images.
	PassOverrides *io.PassOverrides `protobuf:"bytes,13,opt,name=passOverrides,proto3" json:"passOverrides,omitempty"`
	// Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data.
	PassMetaData *io.Metadata `protobuf:"bytes,14,opt,name=passMetaData,proto3" json:"passMetaData,omitempty"`
	// The date the pass was created in the PassKit system.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The date the pass was last updated in the PassKit system.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Updated       *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated,proto3" json:"updated,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pass) Reset() {
	*x = Pass{}
	mi := &file_io_raw_pass_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pass) ProtoMessage() {}

func (x *Pass) ProtoReflect() protoreflect.Message {
	mi := &file_io_raw_pass_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pass.ProtoReflect.Descriptor instead.
func (*Pass) Descriptor() ([]byte, []int) {
	return file_io_raw_pass_proto_rawDescGZIP(), []int{0}
}

func (x *Pass) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pass) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Pass) GetPassProjectId() string {
	if x != nil {
		return x.PassProjectId
	}
	return ""
}

func (x *Pass) GetPassTemplateId() string {
	if x != nil {
		return x.PassTemplateId
	}
	return ""
}

func (x *Pass) GetPersonalDetails() *io.Person {
	if x != nil {
		return x.PersonalDetails
	}
	return nil
}

func (x *Pass) GetDynamicData() map[string]string {
	if x != nil {
		return x.DynamicData
	}
	return nil
}

func (x *Pass) GetOptOut() bool {
	if x != nil {
		return x.OptOut
	}
	return false
}

func (x *Pass) GetIsVoided() bool {
	if x != nil {
		return x.IsVoided
	}
	return false
}

func (x *Pass) GetInvalidateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvalidateDate
	}
	return nil
}

func (x *Pass) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *Pass) GetPassOptions() *io.PassOptions {
	if x != nil {
		return x.PassOptions
	}
	return nil
}

func (x *Pass) GetPassOverrides() *io.PassOverrides {
	if x != nil {
		return x.PassOverrides
	}
	return nil
}

func (x *Pass) GetPassMetaData() *io.Metadata {
	if x != nil {
		return x.PassMetaData
	}
	return nil
}

func (x *Pass) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Pass) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type PassRecordByExternalIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pass Project ID
	// @tag: validateGeneric:"required"
	PassProjectId string `protobuf:"bytes,1,opt,name=passProjectId,proto3" json:"passProjectId,omitempty" validateGeneric:"required"`
	// External ID
	// @tag: validateGeneric:"required"
	ExternalId    string `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PassRecordByExternalIdRequest) Reset() {
	*x = PassRecordByExternalIdRequest{}
	mi := &file_io_raw_pass_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassRecordByExternalIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassRecordByExternalIdRequest) ProtoMessage() {}

func (x *PassRecordByExternalIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_raw_pass_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassRecordByExternalIdRequest.ProtoReflect.Descriptor instead.
func (*PassRecordByExternalIdRequest) Descriptor() ([]byte, []int) {
	return file_io_raw_pass_proto_rawDescGZIP(), []int{1}
}

func (x *PassRecordByExternalIdRequest) GetPassProjectId() string {
	if x != nil {
		return x.PassProjectId
	}
	return ""
}

func (x *PassRecordByExternalIdRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

type ListPassesByPassProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	PassProjectId string `protobuf:"bytes,1,opt,name=passProjectId,proto3" json:"passProjectId,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Filters       *io.Filters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPassesByPassProjectRequest) Reset() {
	*x = ListPassesByPassProjectRequest{}
	mi := &file_io_raw_pass_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPassesByPassProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPassesByPassProjectRequest) ProtoMessage() {}

func (x *ListPassesByPassProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_raw_pass_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPassesByPassProjectRequest.ProtoReflect.Descriptor instead.
func (*ListPassesByPassProjectRequest) Descriptor() ([]byte, []int) {
	return file_io_raw_pass_proto_rawDescGZIP(), []int{2}
}

func (x *ListPassesByPassProjectRequest) GetPassProjectId() string {
	if x != nil {
		return x.PassProjectId
	}
	return ""
}

func (x *ListPassesByPassProjectRequest) GetFilters() *io.Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListPassesByPassTemplateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	PassProjectId string `protobuf:"bytes,1,opt,name=passProjectId,proto3" json:"passProjectId,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Filters       *io.Filters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPassesByPassTemplateRequest) Reset() {
	*x = ListPassesByPassTemplateRequest{}
	mi := &file_io_raw_pass_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPassesByPassTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPassesByPassTemplateRequest) ProtoMessage() {}

func (x *ListPassesByPassTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_raw_pass_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPassesByPassTemplateRequest.ProtoReflect.Descriptor instead.
func (*ListPassesByPassTemplateRequest) Descriptor() ([]byte, []int) {
	return file_io_raw_pass_proto_rawDescGZIP(), []int{3}
}

func (x *ListPassesByPassTemplateRequest) GetPassProjectId() string {
	if x != nil {
		return x.PassProjectId
	}
	return ""
}

func (x *ListPassesByPassTemplateRequest) GetFilters() *io.Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

var File_io_raw_pass_proto protoreflect.FileDescriptor

var file_io_raw_pass_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x69, 0x6f, 0x2f, 0x72, 0x61, 0x77, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x61, 0x77, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x07, 0x0a, 0x04, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x73,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x61, 0x77, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x56, 0x6f, 0x69, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x56, 0x6f, 0x69, 0x64, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x70, 0x61, 0x73,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0b, 0x70, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0d,
	0x70, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x91, 0x01, 0x92, 0x41, 0x8d, 0x01, 0x0a, 0x8a, 0x01, 0x2a, 0x04, 0x50,
	0x61, 0x73, 0x73, 0x32, 0x61, 0x50, 0x61, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x20, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x50, 0x61, 0x73, 0x73,
	0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x26, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x2e, 0xd2, 0x01, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0xd2, 0x01, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x1d, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x6d,
	0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x6e, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x53, 0x0a,
	0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x61, 0x77, 0x5a, 0x28, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73,
	0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0x2f, 0x72, 0x61, 0x77, 0xaa,
	0x02, 0x10, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x61, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_raw_pass_proto_rawDescOnce sync.Once
	file_io_raw_pass_proto_rawDescData []byte
)

func file_io_raw_pass_proto_rawDescGZIP() []byte {
	file_io_raw_pass_proto_rawDescOnce.Do(func() {
		file_io_raw_pass_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_raw_pass_proto_rawDesc), len(file_io_raw_pass_proto_rawDesc)))
	})
	return file_io_raw_pass_proto_rawDescData
}

var file_io_raw_pass_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_io_raw_pass_proto_goTypes = []any{
	(*Pass)(nil),                            // 0: raw.Pass
	(*PassRecordByExternalIdRequest)(nil),   // 1: raw.PassRecordByExternalIdRequest
	(*ListPassesByPassProjectRequest)(nil),  // 2: raw.ListPassesByPassProjectRequest
	(*ListPassesByPassTemplateRequest)(nil), // 3: raw.ListPassesByPassTemplateRequest
	nil,                                     // 4: raw.Pass.DynamicDataEntry
	(*io.Person)(nil),                       // 5: io.Person
	(*timestamppb.Timestamp)(nil),           // 6: google.protobuf.Timestamp
	(*io.PassOptions)(nil),                  // 7: io.PassOptions
	(*io.PassOverrides)(nil),                // 8: io.PassOverrides
	(*io.Metadata)(nil),                     // 9: io.Metadata
	(*io.Filters)(nil),                      // 10: io.Filters
}
var file_io_raw_pass_proto_depIdxs = []int32{
	5,  // 0: raw.Pass.personalDetails:type_name -> io.Person
	4,  // 1: raw.Pass.dynamicData:type_name -> raw.Pass.DynamicDataEntry
	6,  // 2: raw.Pass.invalidateDate:type_name -> google.protobuf.Timestamp
	6,  // 3: raw.Pass.expiryDate:type_name -> google.protobuf.Timestamp
	7,  // 4: raw.Pass.passOptions:type_name -> io.PassOptions
	8,  // 5: raw.Pass.passOverrides:type_name -> io.PassOverrides
	9,  // 6: raw.Pass.passMetaData:type_name -> io.Metadata
	6,  // 7: raw.Pass.created:type_name -> google.protobuf.Timestamp
	6,  // 8: raw.Pass.updated:type_name -> google.protobuf.Timestamp
	10, // 9: raw.ListPassesByPassProjectRequest.filters:type_name -> io.Filters
	10, // 10: raw.ListPassesByPassTemplateRequest.filters:type_name -> io.Filters
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_io_raw_pass_proto_init() }
func file_io_raw_pass_proto_init() {
	if File_io_raw_pass_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_raw_pass_proto_rawDesc), len(file_io_raw_pass_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_raw_pass_proto_goTypes,
		DependencyIndexes: file_io_raw_pass_proto_depIdxs,
		MessageInfos:      file_io_raw_pass_proto_msgTypes,
	}.Build()
	File_io_raw_pass_proto = out.File
	file_io_raw_pass_proto_goTypes = nil
	file_io_raw_pass_proto_depIdxs = nil
}
