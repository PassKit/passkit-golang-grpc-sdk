//*
// Metrics
//
// Analytics parameters for your digital pass.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/common/metrics.proto

package io

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Statuses of the pass. A pass will collect multiple statuses as it passes through its lifecycle.
type LifecycleEvents int32

const (
	LifecycleEvents_NO_STATUS LifecycleEvents = 0
	// Pass has been created and presented to the user to install.
	LifecycleEvents_RENDERED LifecycleEvents = 1
	// Pass has been installed in at least one Apple device.
	LifecycleEvents_INSTALLED_APPLE LifecycleEvents = 2
	// Pass has been installed in at least one Google Pay account.
	LifecycleEvents_INSTALLED_GOOGLE LifecycleEvents = 4
	// Pass has been installed in at least one Android wallet app.
	LifecycleEvents_INSTALLED_ANDROID_OTHER LifecycleEvents = 8
	// Pass has been uninstalled from at least one Apple device.
	LifecycleEvents_UNINSTALLED_APPLE LifecycleEvents = 1024
	// Pass has been uninstalled from at least one Google Pay account.
	LifecycleEvents_UNINSTALLED_GOOGLE LifecycleEvents = 2048
	// Pass has been uninstalled from at least one Android wallet app.
	LifecycleEvents_UNINSTALLED_ANDROID_OTHER LifecycleEvents = 4096
	// An Apple pass bundle has been created.
	LifecycleEvents_APPLE_PASS_CREATED LifecycleEvents = 8192
	// A Google Pay record has been created.
	LifecycleEvents_GOOGLE_PAY_RECORD_CREATED LifecycleEvents = 16384
	// Invalidation request sent to pass.
	LifecycleEvents_INVALIDATE_REQUESTED LifecycleEvents = 262144
	// Pass has been invalidated.
	LifecycleEvents_INVALIDATE_CONFIRMED LifecycleEvents = 524288
	// Pass has requested personalisation.
	LifecycleEvents_PASS_PERSONALISATION_REQUESTED LifecycleEvents = 1048576
	// Pass has been provided with personalised information.
	LifecycleEvents_PASS_PERSONALISED LifecycleEvents = 2097152
	// Pass is bound to an iCloud account.
	LifecycleEvents_PASS_ICLOUD_BOUND LifecycleEvents = 4194304
	// Pass Email Bounced.
	LifecycleEvents_PASS_EMAIL_BOUNCED LifecycleEvents = 8388608
	// Pass Email Complained.
	LifecycleEvents_PASS_EMAIL_COMPLAINED LifecycleEvents = 16777216
)

// Enum value maps for LifecycleEvents.
var (
	LifecycleEvents_name = map[int32]string{
		0:        "NO_STATUS",
		1:        "RENDERED",
		2:        "INSTALLED_APPLE",
		4:        "INSTALLED_GOOGLE",
		8:        "INSTALLED_ANDROID_OTHER",
		1024:     "UNINSTALLED_APPLE",
		2048:     "UNINSTALLED_GOOGLE",
		4096:     "UNINSTALLED_ANDROID_OTHER",
		8192:     "APPLE_PASS_CREATED",
		16384:    "GOOGLE_PAY_RECORD_CREATED",
		262144:   "INVALIDATE_REQUESTED",
		524288:   "INVALIDATE_CONFIRMED",
		1048576:  "PASS_PERSONALISATION_REQUESTED",
		2097152:  "PASS_PERSONALISED",
		4194304:  "PASS_ICLOUD_BOUND",
		8388608:  "PASS_EMAIL_BOUNCED",
		16777216: "PASS_EMAIL_COMPLAINED",
	}
	LifecycleEvents_value = map[string]int32{
		"NO_STATUS":                      0,
		"RENDERED":                       1,
		"INSTALLED_APPLE":                2,
		"INSTALLED_GOOGLE":               4,
		"INSTALLED_ANDROID_OTHER":        8,
		"UNINSTALLED_APPLE":              1024,
		"UNINSTALLED_GOOGLE":             2048,
		"UNINSTALLED_ANDROID_OTHER":      4096,
		"APPLE_PASS_CREATED":             8192,
		"GOOGLE_PAY_RECORD_CREATED":      16384,
		"INVALIDATE_REQUESTED":           262144,
		"INVALIDATE_CONFIRMED":           524288,
		"PASS_PERSONALISATION_REQUESTED": 1048576,
		"PASS_PERSONALISED":              2097152,
		"PASS_ICLOUD_BOUND":              4194304,
		"PASS_EMAIL_BOUNCED":             8388608,
		"PASS_EMAIL_COMPLAINED":          16777216,
	}
)

func (x LifecycleEvents) Enum() *LifecycleEvents {
	p := new(LifecycleEvents)
	*p = x
	return p
}

func (x LifecycleEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LifecycleEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_metrics_proto_enumTypes[0].Descriptor()
}

func (LifecycleEvents) Type() protoreflect.EnumType {
	return &file_io_common_metrics_proto_enumTypes[0]
}

func (x LifecycleEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LifecycleEvents.Descriptor instead.
func (LifecycleEvents) EnumDescriptor() ([]byte, []int) {
	return file_io_common_metrics_proto_rawDescGZIP(), []int{0}
}

// Status is the best determined status of the pass.
type Status int32

const (
	// Pass has been issued.
	Status_PASS_ISSUED Status = 0
	// Pass has been installed in a wallet.
	Status_PASS_INSTALLED Status = 1
	// Pass has been uninstalled (possibly deleted) from a wallet.
	Status_PASS_UNINSTALLED Status = 2
	// Pass has been invalidated.
	Status_PASS_INVALIDATED Status = 3
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "PASS_ISSUED",
		1: "PASS_INSTALLED",
		2: "PASS_UNINSTALLED",
		3: "PASS_INVALIDATED",
	}
	Status_value = map[string]int32{
		"PASS_ISSUED":      0,
		"PASS_INSTALLED":   1,
		"PASS_UNINSTALLED": 2,
		"PASS_INVALIDATED": 3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_metrics_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_io_common_metrics_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_io_common_metrics_proto_rawDescGZIP(), []int{1}
}

// Metrics list issued, installed, uninstalled and invalidated counts.
type Metrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pass records created.
	Created uint64 `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	// Number of passes installed in Apple Wallet.
	AppleWalletInstalls uint64 `protobuf:"varint,2,opt,name=appleWalletInstalls,proto3" json:"appleWalletInstalls,omitempty"`
	// Number of passes installed in Google Pay.
	GooglePayInstalls uint64 `protobuf:"varint,3,opt,name=googlePayInstalls,proto3" json:"googlePayInstalls,omitempty"`
	// Number of passes installed in Android wallet apps e.g. WalletPasses.
	OtherAndroidInstalls uint64 `protobuf:"varint,4,opt,name=otherAndroidInstalls,proto3" json:"otherAndroidInstalls,omitempty"`
	// Number of passes uninstalled from Apple Wallet.
	AppleWalletUninstalls uint64 `protobuf:"varint,11,opt,name=appleWalletUninstalls,proto3" json:"appleWalletUninstalls,omitempty"`
	// Number of passes uninstalled from Google Pay.
	GooglePayUninstalls uint64 `protobuf:"varint,12,opt,name=googlePayUninstalls,proto3" json:"googlePayUninstalls,omitempty"`
	// Number of passes uninstalled from Android wallet apps e.g. WalletPasses.
	OtherAndroidUninstalls uint64 `protobuf:"varint,13,opt,name=otherAndroidUninstalls,proto3" json:"otherAndroidUninstalls,omitempty"`
	// Number of passes invalidated.
	Invalidations uint64 `protobuf:"varint,20,opt,name=invalidations,proto3" json:"invalidations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	mi := &file_io_common_metrics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_metrics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_io_common_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *Metrics) GetCreated() uint64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Metrics) GetAppleWalletInstalls() uint64 {
	if x != nil {
		return x.AppleWalletInstalls
	}
	return 0
}

func (x *Metrics) GetGooglePayInstalls() uint64 {
	if x != nil {
		return x.GooglePayInstalls
	}
	return 0
}

func (x *Metrics) GetOtherAndroidInstalls() uint64 {
	if x != nil {
		return x.OtherAndroidInstalls
	}
	return 0
}

func (x *Metrics) GetAppleWalletUninstalls() uint64 {
	if x != nil {
		return x.AppleWalletUninstalls
	}
	return 0
}

func (x *Metrics) GetGooglePayUninstalls() uint64 {
	if x != nil {
		return x.GooglePayUninstalls
	}
	return 0
}

func (x *Metrics) GetOtherAndroidUninstalls() uint64 {
	if x != nil {
		return x.OtherAndroidUninstalls
	}
	return 0
}

func (x *Metrics) GetInvalidations() uint64 {
	if x != nil {
		return x.Invalidations
	}
	return 0
}

type UTM struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Use source to identify where the request is coming from. Defaults to Unknown.
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Use medium to identify a medium such as email, app, or cost-per-click advertising.
	Medium string `protobuf:"bytes,2,opt,name=medium,proto3" json:"medium,omitempty"`
	// Used for keyword analysis. Use campaign to identify a specific product promotion or strategic campaign.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Used for paid search. Use term to note the keywords for the ad that led to the pass.
	Term string `protobuf:"bytes,4,opt,name=term,proto3" json:"term,omitempty"`
	// Used for A/B testing and content-targeted ads. Use content to differentiate ads or links that point to the same URL.
	Content       string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UTM) Reset() {
	*x = UTM{}
	mi := &file_io_common_metrics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UTM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTM) ProtoMessage() {}

func (x *UTM) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_metrics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTM.ProtoReflect.Descriptor instead.
func (*UTM) Descriptor() ([]byte, []int) {
	return file_io_common_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *UTM) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UTM) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *UTM) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UTM) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *UTM) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type MetaLocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Country of issue.
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	// City of issue.
	City string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	// State, region, province or county of issue.
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Latitude of issue (provided in the issue call).
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude of issue (provided in the issue call).
	Longitude     float64 `protobuf:"fixed64,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetaLocation) Reset() {
	*x = MetaLocation{}
	mi := &file_io_common_metrics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetaLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaLocation) ProtoMessage() {}

func (x *MetaLocation) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_metrics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaLocation.ProtoReflect.Descriptor instead.
func (*MetaLocation) Descriptor() ([]byte, []int) {
	return file_io_common_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *MetaLocation) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *MetaLocation) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *MetaLocation) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *MetaLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *MetaLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

// Additional data relating to the pass. Metadata can be provided with a create pass request. The only writeable field is UTM. All other fields are system generated.
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current status of the pass. Not Writable.
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=io.Status" json:"status,omitempty"`
	// Events that the pass has attained. Not Writable.
	LifecycleEvents []LifecycleEvents `protobuf:"varint,2,rep,packed,name=lifecycleEvents,proto3,enum=io.LifecycleEvents" json:"lifecycleEvents,omitempty"`
	// Contains UTM data if provided in the URL parameters (utm_source, utm_medium, utm_name, utm_term, utm_content). Can also be used to track channel (web / app, etc).
	Utm *UTM `protobuf:"bytes,3,opt,name=utm,proto3" json:"utm,omitempty"`
	// Id of the physical pass. Not Writeable
	AltId string `protobuf:"bytes,4,opt,name=altId,proto3" json:"altId,omitempty"`
	// IP address of the pass issue. Not Writeable
	IssueIpAddress string `protobuf:"bytes,5,opt,name=issueIpAddress,proto3" json:"issueIpAddress,omitempty"`
	// IP address of the device where the pass was installed on. Not Writeable.
	InstallIpAddress string `protobuf:"bytes,6,opt,name=installIpAddress,proto3" json:"installIpAddress,omitempty"`
	// Location information based of the where the pass landing page was rendered. Not Writeable
	RenderLocation *MetaLocation `protobuf:"bytes,7,opt,name=renderLocation,proto3" json:"renderLocation,omitempty"`
	// IP address of the device where the pass landing page was rendered on. Not Writeable.
	RenderIpAddress string `protobuf:"bytes,8,opt,name=renderIpAddress,proto3" json:"renderIpAddress,omitempty"`
	// User agent provided by the Wallet Application. Not Writable.
	InstallUserAgent string `protobuf:"bytes,9,opt,name=installUserAgent,proto3" json:"installUserAgent,omitempty"`
	// User agent where the landing page was rendered on. Not Writable.
	RenderUserAgent string `protobuf:"bytes,10,opt,name=renderUserAgent,proto3" json:"renderUserAgent,omitempty"`
	// User agent provided by the Wallet Application. Not Writable.
	InstallDeviceAttributes []DeviceAttributes `protobuf:"varint,11,rep,packed,name=installDeviceAttributes,proto3,enum=io.DeviceAttributes" json:"installDeviceAttributes,omitempty"`
	// User agent where the landing page was rendered on. Not Writable.
	RenderDeviceAttributes []DeviceAttributes `protobuf:"varint,12,rep,packed,name=renderDeviceAttributes,proto3,enum=io.DeviceAttributes" json:"renderDeviceAttributes,omitempty"`
	// Date the pass record was created. Not Writable.
	IssueAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=issueAt,proto3" json:"issueAt,omitempty"`
	// Date the pass was first displayed to the user to install. Not Writable.
	RenderedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=renderedAt,proto3" json:"renderedAt,omitempty"`
	// Date the pass was first installed in a mobile wallet. Not Writable.
	FirstInstalledAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=firstInstalledAt,proto3" json:"firstInstalledAt,omitempty"`
	// Date the pass was last installed in a mobile wallet. For Apple devices, this will update each time the device registers a new token. Not Writable.
	LastInstalledAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=lastInstalledAt,proto3" json:"lastInstalledAt,omitempty"`
	// Date the pass was first uninstalled from a mobile wallet.  For Apple devices, this represents either the time notifications were disabled, or when the pass was removed from the wallet as it is not possible to distinguish the two events. Not Writable.
	FirstUninstalledAt *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=firstUninstalledAt,proto3" json:"firstUninstalledAt,omitempty"`
	// Date the pass was last uninstalled from a mobile wallet. Not Writable.
	LastUninstalledAt *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=lastUninstalledAt,proto3" json:"lastUninstalledAt,omitempty"`
	// Date the pass was invalidated. Not Writable.
	InvalidatedAt *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=invalidatedAt,proto3" json:"invalidatedAt,omitempty"`
	// Date the pass record was last updated. Can be used for segmenting passes based 'last visit', or 'last-purchase'. Not Writable.
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=lastUpdatedAt,proto3" json:"lastUpdatedAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_io_common_metrics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_metrics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_io_common_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *Metadata) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_PASS_ISSUED
}

func (x *Metadata) GetLifecycleEvents() []LifecycleEvents {
	if x != nil {
		return x.LifecycleEvents
	}
	return nil
}

func (x *Metadata) GetUtm() *UTM {
	if x != nil {
		return x.Utm
	}
	return nil
}

func (x *Metadata) GetAltId() string {
	if x != nil {
		return x.AltId
	}
	return ""
}

func (x *Metadata) GetIssueIpAddress() string {
	if x != nil {
		return x.IssueIpAddress
	}
	return ""
}

func (x *Metadata) GetInstallIpAddress() string {
	if x != nil {
		return x.InstallIpAddress
	}
	return ""
}

func (x *Metadata) GetRenderLocation() *MetaLocation {
	if x != nil {
		return x.RenderLocation
	}
	return nil
}

func (x *Metadata) GetRenderIpAddress() string {
	if x != nil {
		return x.RenderIpAddress
	}
	return ""
}

func (x *Metadata) GetInstallUserAgent() string {
	if x != nil {
		return x.InstallUserAgent
	}
	return ""
}

func (x *Metadata) GetRenderUserAgent() string {
	if x != nil {
		return x.RenderUserAgent
	}
	return ""
}

func (x *Metadata) GetInstallDeviceAttributes() []DeviceAttributes {
	if x != nil {
		return x.InstallDeviceAttributes
	}
	return nil
}

func (x *Metadata) GetRenderDeviceAttributes() []DeviceAttributes {
	if x != nil {
		return x.RenderDeviceAttributes
	}
	return nil
}

func (x *Metadata) GetIssueAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueAt
	}
	return nil
}

func (x *Metadata) GetRenderedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RenderedAt
	}
	return nil
}

func (x *Metadata) GetFirstInstalledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstInstalledAt
	}
	return nil
}

func (x *Metadata) GetLastInstalledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastInstalledAt
	}
	return nil
}

func (x *Metadata) GetFirstUninstalledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstUninstalledAt
	}
	return nil
}

func (x *Metadata) GetLastUninstalledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUninstalledAt
	}
	return nil
}

func (x *Metadata) GetInvalidatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InvalidatedAt
	}
	return nil
}

func (x *Metadata) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

var File_io_common_metrics_proto protoreflect.FileDescriptor

var file_io_common_metrics_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x69, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x03, 0x0a, 0x07, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50,
	0x61, 0x79, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x16,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x55, 0x6e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08,
	0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04,
	0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11,
	0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x13,
	0x10, 0x14, 0x22, 0x77, 0x0a, 0x03, 0x55, 0x54, 0x4d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xe4, 0x08, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x6c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x74,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x69, 0x6f, 0x2e, 0x55, 0x54, 0x4d,
	0x52, 0x03, 0x75, 0x74, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x38, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x17, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x16, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x16, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x41, 0x74, 0x12, 0x3a, 0x0a,
	0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x44, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x2a, 0xcc, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x55, 0x4e,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x10,
	0x80, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x55, 0x4e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45,
	0x44, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x80, 0x10, 0x12, 0x1e, 0x0a, 0x19, 0x55,
	0x4e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x80, 0x20, 0x12, 0x17, 0x0a, 0x12, 0x41,
	0x50, 0x50, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x80, 0x40, 0x12, 0x1f, 0x0a, 0x19, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x80, 0x80, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x80, 0x80,
	0x10, 0x12, 0x1a, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x80, 0x80, 0x20, 0x12, 0x24, 0x0a,
	0x1e, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x80, 0x80, 0x40, 0x12, 0x18, 0x0a, 0x11, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x53,
	0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x53, 0x45, 0x44, 0x10, 0x80, 0x80, 0x80, 0x01, 0x12, 0x18, 0x0a,
	0x11, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x80, 0x80, 0x80, 0x02, 0x12, 0x19, 0x0a, 0x12, 0x50, 0x41, 0x53, 0x53, 0x5f,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x80, 0x80,
	0x80, 0x04, 0x12, 0x1c, 0x0a, 0x15, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x80, 0x80, 0x80, 0x08,
	0x2a, 0x59, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41,
	0x53, 0x53, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x41, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x42, 0x47, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a,
	0x24, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f,
	0x67, 0x6f, 0x2f, 0x69, 0x6f, 0xaa, 0x02, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e,
	0x47, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_common_metrics_proto_rawDescOnce sync.Once
	file_io_common_metrics_proto_rawDescData []byte
)

func file_io_common_metrics_proto_rawDescGZIP() []byte {
	file_io_common_metrics_proto_rawDescOnce.Do(func() {
		file_io_common_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_common_metrics_proto_rawDesc), len(file_io_common_metrics_proto_rawDesc)))
	})
	return file_io_common_metrics_proto_rawDescData
}

var file_io_common_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_io_common_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_io_common_metrics_proto_goTypes = []any{
	(LifecycleEvents)(0),          // 0: io.LifecycleEvents
	(Status)(0),                   // 1: io.Status
	(*Metrics)(nil),               // 2: io.Metrics
	(*UTM)(nil),                   // 3: io.UTM
	(*MetaLocation)(nil),          // 4: io.MetaLocation
	(*Metadata)(nil),              // 5: io.Metadata
	(DeviceAttributes)(0),         // 6: io.DeviceAttributes
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_io_common_metrics_proto_depIdxs = []int32{
	1,  // 0: io.Metadata.status:type_name -> io.Status
	0,  // 1: io.Metadata.lifecycleEvents:type_name -> io.LifecycleEvents
	3,  // 2: io.Metadata.utm:type_name -> io.UTM
	4,  // 3: io.Metadata.renderLocation:type_name -> io.MetaLocation
	6,  // 4: io.Metadata.installDeviceAttributes:type_name -> io.DeviceAttributes
	6,  // 5: io.Metadata.renderDeviceAttributes:type_name -> io.DeviceAttributes
	7,  // 6: io.Metadata.issueAt:type_name -> google.protobuf.Timestamp
	7,  // 7: io.Metadata.renderedAt:type_name -> google.protobuf.Timestamp
	7,  // 8: io.Metadata.firstInstalledAt:type_name -> google.protobuf.Timestamp
	7,  // 9: io.Metadata.lastInstalledAt:type_name -> google.protobuf.Timestamp
	7,  // 10: io.Metadata.firstUninstalledAt:type_name -> google.protobuf.Timestamp
	7,  // 11: io.Metadata.lastUninstalledAt:type_name -> google.protobuf.Timestamp
	7,  // 12: io.Metadata.invalidatedAt:type_name -> google.protobuf.Timestamp
	7,  // 13: io.Metadata.lastUpdatedAt:type_name -> google.protobuf.Timestamp
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_io_common_metrics_proto_init() }
func file_io_common_metrics_proto_init() {
	if File_io_common_metrics_proto != nil {
		return
	}
	file_io_common_attributes_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_common_metrics_proto_rawDesc), len(file_io_common_metrics_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_common_metrics_proto_goTypes,
		DependencyIndexes: file_io_common_metrics_proto_depIdxs,
		EnumInfos:         file_io_common_metrics_proto_enumTypes,
		MessageInfos:      file_io_common_metrics_proto_msgTypes,
	}.Build()
	File_io_common_metrics_proto = out.File
	file_io_common_metrics_proto_goTypes = nil
	file_io_common_metrics_proto_depIdxs = nil
}
