//*
// Distribution
//
// Manage distribution channels for you digital passes.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/common/distribution.proto

package io

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DistributionChannel int32

const (
	DistributionChannel_NO_DISTRIBUTION DistributionChannel = 0
	// Unique pass link is distributed via email (will use default PK email template if no custom Email Template is provided)
	DistributionChannel_CHANNEL_EMAIL DistributionChannel = 1
	// Unique pass link is distributed via SMS (will use default PK SMS template if no custom SMS Template is provided)
	DistributionChannel_CHANNEL_SMS DistributionChannel = 2
)

// Enum value maps for DistributionChannel.
var (
	DistributionChannel_name = map[int32]string{
		0: "NO_DISTRIBUTION",
		1: "CHANNEL_EMAIL",
		2: "CHANNEL_SMS",
	}
	DistributionChannel_value = map[string]int32{
		"NO_DISTRIBUTION": 0,
		"CHANNEL_EMAIL":   1,
		"CHANNEL_SMS":     2,
	}
)

func (x DistributionChannel) Enum() *DistributionChannel {
	p := new(DistributionChannel)
	*p = x
	return p
}

func (x DistributionChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DistributionChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_distribution_proto_enumTypes[0].Descriptor()
}

func (DistributionChannel) Type() protoreflect.EnumType {
	return &file_io_common_distribution_proto_enumTypes[0]
}

func (x DistributionChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DistributionChannel.Descriptor instead.
func (DistributionChannel) EnumDescriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{0}
}

type EmailTemplateOptions int32

const (
	EmailTemplateOptions_EMAIL_TEMP_OPT_NONE EmailTemplateOptions = 0
	// Hide default external Id field on top right of the template.
	EmailTemplateOptions_EMAIL_TEMP_OPT_HIDE_EXT_ID EmailTemplateOptions = 1
	// Hide default full name field on top left of the template.
	EmailTemplateOptions_EMAIL_TEMP_OPT_HIDE_FULL_NAME EmailTemplateOptions = 2
)

// Enum value maps for EmailTemplateOptions.
var (
	EmailTemplateOptions_name = map[int32]string{
		0: "EMAIL_TEMP_OPT_NONE",
		1: "EMAIL_TEMP_OPT_HIDE_EXT_ID",
		2: "EMAIL_TEMP_OPT_HIDE_FULL_NAME",
	}
	EmailTemplateOptions_value = map[string]int32{
		"EMAIL_TEMP_OPT_NONE":           0,
		"EMAIL_TEMP_OPT_HIDE_EXT_ID":    1,
		"EMAIL_TEMP_OPT_HIDE_FULL_NAME": 2,
	}
)

func (x EmailTemplateOptions) Enum() *EmailTemplateOptions {
	p := new(EmailTemplateOptions)
	*p = x
	return p
}

func (x EmailTemplateOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailTemplateOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_distribution_proto_enumTypes[1].Descriptor()
}

func (EmailTemplateOptions) Type() protoreflect.EnumType {
	return &file_io_common_distribution_proto_enumTypes[1]
}

func (x EmailTemplateOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailTemplateOptions.Descriptor instead.
func (EmailTemplateOptions) EnumDescriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{1}
}

type EmailDistributionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pass Id (22 characters).
	// @tag: validateCreate:"required_without=ExternalId"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateCreate:"required_without=ExternalId"`
	// External Id of the pass holder. Needs to provide Class Id as well.
	// @tag: validateCreate:"omitempty"
	ExternalId string `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty" validateCreate:"omitempty"`
	// The class ID that the projects refers to (highest level protocol object; i.e. member program id, coupon campaign id, etc).
	// @tag: validateCreate:"omitempty"
	ClassId string `protobuf:"bytes,3,opt,name=classId,proto3" json:"classId,omitempty" validateCreate:"omitempty"`
	// @tag: validateCreate:"required"
	Protocol PassProtocol `protobuf:"varint,4,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty" validateCreate:"required"`
	// @tag: validateCreate:"omitempty"
	AlternativeEmail string `protobuf:"bytes,5,opt,name=alternativeEmail,proto3" json:"alternativeEmail,omitempty" validateCreate:"omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EmailDistributionRequest) Reset() {
	*x = EmailDistributionRequest{}
	mi := &file_io_common_distribution_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailDistributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailDistributionRequest) ProtoMessage() {}

func (x *EmailDistributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_distribution_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailDistributionRequest.ProtoReflect.Descriptor instead.
func (*EmailDistributionRequest) Descriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{0}
}

func (x *EmailDistributionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EmailDistributionRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *EmailDistributionRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *EmailDistributionRequest) GetProtocol() PassProtocol {
	if x != nil {
		return x.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

func (x *EmailDistributionRequest) GetAlternativeEmail() string {
	if x != nil {
		return x.AlternativeEmail
	}
	return ""
}

type SmartPassLinkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The PassKit URL used to generate the link; found under your SmartPass link settings in the Portal: https://github.com/PassKit/smart-pass-link-from-csv-generator#how-to-use
	// @tag: validateCreate:"required"
	ProjectDistributionUrl *Url `protobuf:"bytes,1,opt,name=projectDistributionUrl,proto3" json:"projectDistributionUrl,omitempty" validateCreate:"required"`
	// The fields for data to go into your SmartPass link: https://github.com/PassKit/smart-pass-link-from-csv-generator#available-field-names
	// @tag: validateCreate:"required,min=1"
	Fields        map[string]string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validateCreate:"required,min=1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmartPassLinkRequest) Reset() {
	*x = SmartPassLinkRequest{}
	mi := &file_io_common_distribution_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmartPassLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartPassLinkRequest) ProtoMessage() {}

func (x *SmartPassLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_distribution_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartPassLinkRequest.ProtoReflect.Descriptor instead.
func (*SmartPassLinkRequest) Descriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{1}
}

func (x *SmartPassLinkRequest) GetProjectDistributionUrl() *Url {
	if x != nil {
		return x.ProjectDistributionUrl
	}
	return nil
}

func (x *SmartPassLinkRequest) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

// DistributionSettings can be used by protocol top level elements to define the email / sms-es
type DistributionSettings struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	DistributionChannels []DistributionChannel  `protobuf:"varint,1,rep,packed,name=distributionChannels,proto3,enum=io.DistributionChannel" json:"distributionChannels,omitempty"`
	// Welcome email settings
	WelcomeEmail *EmailTemplate `protobuf:"bytes,2,opt,name=welcomeEmail,proto3" json:"welcomeEmail,omitempty"`
	// Welcome SMS settings
	WelcomeSms    *SmsTemplate `protobuf:"bytes,3,opt,name=welcomeSms,proto3" json:"welcomeSms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DistributionSettings) Reset() {
	*x = DistributionSettings{}
	mi := &file_io_common_distribution_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistributionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionSettings) ProtoMessage() {}

func (x *DistributionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_distribution_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionSettings.ProtoReflect.Descriptor instead.
func (*DistributionSettings) Descriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{2}
}

func (x *DistributionSettings) GetDistributionChannels() []DistributionChannel {
	if x != nil {
		return x.DistributionChannels
	}
	return nil
}

func (x *DistributionSettings) GetWelcomeEmail() *EmailTemplate {
	if x != nil {
		return x.WelcomeEmail
	}
	return nil
}

func (x *DistributionSettings) GetWelcomeSms() *SmsTemplate {
	if x != nil {
		return x.WelcomeSms
	}
	return nil
}

// EmailTemplate contains details for sending an email to a customer.
// Uses the default PassKit email provider and sending credentials
type EmailTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject of the email. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc..
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// Localized subject of the email. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.
	LocalizedSubject *LocalizedString `protobuf:"bytes,2,opt,name=localizedSubject,proto3" json:"localizedSubject,omitempty"`
	// Text content of the email (for email clients that don't support HTML). The body text is rendered above pass install url text. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.
	BodyTextContent string `protobuf:"bytes,3,opt,name=bodyTextContent,proto3" json:"bodyTextContent,omitempty"`
	// Localized text content of the email (for email clients that don't support HTML). The body text is rendered above pass install url text. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.
	LocalizedBodyTextContent *LocalizedString `protobuf:"bytes,4,opt,name=localizedBodyTextContent,proto3" json:"localizedBodyTextContent,omitempty"`
	// Content for HTML email rendered above the pass install button. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.
	BodyHtmlContent string `protobuf:"bytes,5,opt,name=bodyHtmlContent,proto3" json:"bodyHtmlContent,omitempty"`
	// Localized content for HTML email. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.
	LocalizedBodyHtmlContent *LocalizedString `protobuf:"bytes,6,opt,name=localizedBodyHtmlContent,proto3" json:"localizedBodyHtmlContent,omitempty"`
	// 7 is reserved for custom email SMTP configuration
	Configuration *EmailConfiguration `protobuf:"bytes,7,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Text of the pass install button.
	ButtonText string `protobuf:"bytes,8,opt,name=buttonText,proto3" json:"buttonText,omitempty"`
	// Text color of the pass install button.
	ButtonTextColor string `protobuf:"bytes,9,opt,name=buttonTextColor,proto3" json:"buttonTextColor,omitempty"`
	// Color of the pass install button.
	ButtonBackgroundColor string `protobuf:"bytes,10,opt,name=buttonBackgroundColor,proto3" json:"buttonBackgroundColor,omitempty"`
	// Radius of the pass install button. The unit can be px or %. Default is px.
	ButtonBorderRadius string `protobuf:"bytes,11,opt,name=buttonBorderRadius,proto3" json:"buttonBorderRadius,omitempty"`
	// Footer text content (for email clients that don't support HTML). The footer text is rendered below the pass install url text.
	FooterTextContent string `protobuf:"bytes,12,opt,name=footerTextContent,proto3" json:"footerTextContent,omitempty"`
	// Localized footer text content (for email clients that don't support HTML). The footer text is rendered below the pass install url text.
	LocalizedFooterTextContent *LocalizedString `protobuf:"bytes,13,opt,name=localizedFooterTextContent,proto3" json:"localizedFooterTextContent,omitempty"`
	// Footer HTML content rendered below the pass install button.
	FooterHtmlContent string `protobuf:"bytes,14,opt,name=footerHtmlContent,proto3" json:"footerHtmlContent,omitempty"`
	// Localized content for HTML footer content which is rendered below the pass install button.
	LocalizedFooterHtmlContent *LocalizedString `protobuf:"bytes,15,opt,name=localizedFooterHtmlContent,proto3" json:"localizedFooterHtmlContent,omitempty"`
	// Background color for the message content section.
	MessageBackgroundColor string `protobuf:"bytes,16,opt,name=messageBackgroundColor,proto3" json:"messageBackgroundColor,omitempty"`
	// Background color for the margin space surrounding the message content. This setting is relevant for PC viewers.
	PageBackgroundColor string `protobuf:"bytes,17,opt,name=pageBackgroundColor,proto3" json:"pageBackgroundColor,omitempty"`
	// Holds additional template options for rendering the email template.
	TemplateOptions int32 `protobuf:"varint,18,opt,name=templateOptions,proto3" json:"templateOptions,omitempty"`
	// Text color of the pass install button in dark mode.
	DarkModeButtonTextColor string `protobuf:"bytes,19,opt,name=darkModeButtonTextColor,proto3" json:"darkModeButtonTextColor,omitempty"`
	// Color of the pass install button in dark mode.
	DarkModeButtonBackgroundColor string `protobuf:"bytes,20,opt,name=darkModeButtonBackgroundColor,proto3" json:"darkModeButtonBackgroundColor,omitempty"`
	// Background color of the page in dark mode.
	DarkModePageBackgroundColor string `protobuf:"bytes,21,opt,name=darkModePageBackgroundColor,proto3" json:"darkModePageBackgroundColor,omitempty"`
	// Background color of the message content in dark mode.
	DarkModeContentBackgroundColor string `protobuf:"bytes,22,opt,name=darkModeContentBackgroundColor,proto3" json:"darkModeContentBackgroundColor,omitempty"`
	// Header label for the email.
	HeaderLabel string `protobuf:"bytes,23,opt,name=headerLabel,proto3" json:"headerLabel,omitempty"`
	// Localized header label for the email.
	LocalizedHeaderLabel *LocalizedString `protobuf:"bytes,24,opt,name=localizedHeaderLabel,proto3" json:"localizedHeaderLabel,omitempty"`
	// Header value for the email.
	HeaderValue   string `protobuf:"bytes,25,opt,name=headerValue,proto3" json:"headerValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmailTemplate) Reset() {
	*x = EmailTemplate{}
	mi := &file_io_common_distribution_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailTemplate) ProtoMessage() {}

func (x *EmailTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_distribution_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailTemplate.ProtoReflect.Descriptor instead.
func (*EmailTemplate) Descriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{3}
}

func (x *EmailTemplate) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *EmailTemplate) GetLocalizedSubject() *LocalizedString {
	if x != nil {
		return x.LocalizedSubject
	}
	return nil
}

func (x *EmailTemplate) GetBodyTextContent() string {
	if x != nil {
		return x.BodyTextContent
	}
	return ""
}

func (x *EmailTemplate) GetLocalizedBodyTextContent() *LocalizedString {
	if x != nil {
		return x.LocalizedBodyTextContent
	}
	return nil
}

func (x *EmailTemplate) GetBodyHtmlContent() string {
	if x != nil {
		return x.BodyHtmlContent
	}
	return ""
}

func (x *EmailTemplate) GetLocalizedBodyHtmlContent() *LocalizedString {
	if x != nil {
		return x.LocalizedBodyHtmlContent
	}
	return nil
}

func (x *EmailTemplate) GetConfiguration() *EmailConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *EmailTemplate) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *EmailTemplate) GetButtonTextColor() string {
	if x != nil {
		return x.ButtonTextColor
	}
	return ""
}

func (x *EmailTemplate) GetButtonBackgroundColor() string {
	if x != nil {
		return x.ButtonBackgroundColor
	}
	return ""
}

func (x *EmailTemplate) GetButtonBorderRadius() string {
	if x != nil {
		return x.ButtonBorderRadius
	}
	return ""
}

func (x *EmailTemplate) GetFooterTextContent() string {
	if x != nil {
		return x.FooterTextContent
	}
	return ""
}

func (x *EmailTemplate) GetLocalizedFooterTextContent() *LocalizedString {
	if x != nil {
		return x.LocalizedFooterTextContent
	}
	return nil
}

func (x *EmailTemplate) GetFooterHtmlContent() string {
	if x != nil {
		return x.FooterHtmlContent
	}
	return ""
}

func (x *EmailTemplate) GetLocalizedFooterHtmlContent() *LocalizedString {
	if x != nil {
		return x.LocalizedFooterHtmlContent
	}
	return nil
}

func (x *EmailTemplate) GetMessageBackgroundColor() string {
	if x != nil {
		return x.MessageBackgroundColor
	}
	return ""
}

func (x *EmailTemplate) GetPageBackgroundColor() string {
	if x != nil {
		return x.PageBackgroundColor
	}
	return ""
}

func (x *EmailTemplate) GetTemplateOptions() int32 {
	if x != nil {
		return x.TemplateOptions
	}
	return 0
}

func (x *EmailTemplate) GetDarkModeButtonTextColor() string {
	if x != nil {
		return x.DarkModeButtonTextColor
	}
	return ""
}

func (x *EmailTemplate) GetDarkModeButtonBackgroundColor() string {
	if x != nil {
		return x.DarkModeButtonBackgroundColor
	}
	return ""
}

func (x *EmailTemplate) GetDarkModePageBackgroundColor() string {
	if x != nil {
		return x.DarkModePageBackgroundColor
	}
	return ""
}

func (x *EmailTemplate) GetDarkModeContentBackgroundColor() string {
	if x != nil {
		return x.DarkModeContentBackgroundColor
	}
	return ""
}

func (x *EmailTemplate) GetHeaderLabel() string {
	if x != nil {
		return x.HeaderLabel
	}
	return ""
}

func (x *EmailTemplate) GetLocalizedHeaderLabel() *LocalizedString {
	if x != nil {
		return x.LocalizedHeaderLabel
	}
	return nil
}

func (x *EmailTemplate) GetHeaderValue() string {
	if x != nil {
		return x.HeaderValue
	}
	return ""
}

type EmailConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sender's email address.
	EmailFrom string `protobuf:"bytes,1,opt,name=emailFrom,proto3" json:"emailFrom,omitempty"`
	// Sender's company / organization name.
	EmailFromName string `protobuf:"bytes,2,opt,name=emailFromName,proto3" json:"emailFromName,omitempty"`
	// Indicates that PassKit is authorized to send from the emailFrom address (either via AWS or Google Cloud)
	EmailFromVerifiedForSending bool `protobuf:"varint,3,opt,name=EmailFromVerifiedForSending,proto3" json:"EmailFromVerifiedForSending,omitempty"`
	// Indicated that bodyHtmlContent is custom HTML provided by the user.
	UseCustomHtml bool `protobuf:"varint,4,opt,name=useCustomHtml,proto3" json:"useCustomHtml,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmailConfiguration) Reset() {
	*x = EmailConfiguration{}
	mi := &file_io_common_distribution_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailConfiguration) ProtoMessage() {}

func (x *EmailConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_distribution_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailConfiguration.ProtoReflect.Descriptor instead.
func (*EmailConfiguration) Descriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{4}
}

func (x *EmailConfiguration) GetEmailFrom() string {
	if x != nil {
		return x.EmailFrom
	}
	return ""
}

func (x *EmailConfiguration) GetEmailFromName() string {
	if x != nil {
		return x.EmailFromName
	}
	return ""
}

func (x *EmailConfiguration) GetEmailFromVerifiedForSending() bool {
	if x != nil {
		return x.EmailFromVerifiedForSending
	}
	return false
}

func (x *EmailConfiguration) GetUseCustomHtml() bool {
	if x != nil {
		return x.UseCustomHtml
	}
	return false
}

// SMS contains details for a sending an sms to customers.
// Uses the default PassKit SMS provider and sending credentials.
type SmsTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// content of the SMS; needs to be limited to 70 unicode characters. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// localized content of the SMS; needs to be limited to 70 unicode characters. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.
	LocalizedContent *LocalizedString `protobuf:"bytes,2,opt,name=localizedContent,proto3" json:"localizedContent,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SmsTemplate) Reset() {
	*x = SmsTemplate{}
	mi := &file_io_common_distribution_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsTemplate) ProtoMessage() {}

func (x *SmsTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_distribution_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsTemplate.ProtoReflect.Descriptor instead.
func (*SmsTemplate) Descriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{5}
}

func (x *SmsTemplate) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SmsTemplate) GetLocalizedContent() *LocalizedString {
	if x != nil {
		return x.LocalizedContent
	}
	return nil
}

type EnrolmentUrls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enrolment page of the base tier (tier with the lowest tier index).
	PageUrl string `protobuf:"bytes,1,opt,name=pageUrl,proto3" json:"pageUrl,omitempty"`
	// QR code image url of the the base tier.
	QrCodeUrl string `protobuf:"bytes,2,opt,name=qrCodeUrl,proto3" json:"qrCodeUrl,omitempty"`
	// Enrolment page for each tier.
	TierEnrolmentUrls map[string]string `protobuf:"bytes,3,rep,name=tierEnrolmentUrls,proto3" json:"tierEnrolmentUrls,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// QR code for each tier.
	TierEnrolmentQRs map[string]string `protobuf:"bytes,4,rep,name=tierEnrolmentQRs,proto3" json:"tierEnrolmentQRs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EnrolmentUrls) Reset() {
	*x = EnrolmentUrls{}
	mi := &file_io_common_distribution_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnrolmentUrls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrolmentUrls) ProtoMessage() {}

func (x *EnrolmentUrls) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_distribution_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrolmentUrls.ProtoReflect.Descriptor instead.
func (*EnrolmentUrls) Descriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{6}
}

func (x *EnrolmentUrls) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

func (x *EnrolmentUrls) GetQrCodeUrl() string {
	if x != nil {
		return x.QrCodeUrl
	}
	return ""
}

func (x *EnrolmentUrls) GetTierEnrolmentUrls() map[string]string {
	if x != nil {
		return x.TierEnrolmentUrls
	}
	return nil
}

func (x *EnrolmentUrls) GetTierEnrolmentQRs() map[string]string {
	if x != nil {
		return x.TierEnrolmentQRs
	}
	return nil
}

type DataCollectionFields struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        []*DataCollectionField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataCollectionFields) Reset() {
	*x = DataCollectionFields{}
	mi := &file_io_common_distribution_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataCollectionFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCollectionFields) ProtoMessage() {}

func (x *DataCollectionFields) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_distribution_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCollectionFields.ProtoReflect.Descriptor instead.
func (*DataCollectionFields) Descriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{7}
}

func (x *DataCollectionFields) GetFields() []*DataCollectionField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DataCollectionField struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If PII key is set as an unique name of the field, collected data will be stored under PII (ex. surname, forename).
	// Else, uniqueName (key) and value are stored under meta object.
	UniqueName string    `protobuf:"bytes,1,opt,name=uniqueName,proto3" json:"uniqueName,omitempty"`
	FieldType  FieldType `protobuf:"varint,2,opt,name=fieldType,proto3,enum=io.FieldType" json:"fieldType,omitempty"`
	// If set true, the field is mandatory. If set false, the field is optional.
	IsRequired bool `protobuf:"varint,3,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	// A text used for the data collection field label and pass field title.
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	// This translates label text into different language.
	LocalizedLabel *LocalizedString `protobuf:"bytes,5,opt,name=localizedLabel,proto3" json:"localizedLabel,omitempty"`
	// Data type you want to receive from your users.
	DataType DataType `protobuf:"varint,6,opt,name=dataType,proto3,enum=io.DataType" json:"dataType,omitempty"`
	// An optional default value or text. E.g. a default set of terms an conditions. Value can contain a protocol field in the format of ${member.externalId}.
	DefaultValue string `protobuf:"bytes,7,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	// This translates default value of the field into different languages.
	LocalizedDefaultValue *LocalizedString `protobuf:"bytes,8,opt,name=localizedDefaultValue,proto3" json:"localizedDefaultValue,omitempty"`
	// A regex which allows you to set set custom validation rules for the data stored.
	Validation string `protobuf:"bytes,9,opt,name=validation,proto3" json:"validation,omitempty"`
	// If false, a defaultValue or listOptions[0] will be used.
	UserCanSetValue bool `protobuf:"varint,10,opt,name=userCanSetValue,proto3" json:"userCanSetValue,omitempty"`
	// The currency code (e.g. USD, EUR) to display with money value if data type is set as currency.
	CurrencyCode string `protobuf:"bytes,11,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	// Default international telephone code determines the default country flag of the tel input field (e.g. +852, +44).
	DefaultTelCountryCode string `protobuf:"bytes,12,opt,name=defaultTelCountryCode,proto3" json:"defaultTelCountryCode,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *DataCollectionField) Reset() {
	*x = DataCollectionField{}
	mi := &file_io_common_distribution_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataCollectionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCollectionField) ProtoMessage() {}

func (x *DataCollectionField) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_distribution_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCollectionField.ProtoReflect.Descriptor instead.
func (*DataCollectionField) Descriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{8}
}

func (x *DataCollectionField) GetUniqueName() string {
	if x != nil {
		return x.UniqueName
	}
	return ""
}

func (x *DataCollectionField) GetFieldType() FieldType {
	if x != nil {
		return x.FieldType
	}
	return FieldType_FIELD_TYPE_NONE
}

func (x *DataCollectionField) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *DataCollectionField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DataCollectionField) GetLocalizedLabel() *LocalizedString {
	if x != nil {
		return x.LocalizedLabel
	}
	return nil
}

func (x *DataCollectionField) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_NONE
}

func (x *DataCollectionField) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *DataCollectionField) GetLocalizedDefaultValue() *LocalizedString {
	if x != nil {
		return x.LocalizedDefaultValue
	}
	return nil
}

func (x *DataCollectionField) GetValidation() string {
	if x != nil {
		return x.Validation
	}
	return ""
}

func (x *DataCollectionField) GetUserCanSetValue() bool {
	if x != nil {
		return x.UserCanSetValue
	}
	return false
}

func (x *DataCollectionField) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *DataCollectionField) GetDefaultTelCountryCode() string {
	if x != nil {
		return x.DefaultTelCountryCode
	}
	return ""
}

type SmartPassCsvUploadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Url used to prefix the smartpass link. Also includes the short code needed to lookup the parent project.
	// @tag: validateCreate:"required"
	DistributionUrl string `protobuf:"bytes,1,opt,name=distributionUrl,proto3" json:"distributionUrl,omitempty" validateCreate:"required"`
	// @tag: validateCreate:"required"
	CsvContent    string `protobuf:"bytes,2,opt,name=csvContent,proto3" json:"csvContent,omitempty" validateCreate:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SmartPassCsvUploadRequest) Reset() {
	*x = SmartPassCsvUploadRequest{}
	mi := &file_io_common_distribution_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmartPassCsvUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartPassCsvUploadRequest) ProtoMessage() {}

func (x *SmartPassCsvUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_distribution_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartPassCsvUploadRequest.ProtoReflect.Descriptor instead.
func (*SmartPassCsvUploadRequest) Descriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{9}
}

func (x *SmartPassCsvUploadRequest) GetDistributionUrl() string {
	if x != nil {
		return x.DistributionUrl
	}
	return ""
}

func (x *SmartPassCsvUploadRequest) GetCsvContent() string {
	if x != nil {
		return x.CsvContent
	}
	return ""
}

type ImportProtocolRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateCreate:"required"
	CsvContent string `protobuf:"bytes,1,opt,name=csvContent,proto3" json:"csvContent,omitempty" validateCreate:"required"`
	// @tag: validateCreate:"required"
	ClassId string `protobuf:"bytes,2,opt,name=classId,proto3" json:"classId,omitempty" validateCreate:"required"`
	// @tag: validateCreate:"required"
	Protocol      PassProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty" validateCreate:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportProtocolRequest) Reset() {
	*x = ImportProtocolRequest{}
	mi := &file_io_common_distribution_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportProtocolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportProtocolRequest) ProtoMessage() {}

func (x *ImportProtocolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_distribution_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportProtocolRequest.ProtoReflect.Descriptor instead.
func (*ImportProtocolRequest) Descriptor() ([]byte, []int) {
	return file_io_common_distribution_proto_rawDescGZIP(), []int{10}
}

func (x *ImportProtocolRequest) GetCsvContent() string {
	if x != nil {
		return x.CsvContent
	}
	return ""
}

func (x *ImportProtocolRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *ImportProtocolRequest) GetProtocol() PassProtocol {
	if x != nil {
		return x.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

var File_io_common_distribution_proto protoreflect.FileDescriptor

var file_io_common_distribution_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x69, 0x6f, 0x1a, 0x1e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x69, 0x6f, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x18, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xd0, 0x01, 0x0a, 0x14, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x69, 0x6f, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x50, 0x61, 0x73, 0x73, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x35, 0x0a, 0x0c, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
	0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x0a, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
	0x65, 0x53, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e,
	0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x77, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x65, 0x53, 0x6d, 0x73, 0x22, 0xff, 0x0a, 0x0a, 0x0d, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4f,
	0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x42, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x62, 0x6f, 0x64, 0x79, 0x48, 0x74, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x6f, 0x64, 0x79, 0x48, 0x74,
	0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x18, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x74, 0x6d, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x48,
	0x74, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x6f, 0x6f, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x66,
	0x6f, 0x6f, 0x74, 0x65, 0x72, 0x48, 0x74, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x48, 0x74,
	0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x1a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x48, 0x74, 0x6d, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x6f, 0x6f,
	0x74, 0x65, 0x72, 0x48, 0x74, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x67, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x1d,
	0x64, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1d, 0x64, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x40, 0x0a, 0x1b, 0x64, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x64, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x64, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x64, 0x61,
	0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x47,
	0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x12, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x6f,
	0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x46, 0x72, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x53,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x48, 0x74, 0x6d, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75,
	0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x74, 0x6d, 0x6c, 0x22, 0x7c, 0x0a, 0x0b,
	0x53, 0x6d, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x92, 0x41,
	0x02, 0x78, 0x46, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x10,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x05, 0x92, 0x41, 0x02,
	0x78, 0x46, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xff, 0x02, 0x0a, 0x0d, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x56, 0x0a, 0x11, 0x74, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72,
	0x6c, 0x73, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x72, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x74, 0x69, 0x65, 0x72, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x10,
	0x74, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x52, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x52, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x74, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x52,
	0x73, 0x1a, 0x44, 0x0a, 0x16, 0x54, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x54, 0x69, 0x65, 0x72, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x52, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x14,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x92, 0x04, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61,
	0x6e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x65, 0x0a, 0x19, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x50, 0x61, 0x73, 0x73, 0x43, 0x73, 0x76, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x7f, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x73,
	0x76, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2a, 0x4e, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x4d, 0x53,
	0x10, 0x02, 0x2a, 0x78, 0x0a, 0x14, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x45, 0x4d,
	0x50, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x49,
	0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x45, 0x4d,
	0x50, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x42, 0x47, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x5a, 0x24, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b,
	0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0xaa, 0x02, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_common_distribution_proto_rawDescOnce sync.Once
	file_io_common_distribution_proto_rawDescData []byte
)

func file_io_common_distribution_proto_rawDescGZIP() []byte {
	file_io_common_distribution_proto_rawDescOnce.Do(func() {
		file_io_common_distribution_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_common_distribution_proto_rawDesc), len(file_io_common_distribution_proto_rawDesc)))
	})
	return file_io_common_distribution_proto_rawDescData
}

var file_io_common_distribution_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_io_common_distribution_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_io_common_distribution_proto_goTypes = []any{
	(DistributionChannel)(0),          // 0: io.DistributionChannel
	(EmailTemplateOptions)(0),         // 1: io.EmailTemplateOptions
	(*EmailDistributionRequest)(nil),  // 2: io.EmailDistributionRequest
	(*SmartPassLinkRequest)(nil),      // 3: io.SmartPassLinkRequest
	(*DistributionSettings)(nil),      // 4: io.DistributionSettings
	(*EmailTemplate)(nil),             // 5: io.EmailTemplate
	(*EmailConfiguration)(nil),        // 6: io.EmailConfiguration
	(*SmsTemplate)(nil),               // 7: io.SmsTemplate
	(*EnrolmentUrls)(nil),             // 8: io.EnrolmentUrls
	(*DataCollectionFields)(nil),      // 9: io.DataCollectionFields
	(*DataCollectionField)(nil),       // 10: io.DataCollectionField
	(*SmartPassCsvUploadRequest)(nil), // 11: io.SmartPassCsvUploadRequest
	(*ImportProtocolRequest)(nil),     // 12: io.ImportProtocolRequest
	nil,                               // 13: io.SmartPassLinkRequest.FieldsEntry
	nil,                               // 14: io.EnrolmentUrls.TierEnrolmentUrlsEntry
	nil,                               // 15: io.EnrolmentUrls.TierEnrolmentQRsEntry
	(PassProtocol)(0),                 // 16: io.PassProtocol
	(*Url)(nil),                       // 17: io.Url
	(*LocalizedString)(nil),           // 18: io.LocalizedString
	(FieldType)(0),                    // 19: io.FieldType
	(DataType)(0),                     // 20: io.DataType
}
var file_io_common_distribution_proto_depIdxs = []int32{
	16, // 0: io.EmailDistributionRequest.protocol:type_name -> io.PassProtocol
	17, // 1: io.SmartPassLinkRequest.projectDistributionUrl:type_name -> io.Url
	13, // 2: io.SmartPassLinkRequest.fields:type_name -> io.SmartPassLinkRequest.FieldsEntry
	0,  // 3: io.DistributionSettings.distributionChannels:type_name -> io.DistributionChannel
	5,  // 4: io.DistributionSettings.welcomeEmail:type_name -> io.EmailTemplate
	7,  // 5: io.DistributionSettings.welcomeSms:type_name -> io.SmsTemplate
	18, // 6: io.EmailTemplate.localizedSubject:type_name -> io.LocalizedString
	18, // 7: io.EmailTemplate.localizedBodyTextContent:type_name -> io.LocalizedString
	18, // 8: io.EmailTemplate.localizedBodyHtmlContent:type_name -> io.LocalizedString
	6,  // 9: io.EmailTemplate.configuration:type_name -> io.EmailConfiguration
	18, // 10: io.EmailTemplate.localizedFooterTextContent:type_name -> io.LocalizedString
	18, // 11: io.EmailTemplate.localizedFooterHtmlContent:type_name -> io.LocalizedString
	18, // 12: io.EmailTemplate.localizedHeaderLabel:type_name -> io.LocalizedString
	18, // 13: io.SmsTemplate.localizedContent:type_name -> io.LocalizedString
	14, // 14: io.EnrolmentUrls.tierEnrolmentUrls:type_name -> io.EnrolmentUrls.TierEnrolmentUrlsEntry
	15, // 15: io.EnrolmentUrls.tierEnrolmentQRs:type_name -> io.EnrolmentUrls.TierEnrolmentQRsEntry
	10, // 16: io.DataCollectionFields.fields:type_name -> io.DataCollectionField
	19, // 17: io.DataCollectionField.fieldType:type_name -> io.FieldType
	18, // 18: io.DataCollectionField.localizedLabel:type_name -> io.LocalizedString
	20, // 19: io.DataCollectionField.dataType:type_name -> io.DataType
	18, // 20: io.DataCollectionField.localizedDefaultValue:type_name -> io.LocalizedString
	16, // 21: io.ImportProtocolRequest.protocol:type_name -> io.PassProtocol
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_io_common_distribution_proto_init() }
func file_io_common_distribution_proto_init() {
	if File_io_common_distribution_proto != nil {
		return
	}
	file_io_common_common_objects_proto_init()
	file_io_common_localization_proto_init()
	file_io_common_protocols_proto_init()
	file_io_common_template_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_common_distribution_proto_rawDesc), len(file_io_common_distribution_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_common_distribution_proto_goTypes,
		DependencyIndexes: file_io_common_distribution_proto_depIdxs,
		EnumInfos:         file_io_common_distribution_proto_enumTypes,
		MessageInfos:      file_io_common_distribution_proto_msgTypes,
	}.Build()
	File_io_common_distribution_proto = out.File
	file_io_common_distribution_proto_goTypes = nil
	file_io_common_distribution_proto_depIdxs = nil
}
