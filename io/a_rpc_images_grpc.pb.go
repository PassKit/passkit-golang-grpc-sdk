// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: io/core/a_rpc_images.proto

package io

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Images_SetProfileImage_FullMethodName              = "/io.Images/setProfileImage"
	Images_GetProfileImage_FullMethodName              = "/io.Images/getProfileImage"
	Images_CreateImages_FullMethodName                 = "/io.Images/createImages"
	Images_UpdateImage_FullMethodName                  = "/io.Images/updateImage"
	Images_GetImageURL_FullMethodName                  = "/io.Images/getImageURL"
	Images_GetStampImageURL_FullMethodName             = "/io.Images/getStampImageURL"
	Images_GetStampImageConfig_FullMethodName          = "/io.Images/getStampImageConfig"
	Images_UpdateStampImageConfig_FullMethodName       = "/io.Images/updateStampImageConfig"
	Images_GetStampImagePreview_FullMethodName         = "/io.Images/getStampImagePreview"
	Images_GetLocalizedImageURL_FullMethodName         = "/io.Images/getLocalizedImageURL"
	Images_GetProfileImageById_FullMethodName          = "/io.Images/getProfileImageById"
	Images_GetImageBundle_FullMethodName               = "/io.Images/getImageBundle"
	Images_GetImageData_FullMethodName                 = "/io.Images/getImageData"
	Images_DeleteImage_FullMethodName                  = "/io.Images/deleteImage"
	Images_DeleteLocalizedImage_FullMethodName         = "/io.Images/deleteLocalizedImage"
	Images_ListImagesForUserDeprecated_FullMethodName  = "/io.Images/listImagesForUserDeprecated"
	Images_ListImagesForUser_FullMethodName            = "/io.Images/listImagesForUser"
	Images_ListImagesDeprecated_FullMethodName         = "/io.Images/listImagesDeprecated"
	Images_ListImages_FullMethodName                   = "/io.Images/listImages"
	Images_CountImagesDeprecated_FullMethodName        = "/io.Images/countImagesDeprecated"
	Images_CountImages_FullMethodName                  = "/io.Images/countImages"
	Images_CountImagesForUserDeprecated_FullMethodName = "/io.Images/countImagesForUserDeprecated"
	Images_CountImagesForUser_FullMethodName           = "/io.Images/countImagesForUser"
)

// ImagesClient is the client API for Images service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImagesClient interface {
	SetProfileImage(ctx context.Context, in *ProfileImageInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProfileImage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Url, error)
	CreateImages(ctx context.Context, in *CreateImageInput, opts ...grpc.CallOption) (*ImageIds, error)
	UpdateImage(ctx context.Context, in *UpdateImageInput, opts ...grpc.CallOption) (*ImageRecord, error)
	GetImageURL(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error)
	GetStampImageURL(ctx context.Context, in *StampImageRequest, opts ...grpc.CallOption) (*Url, error)
	GetStampImageConfig(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StampImageConfig, error)
	UpdateStampImageConfig(ctx context.Context, in *StampImageConfig, opts ...grpc.CallOption) (*Id, error)
	GetStampImagePreview(ctx context.Context, in *StampImagePreviewRequest, opts ...grpc.CallOption) (*StampImagePreview, error)
	GetLocalizedImageURL(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*Url, error)
	GetProfileImageById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error)
	// returns a zip bundle containing all images for that ID
	GetImageBundle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageBundle, error)
	GetImageData(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageRecord, error)
	DeleteImage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteLocalizedImage(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*ImageRecord, error)
	ListImagesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageRecord], error)
	ListImagesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageRecord], error)
	ListImagesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageRecord], error)
	ListImages(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageRecord], error)
	CountImagesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountImages(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
	CountImagesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountImagesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
}

type imagesClient struct {
	cc grpc.ClientConnInterface
}

func NewImagesClient(cc grpc.ClientConnInterface) ImagesClient {
	return &imagesClient{cc}
}

func (c *imagesClient) SetProfileImage(ctx context.Context, in *ProfileImageInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Images_SetProfileImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetProfileImage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Url, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Url)
	err := c.cc.Invoke(ctx, Images_GetProfileImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CreateImages(ctx context.Context, in *CreateImageInput, opts ...grpc.CallOption) (*ImageIds, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageIds)
	err := c.cc.Invoke(ctx, Images_CreateImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) UpdateImage(ctx context.Context, in *UpdateImageInput, opts ...grpc.CallOption) (*ImageRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageRecord)
	err := c.cc.Invoke(ctx, Images_UpdateImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetImageURL(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Url)
	err := c.cc.Invoke(ctx, Images_GetImageURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetStampImageURL(ctx context.Context, in *StampImageRequest, opts ...grpc.CallOption) (*Url, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Url)
	err := c.cc.Invoke(ctx, Images_GetStampImageURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetStampImageConfig(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StampImageConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StampImageConfig)
	err := c.cc.Invoke(ctx, Images_GetStampImageConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) UpdateStampImageConfig(ctx context.Context, in *StampImageConfig, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, Images_UpdateStampImageConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetStampImagePreview(ctx context.Context, in *StampImagePreviewRequest, opts ...grpc.CallOption) (*StampImagePreview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StampImagePreview)
	err := c.cc.Invoke(ctx, Images_GetStampImagePreview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetLocalizedImageURL(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*Url, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Url)
	err := c.cc.Invoke(ctx, Images_GetLocalizedImageURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetProfileImageById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Url, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Url)
	err := c.cc.Invoke(ctx, Images_GetProfileImageById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetImageBundle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageBundle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageBundle)
	err := c.cc.Invoke(ctx, Images_GetImageBundle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetImageData(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ImageRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageRecord)
	err := c.cc.Invoke(ctx, Images_GetImageData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) DeleteImage(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Images_DeleteImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) DeleteLocalizedImage(ctx context.Context, in *LocalizedImageInput, opts ...grpc.CallOption) (*ImageRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageRecord)
	err := c.cc.Invoke(ctx, Images_DeleteLocalizedImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) ListImagesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageRecord], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Images_ServiceDesc.Streams[0], Images_ListImagesForUserDeprecated_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Pagination, ImageRecord]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Images_ListImagesForUserDeprecatedClient = grpc.ServerStreamingClient[ImageRecord]

func (c *imagesClient) ListImagesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageRecord], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Images_ServiceDesc.Streams[1], Images_ListImagesForUser_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Filters, ImageRecord]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Images_ListImagesForUserClient = grpc.ServerStreamingClient[ImageRecord]

func (c *imagesClient) ListImagesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageRecord], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Images_ServiceDesc.Streams[2], Images_ListImagesDeprecated_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Pagination, ImageRecord]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Images_ListImagesDeprecatedClient = grpc.ServerStreamingClient[ImageRecord]

func (c *imagesClient) ListImages(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImageRecord], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Images_ServiceDesc.Streams[3], Images_ListImages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Filters, ImageRecord]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Images_ListImagesClient = grpc.ServerStreamingClient[ImageRecord]

func (c *imagesClient) CountImagesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Images_CountImagesDeprecated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CountImages(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Images_CountImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CountImagesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Images_CountImagesForUserDeprecated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CountImagesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Images_CountImagesForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImagesServer is the server API for Images service.
// All implementations should embed UnimplementedImagesServer
// for forward compatibility.
type ImagesServer interface {
	SetProfileImage(context.Context, *ProfileImageInput) (*emptypb.Empty, error)
	GetProfileImage(context.Context, *emptypb.Empty) (*Url, error)
	CreateImages(context.Context, *CreateImageInput) (*ImageIds, error)
	UpdateImage(context.Context, *UpdateImageInput) (*ImageRecord, error)
	GetImageURL(context.Context, *Id) (*Url, error)
	GetStampImageURL(context.Context, *StampImageRequest) (*Url, error)
	GetStampImageConfig(context.Context, *Id) (*StampImageConfig, error)
	UpdateStampImageConfig(context.Context, *StampImageConfig) (*Id, error)
	GetStampImagePreview(context.Context, *StampImagePreviewRequest) (*StampImagePreview, error)
	GetLocalizedImageURL(context.Context, *LocalizedImageInput) (*Url, error)
	GetProfileImageById(context.Context, *Id) (*Url, error)
	// returns a zip bundle containing all images for that ID
	GetImageBundle(context.Context, *Id) (*ImageBundle, error)
	GetImageData(context.Context, *Id) (*ImageRecord, error)
	DeleteImage(context.Context, *Id) (*emptypb.Empty, error)
	DeleteLocalizedImage(context.Context, *LocalizedImageInput) (*ImageRecord, error)
	ListImagesForUserDeprecated(*Pagination, grpc.ServerStreamingServer[ImageRecord]) error
	ListImagesForUser(*Filters, grpc.ServerStreamingServer[ImageRecord]) error
	ListImagesDeprecated(*Pagination, grpc.ServerStreamingServer[ImageRecord]) error
	ListImages(*Filters, grpc.ServerStreamingServer[ImageRecord]) error
	CountImagesDeprecated(context.Context, *Pagination) (*Count, error)
	CountImages(context.Context, *Filters) (*Count, error)
	CountImagesForUserDeprecated(context.Context, *Pagination) (*Count, error)
	CountImagesForUser(context.Context, *Filters) (*Count, error)
}

// UnimplementedImagesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImagesServer struct{}

func (UnimplementedImagesServer) SetProfileImage(context.Context, *ProfileImageInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfileImage not implemented")
}
func (UnimplementedImagesServer) GetProfileImage(context.Context, *emptypb.Empty) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileImage not implemented")
}
func (UnimplementedImagesServer) CreateImages(context.Context, *CreateImageInput) (*ImageIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImages not implemented")
}
func (UnimplementedImagesServer) UpdateImage(context.Context, *UpdateImageInput) (*ImageRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (UnimplementedImagesServer) GetImageURL(context.Context, *Id) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageURL not implemented")
}
func (UnimplementedImagesServer) GetStampImageURL(context.Context, *StampImageRequest) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStampImageURL not implemented")
}
func (UnimplementedImagesServer) GetStampImageConfig(context.Context, *Id) (*StampImageConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStampImageConfig not implemented")
}
func (UnimplementedImagesServer) UpdateStampImageConfig(context.Context, *StampImageConfig) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStampImageConfig not implemented")
}
func (UnimplementedImagesServer) GetStampImagePreview(context.Context, *StampImagePreviewRequest) (*StampImagePreview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStampImagePreview not implemented")
}
func (UnimplementedImagesServer) GetLocalizedImageURL(context.Context, *LocalizedImageInput) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalizedImageURL not implemented")
}
func (UnimplementedImagesServer) GetProfileImageById(context.Context, *Id) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileImageById not implemented")
}
func (UnimplementedImagesServer) GetImageBundle(context.Context, *Id) (*ImageBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageBundle not implemented")
}
func (UnimplementedImagesServer) GetImageData(context.Context, *Id) (*ImageRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageData not implemented")
}
func (UnimplementedImagesServer) DeleteImage(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedImagesServer) DeleteLocalizedImage(context.Context, *LocalizedImageInput) (*ImageRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocalizedImage not implemented")
}
func (UnimplementedImagesServer) ListImagesForUserDeprecated(*Pagination, grpc.ServerStreamingServer[ImageRecord]) error {
	return status.Errorf(codes.Unimplemented, "method ListImagesForUserDeprecated not implemented")
}
func (UnimplementedImagesServer) ListImagesForUser(*Filters, grpc.ServerStreamingServer[ImageRecord]) error {
	return status.Errorf(codes.Unimplemented, "method ListImagesForUser not implemented")
}
func (UnimplementedImagesServer) ListImagesDeprecated(*Pagination, grpc.ServerStreamingServer[ImageRecord]) error {
	return status.Errorf(codes.Unimplemented, "method ListImagesDeprecated not implemented")
}
func (UnimplementedImagesServer) ListImages(*Filters, grpc.ServerStreamingServer[ImageRecord]) error {
	return status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (UnimplementedImagesServer) CountImagesDeprecated(context.Context, *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountImagesDeprecated not implemented")
}
func (UnimplementedImagesServer) CountImages(context.Context, *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountImages not implemented")
}
func (UnimplementedImagesServer) CountImagesForUserDeprecated(context.Context, *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountImagesForUserDeprecated not implemented")
}
func (UnimplementedImagesServer) CountImagesForUser(context.Context, *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountImagesForUser not implemented")
}
func (UnimplementedImagesServer) testEmbeddedByValue() {}

// UnsafeImagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImagesServer will
// result in compilation errors.
type UnsafeImagesServer interface {
	mustEmbedUnimplementedImagesServer()
}

func RegisterImagesServer(s grpc.ServiceRegistrar, srv ImagesServer) {
	// If the following call pancis, it indicates UnimplementedImagesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Images_ServiceDesc, srv)
}

func _Images_SetProfileImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).SetProfileImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_SetProfileImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).SetProfileImage(ctx, req.(*ProfileImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetProfileImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetProfileImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_GetProfileImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetProfileImage(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CreateImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CreateImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_CreateImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CreateImages(ctx, req.(*CreateImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_UpdateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).UpdateImage(ctx, req.(*UpdateImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_GetImageURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetImageURL(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetStampImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StampImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetStampImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_GetStampImageURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetStampImageURL(ctx, req.(*StampImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetStampImageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetStampImageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_GetStampImageConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetStampImageConfig(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_UpdateStampImageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StampImageConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).UpdateStampImageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_UpdateStampImageConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).UpdateStampImageConfig(ctx, req.(*StampImageConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetStampImagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StampImagePreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetStampImagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_GetStampImagePreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetStampImagePreview(ctx, req.(*StampImagePreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetLocalizedImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalizedImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetLocalizedImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_GetLocalizedImageURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetLocalizedImageURL(ctx, req.(*LocalizedImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetProfileImageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetProfileImageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_GetProfileImageById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetProfileImageById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetImageBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetImageBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_GetImageBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetImageBundle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetImageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetImageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_GetImageData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetImageData(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_DeleteImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).DeleteImage(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_DeleteLocalizedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalizedImageInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).DeleteLocalizedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_DeleteLocalizedImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).DeleteLocalizedImage(ctx, req.(*LocalizedImageInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_ListImagesForUserDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).ListImagesForUserDeprecated(m, &grpc.GenericServerStream[Pagination, ImageRecord]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Images_ListImagesForUserDeprecatedServer = grpc.ServerStreamingServer[ImageRecord]

func _Images_ListImagesForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).ListImagesForUser(m, &grpc.GenericServerStream[Filters, ImageRecord]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Images_ListImagesForUserServer = grpc.ServerStreamingServer[ImageRecord]

func _Images_ListImagesDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).ListImagesDeprecated(m, &grpc.GenericServerStream[Pagination, ImageRecord]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Images_ListImagesDeprecatedServer = grpc.ServerStreamingServer[ImageRecord]

func _Images_ListImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImagesServer).ListImages(m, &grpc.GenericServerStream[Filters, ImageRecord]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Images_ListImagesServer = grpc.ServerStreamingServer[ImageRecord]

func _Images_CountImagesDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CountImagesDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_CountImagesDeprecated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CountImagesDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CountImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CountImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_CountImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CountImages(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CountImagesForUserDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CountImagesForUserDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_CountImagesForUserDeprecated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CountImagesForUserDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CountImagesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CountImagesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Images_CountImagesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CountImagesForUser(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

// Images_ServiceDesc is the grpc.ServiceDesc for Images service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Images_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.Images",
	HandlerType: (*ImagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setProfileImage",
			Handler:    _Images_SetProfileImage_Handler,
		},
		{
			MethodName: "getProfileImage",
			Handler:    _Images_GetProfileImage_Handler,
		},
		{
			MethodName: "createImages",
			Handler:    _Images_CreateImages_Handler,
		},
		{
			MethodName: "updateImage",
			Handler:    _Images_UpdateImage_Handler,
		},
		{
			MethodName: "getImageURL",
			Handler:    _Images_GetImageURL_Handler,
		},
		{
			MethodName: "getStampImageURL",
			Handler:    _Images_GetStampImageURL_Handler,
		},
		{
			MethodName: "getStampImageConfig",
			Handler:    _Images_GetStampImageConfig_Handler,
		},
		{
			MethodName: "updateStampImageConfig",
			Handler:    _Images_UpdateStampImageConfig_Handler,
		},
		{
			MethodName: "getStampImagePreview",
			Handler:    _Images_GetStampImagePreview_Handler,
		},
		{
			MethodName: "getLocalizedImageURL",
			Handler:    _Images_GetLocalizedImageURL_Handler,
		},
		{
			MethodName: "getProfileImageById",
			Handler:    _Images_GetProfileImageById_Handler,
		},
		{
			MethodName: "getImageBundle",
			Handler:    _Images_GetImageBundle_Handler,
		},
		{
			MethodName: "getImageData",
			Handler:    _Images_GetImageData_Handler,
		},
		{
			MethodName: "deleteImage",
			Handler:    _Images_DeleteImage_Handler,
		},
		{
			MethodName: "deleteLocalizedImage",
			Handler:    _Images_DeleteLocalizedImage_Handler,
		},
		{
			MethodName: "countImagesDeprecated",
			Handler:    _Images_CountImagesDeprecated_Handler,
		},
		{
			MethodName: "countImages",
			Handler:    _Images_CountImages_Handler,
		},
		{
			MethodName: "countImagesForUserDeprecated",
			Handler:    _Images_CountImagesForUserDeprecated_Handler,
		},
		{
			MethodName: "countImagesForUser",
			Handler:    _Images_CountImagesForUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listImagesForUserDeprecated",
			Handler:       _Images_ListImagesForUserDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listImagesForUser",
			Handler:       _Images_ListImagesForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listImagesDeprecated",
			Handler:       _Images_ListImagesDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listImages",
			Handler:       _Images_ListImages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc_images.proto",
}
