// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: io/core/a_rpc_templates.proto

package io

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Templates_CreateTemplate_FullMethodName                  = "/io.Templates/createTemplate"
	Templates_UpdateTemplate_FullMethodName                  = "/io.Templates/updateTemplate"
	Templates_GetTemplate_FullMethodName                     = "/io.Templates/getTemplate"
	Templates_GetDefaultTemplate_FullMethodName              = "/io.Templates/getDefaultTemplate"
	Templates_CopyTemplate_FullMethodName                    = "/io.Templates/copyTemplate"
	Templates_DeleteTemplate_FullMethodName                  = "/io.Templates/deleteTemplate"
	Templates_ListTemplatesForUserDeprecated_FullMethodName  = "/io.Templates/listTemplatesForUserDeprecated"
	Templates_ListTemplatesForUser_FullMethodName            = "/io.Templates/listTemplatesForUser"
	Templates_ListTemplatesDeprecated_FullMethodName         = "/io.Templates/listTemplatesDeprecated"
	Templates_ListTemplates_FullMethodName                   = "/io.Templates/listTemplates"
	Templates_CountTemplatesDeprecated_FullMethodName        = "/io.Templates/countTemplatesDeprecated"
	Templates_CountTemplates_FullMethodName                  = "/io.Templates/countTemplates"
	Templates_CountTemplatesForUserDeprecated_FullMethodName = "/io.Templates/countTemplatesForUserDeprecated"
	Templates_CountTemplatesForUser_FullMethodName           = "/io.Templates/countTemplatesForUser"
	Templates_CreateLocation_FullMethodName                  = "/io.Templates/createLocation"
	Templates_UpdateLocation_FullMethodName                  = "/io.Templates/updateLocation"
	Templates_GetLocation_FullMethodName                     = "/io.Templates/getLocation"
	Templates_ListLocationsDeprecated_FullMethodName         = "/io.Templates/listLocationsDeprecated"
	Templates_ListLocations_FullMethodName                   = "/io.Templates/listLocations"
	Templates_CopyLocation_FullMethodName                    = "/io.Templates/copyLocation"
	Templates_DeleteLocation_FullMethodName                  = "/io.Templates/deleteLocation"
	Templates_CountLocationsDeprecated_FullMethodName        = "/io.Templates/countLocationsDeprecated"
	Templates_CountLocations_FullMethodName                  = "/io.Templates/countLocations"
	Templates_CreateBeacon_FullMethodName                    = "/io.Templates/createBeacon"
	Templates_UpdateBeacon_FullMethodName                    = "/io.Templates/updateBeacon"
	Templates_GetBeacon_FullMethodName                       = "/io.Templates/getBeacon"
	Templates_ListBeaconsDeprecated_FullMethodName           = "/io.Templates/listBeaconsDeprecated"
	Templates_ListBeacons_FullMethodName                     = "/io.Templates/listBeacons"
	Templates_CopyBeacon_FullMethodName                      = "/io.Templates/copyBeacon"
	Templates_DeleteBeacon_FullMethodName                    = "/io.Templates/deleteBeacon"
	Templates_CountBeaconsDeprecated_FullMethodName          = "/io.Templates/countBeaconsDeprecated"
	Templates_CountBeacons_FullMethodName                    = "/io.Templates/countBeacons"
	Templates_CreateLink_FullMethodName                      = "/io.Templates/createLink"
	Templates_UpdateLink_FullMethodName                      = "/io.Templates/updateLink"
	Templates_GetLink_FullMethodName                         = "/io.Templates/getLink"
	Templates_ListLinksDeprecated_FullMethodName             = "/io.Templates/listLinksDeprecated"
	Templates_ListLinks_FullMethodName                       = "/io.Templates/listLinks"
	Templates_CopyLink_FullMethodName                        = "/io.Templates/copyLink"
	Templates_DeleteLink_FullMethodName                      = "/io.Templates/deleteLink"
	Templates_CountLinksDeprecated_FullMethodName            = "/io.Templates/countLinksDeprecated"
	Templates_CountLinks_FullMethodName                      = "/io.Templates/countLinks"
)

// TemplatesClient is the client API for Templates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplatesClient interface {
	CreateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*Id, error)
	UpdateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*PassTemplate, error)
	GetTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PassTemplateResponse, error)
	GetDefaultTemplate(ctx context.Context, in *DefaultTemplateRequest, opts ...grpc.CallOption) (*PassTemplate, error)
	CopyTemplate(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error)
	DeleteTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTemplatesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PassTemplateResponse], error)
	ListTemplatesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PassTemplateResponse], error)
	ListTemplatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PassTemplateResponse], error)
	ListTemplates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PassTemplateResponse], error)
	CountTemplatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountTemplates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
	CountTemplatesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountTemplatesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
	CreateLocation(ctx context.Context, in *GPSLocation, opts ...grpc.CallOption) (*Id, error)
	UpdateLocation(ctx context.Context, in *GPSLocation, opts ...grpc.CallOption) (*GPSLocation, error)
	GetLocation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GPSLocation, error)
	ListLocationsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GPSLocation], error)
	ListLocations(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GPSLocation], error)
	CopyLocation(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error)
	DeleteLocation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CountLocationsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountLocations(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
	CreateBeacon(ctx context.Context, in *Beacon, opts ...grpc.CallOption) (*Id, error)
	UpdateBeacon(ctx context.Context, in *Beacon, opts ...grpc.CallOption) (*Beacon, error)
	GetBeacon(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Beacon, error)
	ListBeaconsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Beacon], error)
	ListBeacons(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Beacon], error)
	CopyBeacon(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error)
	DeleteBeacon(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CountBeaconsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountBeacons(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
	CreateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Id, error)
	UpdateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error)
	GetLink(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Link, error)
	ListLinksDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Link], error)
	ListLinks(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Link], error)
	CopyLink(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error)
	DeleteLink(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CountLinksDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error)
	CountLinks(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error)
}

type templatesClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplatesClient(cc grpc.ClientConnInterface) TemplatesClient {
	return &templatesClient{cc}
}

func (c *templatesClient) CreateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, Templates_CreateTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpdateTemplate(ctx context.Context, in *PassTemplate, opts ...grpc.CallOption) (*PassTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PassTemplate)
	err := c.cc.Invoke(ctx, Templates_UpdateTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*PassTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PassTemplateResponse)
	err := c.cc.Invoke(ctx, Templates_GetTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetDefaultTemplate(ctx context.Context, in *DefaultTemplateRequest, opts ...grpc.CallOption) (*PassTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PassTemplate)
	err := c.cc.Invoke(ctx, Templates_GetDefaultTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CopyTemplate(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, Templates_CopyTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) DeleteTemplate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Templates_DeleteTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) ListTemplatesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PassTemplateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Templates_ServiceDesc.Streams[0], Templates_ListTemplatesForUserDeprecated_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Pagination, PassTemplateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListTemplatesForUserDeprecatedClient = grpc.ServerStreamingClient[PassTemplateResponse]

func (c *templatesClient) ListTemplatesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PassTemplateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Templates_ServiceDesc.Streams[1], Templates_ListTemplatesForUser_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Filters, PassTemplateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListTemplatesForUserClient = grpc.ServerStreamingClient[PassTemplateResponse]

func (c *templatesClient) ListTemplatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PassTemplateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Templates_ServiceDesc.Streams[2], Templates_ListTemplatesDeprecated_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Pagination, PassTemplateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListTemplatesDeprecatedClient = grpc.ServerStreamingClient[PassTemplateResponse]

func (c *templatesClient) ListTemplates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PassTemplateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Templates_ServiceDesc.Streams[3], Templates_ListTemplates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Filters, PassTemplateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListTemplatesClient = grpc.ServerStreamingClient[PassTemplateResponse]

func (c *templatesClient) CountTemplatesDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Templates_CountTemplatesDeprecated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountTemplates(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Templates_CountTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountTemplatesForUserDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Templates_CountTemplatesForUserDeprecated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountTemplatesForUser(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Templates_CountTemplatesForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CreateLocation(ctx context.Context, in *GPSLocation, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, Templates_CreateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpdateLocation(ctx context.Context, in *GPSLocation, opts ...grpc.CallOption) (*GPSLocation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GPSLocation)
	err := c.cc.Invoke(ctx, Templates_UpdateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetLocation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*GPSLocation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GPSLocation)
	err := c.cc.Invoke(ctx, Templates_GetLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) ListLocationsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GPSLocation], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Templates_ServiceDesc.Streams[4], Templates_ListLocationsDeprecated_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Pagination, GPSLocation]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListLocationsDeprecatedClient = grpc.ServerStreamingClient[GPSLocation]

func (c *templatesClient) ListLocations(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GPSLocation], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Templates_ServiceDesc.Streams[5], Templates_ListLocations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Filters, GPSLocation]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListLocationsClient = grpc.ServerStreamingClient[GPSLocation]

func (c *templatesClient) CopyLocation(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, Templates_CopyLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) DeleteLocation(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Templates_DeleteLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountLocationsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Templates_CountLocationsDeprecated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountLocations(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Templates_CountLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CreateBeacon(ctx context.Context, in *Beacon, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, Templates_CreateBeacon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpdateBeacon(ctx context.Context, in *Beacon, opts ...grpc.CallOption) (*Beacon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Beacon)
	err := c.cc.Invoke(ctx, Templates_UpdateBeacon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetBeacon(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Beacon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Beacon)
	err := c.cc.Invoke(ctx, Templates_GetBeacon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) ListBeaconsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Beacon], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Templates_ServiceDesc.Streams[6], Templates_ListBeaconsDeprecated_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Pagination, Beacon]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListBeaconsDeprecatedClient = grpc.ServerStreamingClient[Beacon]

func (c *templatesClient) ListBeacons(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Beacon], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Templates_ServiceDesc.Streams[7], Templates_ListBeacons_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Filters, Beacon]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListBeaconsClient = grpc.ServerStreamingClient[Beacon]

func (c *templatesClient) CopyBeacon(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, Templates_CopyBeacon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) DeleteBeacon(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Templates_DeleteBeacon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountBeaconsDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Templates_CountBeaconsDeprecated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountBeacons(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Templates_CountBeacons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CreateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, Templates_CreateLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpdateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Link)
	err := c.cc.Invoke(ctx, Templates_UpdateLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetLink(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Link, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Link)
	err := c.cc.Invoke(ctx, Templates_GetLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) ListLinksDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Link], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Templates_ServiceDesc.Streams[8], Templates_ListLinksDeprecated_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Pagination, Link]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListLinksDeprecatedClient = grpc.ServerStreamingClient[Link]

func (c *templatesClient) ListLinks(ctx context.Context, in *Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Link], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Templates_ServiceDesc.Streams[9], Templates_ListLinks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Filters, Link]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListLinksClient = grpc.ServerStreamingClient[Link]

func (c *templatesClient) CopyLink(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, Templates_CopyLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) DeleteLink(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Templates_DeleteLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountLinksDeprecated(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Templates_CountLinksDeprecated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CountLinks(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, Templates_CountLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplatesServer is the server API for Templates service.
// All implementations should embed UnimplementedTemplatesServer
// for forward compatibility.
type TemplatesServer interface {
	CreateTemplate(context.Context, *PassTemplate) (*Id, error)
	UpdateTemplate(context.Context, *PassTemplate) (*PassTemplate, error)
	GetTemplate(context.Context, *Id) (*PassTemplateResponse, error)
	GetDefaultTemplate(context.Context, *DefaultTemplateRequest) (*PassTemplate, error)
	CopyTemplate(context.Context, *CopyObjectInput) (*Id, error)
	DeleteTemplate(context.Context, *Id) (*emptypb.Empty, error)
	ListTemplatesForUserDeprecated(*Pagination, grpc.ServerStreamingServer[PassTemplateResponse]) error
	ListTemplatesForUser(*Filters, grpc.ServerStreamingServer[PassTemplateResponse]) error
	ListTemplatesDeprecated(*Pagination, grpc.ServerStreamingServer[PassTemplateResponse]) error
	ListTemplates(*Filters, grpc.ServerStreamingServer[PassTemplateResponse]) error
	CountTemplatesDeprecated(context.Context, *Pagination) (*Count, error)
	CountTemplates(context.Context, *Filters) (*Count, error)
	CountTemplatesForUserDeprecated(context.Context, *Pagination) (*Count, error)
	CountTemplatesForUser(context.Context, *Filters) (*Count, error)
	CreateLocation(context.Context, *GPSLocation) (*Id, error)
	UpdateLocation(context.Context, *GPSLocation) (*GPSLocation, error)
	GetLocation(context.Context, *Id) (*GPSLocation, error)
	ListLocationsDeprecated(*Pagination, grpc.ServerStreamingServer[GPSLocation]) error
	ListLocations(*Filters, grpc.ServerStreamingServer[GPSLocation]) error
	CopyLocation(context.Context, *CopyObjectInput) (*Id, error)
	DeleteLocation(context.Context, *Id) (*emptypb.Empty, error)
	CountLocationsDeprecated(context.Context, *Pagination) (*Count, error)
	CountLocations(context.Context, *Filters) (*Count, error)
	CreateBeacon(context.Context, *Beacon) (*Id, error)
	UpdateBeacon(context.Context, *Beacon) (*Beacon, error)
	GetBeacon(context.Context, *Id) (*Beacon, error)
	ListBeaconsDeprecated(*Pagination, grpc.ServerStreamingServer[Beacon]) error
	ListBeacons(*Filters, grpc.ServerStreamingServer[Beacon]) error
	CopyBeacon(context.Context, *CopyObjectInput) (*Id, error)
	DeleteBeacon(context.Context, *Id) (*emptypb.Empty, error)
	CountBeaconsDeprecated(context.Context, *Pagination) (*Count, error)
	CountBeacons(context.Context, *Filters) (*Count, error)
	CreateLink(context.Context, *Link) (*Id, error)
	UpdateLink(context.Context, *Link) (*Link, error)
	GetLink(context.Context, *Id) (*Link, error)
	ListLinksDeprecated(*Pagination, grpc.ServerStreamingServer[Link]) error
	ListLinks(*Filters, grpc.ServerStreamingServer[Link]) error
	CopyLink(context.Context, *CopyObjectInput) (*Id, error)
	DeleteLink(context.Context, *Id) (*emptypb.Empty, error)
	CountLinksDeprecated(context.Context, *Pagination) (*Count, error)
	CountLinks(context.Context, *Filters) (*Count, error)
}

// UnimplementedTemplatesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTemplatesServer struct{}

func (UnimplementedTemplatesServer) CreateTemplate(context.Context, *PassTemplate) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedTemplatesServer) UpdateTemplate(context.Context, *PassTemplate) (*PassTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedTemplatesServer) GetTemplate(context.Context, *Id) (*PassTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedTemplatesServer) GetDefaultTemplate(context.Context, *DefaultTemplateRequest) (*PassTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultTemplate not implemented")
}
func (UnimplementedTemplatesServer) CopyTemplate(context.Context, *CopyObjectInput) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyTemplate not implemented")
}
func (UnimplementedTemplatesServer) DeleteTemplate(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedTemplatesServer) ListTemplatesForUserDeprecated(*Pagination, grpc.ServerStreamingServer[PassTemplateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplatesForUserDeprecated not implemented")
}
func (UnimplementedTemplatesServer) ListTemplatesForUser(*Filters, grpc.ServerStreamingServer[PassTemplateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplatesForUser not implemented")
}
func (UnimplementedTemplatesServer) ListTemplatesDeprecated(*Pagination, grpc.ServerStreamingServer[PassTemplateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplatesDeprecated not implemented")
}
func (UnimplementedTemplatesServer) ListTemplates(*Filters, grpc.ServerStreamingServer[PassTemplateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedTemplatesServer) CountTemplatesDeprecated(context.Context, *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTemplatesDeprecated not implemented")
}
func (UnimplementedTemplatesServer) CountTemplates(context.Context, *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTemplates not implemented")
}
func (UnimplementedTemplatesServer) CountTemplatesForUserDeprecated(context.Context, *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTemplatesForUserDeprecated not implemented")
}
func (UnimplementedTemplatesServer) CountTemplatesForUser(context.Context, *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTemplatesForUser not implemented")
}
func (UnimplementedTemplatesServer) CreateLocation(context.Context, *GPSLocation) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (UnimplementedTemplatesServer) UpdateLocation(context.Context, *GPSLocation) (*GPSLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedTemplatesServer) GetLocation(context.Context, *Id) (*GPSLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedTemplatesServer) ListLocationsDeprecated(*Pagination, grpc.ServerStreamingServer[GPSLocation]) error {
	return status.Errorf(codes.Unimplemented, "method ListLocationsDeprecated not implemented")
}
func (UnimplementedTemplatesServer) ListLocations(*Filters, grpc.ServerStreamingServer[GPSLocation]) error {
	return status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (UnimplementedTemplatesServer) CopyLocation(context.Context, *CopyObjectInput) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyLocation not implemented")
}
func (UnimplementedTemplatesServer) DeleteLocation(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocation not implemented")
}
func (UnimplementedTemplatesServer) CountLocationsDeprecated(context.Context, *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLocationsDeprecated not implemented")
}
func (UnimplementedTemplatesServer) CountLocations(context.Context, *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLocations not implemented")
}
func (UnimplementedTemplatesServer) CreateBeacon(context.Context, *Beacon) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeacon not implemented")
}
func (UnimplementedTemplatesServer) UpdateBeacon(context.Context, *Beacon) (*Beacon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeacon not implemented")
}
func (UnimplementedTemplatesServer) GetBeacon(context.Context, *Id) (*Beacon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeacon not implemented")
}
func (UnimplementedTemplatesServer) ListBeaconsDeprecated(*Pagination, grpc.ServerStreamingServer[Beacon]) error {
	return status.Errorf(codes.Unimplemented, "method ListBeaconsDeprecated not implemented")
}
func (UnimplementedTemplatesServer) ListBeacons(*Filters, grpc.ServerStreamingServer[Beacon]) error {
	return status.Errorf(codes.Unimplemented, "method ListBeacons not implemented")
}
func (UnimplementedTemplatesServer) CopyBeacon(context.Context, *CopyObjectInput) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyBeacon not implemented")
}
func (UnimplementedTemplatesServer) DeleteBeacon(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeacon not implemented")
}
func (UnimplementedTemplatesServer) CountBeaconsDeprecated(context.Context, *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeaconsDeprecated not implemented")
}
func (UnimplementedTemplatesServer) CountBeacons(context.Context, *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeacons not implemented")
}
func (UnimplementedTemplatesServer) CreateLink(context.Context, *Link) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedTemplatesServer) UpdateLink(context.Context, *Link) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLink not implemented")
}
func (UnimplementedTemplatesServer) GetLink(context.Context, *Id) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedTemplatesServer) ListLinksDeprecated(*Pagination, grpc.ServerStreamingServer[Link]) error {
	return status.Errorf(codes.Unimplemented, "method ListLinksDeprecated not implemented")
}
func (UnimplementedTemplatesServer) ListLinks(*Filters, grpc.ServerStreamingServer[Link]) error {
	return status.Errorf(codes.Unimplemented, "method ListLinks not implemented")
}
func (UnimplementedTemplatesServer) CopyLink(context.Context, *CopyObjectInput) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyLink not implemented")
}
func (UnimplementedTemplatesServer) DeleteLink(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
}
func (UnimplementedTemplatesServer) CountLinksDeprecated(context.Context, *Pagination) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLinksDeprecated not implemented")
}
func (UnimplementedTemplatesServer) CountLinks(context.Context, *Filters) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLinks not implemented")
}
func (UnimplementedTemplatesServer) testEmbeddedByValue() {}

// UnsafeTemplatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplatesServer will
// result in compilation errors.
type UnsafeTemplatesServer interface {
	mustEmbedUnimplementedTemplatesServer()
}

func RegisterTemplatesServer(s grpc.ServiceRegistrar, srv TemplatesServer) {
	// If the following call pancis, it indicates UnimplementedTemplatesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Templates_ServiceDesc, srv)
}

func _Templates_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CreateTemplate(ctx, req.(*PassTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_UpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpdateTemplate(ctx, req.(*PassTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_GetTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetDefaultTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetDefaultTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_GetDefaultTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetDefaultTemplate(ctx, req.(*DefaultTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CopyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CopyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CopyTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CopyTemplate(ctx, req.(*CopyObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).DeleteTemplate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_ListTemplatesForUserDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListTemplatesForUserDeprecated(m, &grpc.GenericServerStream[Pagination, PassTemplateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListTemplatesForUserDeprecatedServer = grpc.ServerStreamingServer[PassTemplateResponse]

func _Templates_ListTemplatesForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListTemplatesForUser(m, &grpc.GenericServerStream[Filters, PassTemplateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListTemplatesForUserServer = grpc.ServerStreamingServer[PassTemplateResponse]

func _Templates_ListTemplatesDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListTemplatesDeprecated(m, &grpc.GenericServerStream[Pagination, PassTemplateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListTemplatesDeprecatedServer = grpc.ServerStreamingServer[PassTemplateResponse]

func _Templates_ListTemplates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListTemplates(m, &grpc.GenericServerStream[Filters, PassTemplateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListTemplatesServer = grpc.ServerStreamingServer[PassTemplateResponse]

func _Templates_CountTemplatesDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountTemplatesDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CountTemplatesDeprecated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountTemplatesDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CountTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountTemplates(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountTemplatesForUserDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountTemplatesForUserDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CountTemplatesForUserDeprecated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountTemplatesForUserDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountTemplatesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountTemplatesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CountTemplatesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountTemplatesForUser(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPSLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CreateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CreateLocation(ctx, req.(*GPSLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPSLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_UpdateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpdateLocation(ctx, req.(*GPSLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetLocation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_ListLocationsDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListLocationsDeprecated(m, &grpc.GenericServerStream[Pagination, GPSLocation]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListLocationsDeprecatedServer = grpc.ServerStreamingServer[GPSLocation]

func _Templates_ListLocations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListLocations(m, &grpc.GenericServerStream[Filters, GPSLocation]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListLocationsServer = grpc.ServerStreamingServer[GPSLocation]

func _Templates_CopyLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CopyLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CopyLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CopyLocation(ctx, req.(*CopyObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_DeleteLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).DeleteLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_DeleteLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).DeleteLocation(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountLocationsDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountLocationsDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CountLocationsDeprecated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountLocationsDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CountLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountLocations(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CreateBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CreateBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CreateBeacon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CreateBeacon(ctx, req.(*Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpdateBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpdateBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_UpdateBeacon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpdateBeacon(ctx, req.(*Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_GetBeacon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetBeacon(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_ListBeaconsDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListBeaconsDeprecated(m, &grpc.GenericServerStream[Pagination, Beacon]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListBeaconsDeprecatedServer = grpc.ServerStreamingServer[Beacon]

func _Templates_ListBeacons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListBeacons(m, &grpc.GenericServerStream[Filters, Beacon]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListBeaconsServer = grpc.ServerStreamingServer[Beacon]

func _Templates_CopyBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CopyBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CopyBeacon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CopyBeacon(ctx, req.(*CopyObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_DeleteBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).DeleteBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_DeleteBeacon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).DeleteBeacon(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountBeaconsDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountBeaconsDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CountBeaconsDeprecated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountBeaconsDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountBeacons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountBeacons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CountBeacons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountBeacons(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CreateLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CreateLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpdateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpdateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_UpdateLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpdateLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_GetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetLink(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_ListLinksDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListLinksDeprecated(m, &grpc.GenericServerStream[Pagination, Link]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListLinksDeprecatedServer = grpc.ServerStreamingServer[Link]

func _Templates_ListLinks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemplatesServer).ListLinks(m, &grpc.GenericServerStream[Filters, Link]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Templates_ListLinksServer = grpc.ServerStreamingServer[Link]

func _Templates_CopyLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CopyLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CopyLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CopyLink(ctx, req.(*CopyObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_DeleteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).DeleteLink(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountLinksDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountLinksDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CountLinksDeprecated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountLinksDeprecated(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CountLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CountLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CountLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CountLinks(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

// Templates_ServiceDesc is the grpc.ServiceDesc for Templates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Templates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.Templates",
	HandlerType: (*TemplatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createTemplate",
			Handler:    _Templates_CreateTemplate_Handler,
		},
		{
			MethodName: "updateTemplate",
			Handler:    _Templates_UpdateTemplate_Handler,
		},
		{
			MethodName: "getTemplate",
			Handler:    _Templates_GetTemplate_Handler,
		},
		{
			MethodName: "getDefaultTemplate",
			Handler:    _Templates_GetDefaultTemplate_Handler,
		},
		{
			MethodName: "copyTemplate",
			Handler:    _Templates_CopyTemplate_Handler,
		},
		{
			MethodName: "deleteTemplate",
			Handler:    _Templates_DeleteTemplate_Handler,
		},
		{
			MethodName: "countTemplatesDeprecated",
			Handler:    _Templates_CountTemplatesDeprecated_Handler,
		},
		{
			MethodName: "countTemplates",
			Handler:    _Templates_CountTemplates_Handler,
		},
		{
			MethodName: "countTemplatesForUserDeprecated",
			Handler:    _Templates_CountTemplatesForUserDeprecated_Handler,
		},
		{
			MethodName: "countTemplatesForUser",
			Handler:    _Templates_CountTemplatesForUser_Handler,
		},
		{
			MethodName: "createLocation",
			Handler:    _Templates_CreateLocation_Handler,
		},
		{
			MethodName: "updateLocation",
			Handler:    _Templates_UpdateLocation_Handler,
		},
		{
			MethodName: "getLocation",
			Handler:    _Templates_GetLocation_Handler,
		},
		{
			MethodName: "copyLocation",
			Handler:    _Templates_CopyLocation_Handler,
		},
		{
			MethodName: "deleteLocation",
			Handler:    _Templates_DeleteLocation_Handler,
		},
		{
			MethodName: "countLocationsDeprecated",
			Handler:    _Templates_CountLocationsDeprecated_Handler,
		},
		{
			MethodName: "countLocations",
			Handler:    _Templates_CountLocations_Handler,
		},
		{
			MethodName: "createBeacon",
			Handler:    _Templates_CreateBeacon_Handler,
		},
		{
			MethodName: "updateBeacon",
			Handler:    _Templates_UpdateBeacon_Handler,
		},
		{
			MethodName: "getBeacon",
			Handler:    _Templates_GetBeacon_Handler,
		},
		{
			MethodName: "copyBeacon",
			Handler:    _Templates_CopyBeacon_Handler,
		},
		{
			MethodName: "deleteBeacon",
			Handler:    _Templates_DeleteBeacon_Handler,
		},
		{
			MethodName: "countBeaconsDeprecated",
			Handler:    _Templates_CountBeaconsDeprecated_Handler,
		},
		{
			MethodName: "countBeacons",
			Handler:    _Templates_CountBeacons_Handler,
		},
		{
			MethodName: "createLink",
			Handler:    _Templates_CreateLink_Handler,
		},
		{
			MethodName: "updateLink",
			Handler:    _Templates_UpdateLink_Handler,
		},
		{
			MethodName: "getLink",
			Handler:    _Templates_GetLink_Handler,
		},
		{
			MethodName: "copyLink",
			Handler:    _Templates_CopyLink_Handler,
		},
		{
			MethodName: "deleteLink",
			Handler:    _Templates_DeleteLink_Handler,
		},
		{
			MethodName: "countLinksDeprecated",
			Handler:    _Templates_CountLinksDeprecated_Handler,
		},
		{
			MethodName: "countLinks",
			Handler:    _Templates_CountLinks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listTemplatesForUserDeprecated",
			Handler:       _Templates_ListTemplatesForUserDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTemplatesForUser",
			Handler:       _Templates_ListTemplatesForUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTemplatesDeprecated",
			Handler:       _Templates_ListTemplatesDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTemplates",
			Handler:       _Templates_ListTemplates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listLocationsDeprecated",
			Handler:       _Templates_ListLocationsDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listLocations",
			Handler:       _Templates_ListLocations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listBeaconsDeprecated",
			Handler:       _Templates_ListBeaconsDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listBeacons",
			Handler:       _Templates_ListBeacons_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listLinksDeprecated",
			Handler:       _Templates_ListLinksDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listLinks",
			Handler:       _Templates_ListLinks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/core/a_rpc_templates.proto",
}
