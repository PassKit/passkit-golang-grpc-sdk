//*
// Template
//
// Template configures data collection fields and pass design.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/common/template.proto

package io

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Apple pass types
type ApplePassType int32

const (
	// Use if you do not wish to support Apple Wallet
	ApplePassType_APPLE_NOT_SUPPORTED ApplePassType = 0
	ApplePassType_BOARDING_PASS       ApplePassType = 1
	ApplePassType_COUPON              ApplePassType = 2
	ApplePassType_EVENT_TICKET        ApplePassType = 3
	ApplePassType_GENERIC             ApplePassType = 4
	ApplePassType_STORE_CARD          ApplePassType = 5
)

// Enum value maps for ApplePassType.
var (
	ApplePassType_name = map[int32]string{
		0: "APPLE_NOT_SUPPORTED",
		1: "BOARDING_PASS",
		2: "COUPON",
		3: "EVENT_TICKET",
		4: "GENERIC",
		5: "STORE_CARD",
	}
	ApplePassType_value = map[string]int32{
		"APPLE_NOT_SUPPORTED": 0,
		"BOARDING_PASS":       1,
		"COUPON":              2,
		"EVENT_TICKET":        3,
		"GENERIC":             4,
		"STORE_CARD":          5,
	}
)

func (x ApplePassType) Enum() *ApplePassType {
	p := new(ApplePassType)
	*p = x
	return p
}

func (x ApplePassType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplePassType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[0].Descriptor()
}

func (ApplePassType) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[0]
}

func (x ApplePassType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplePassType.Descriptor instead.
func (ApplePassType) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{0}
}

// Google Pay pass types
type GooglePayPassType int32

const (
	// Use if you do not wish to support Google Pay
	GooglePayPassType_GOOGLE_PAY_NOT_SUPPORTED GooglePayPassType = 0
	GooglePayPassType_EVENT                    GooglePayPassType = 1
	GooglePayPassType_FLIGHT                   GooglePayPassType = 2
	GooglePayPassType_GIFT                     GooglePayPassType = 3
	GooglePayPassType_LOYALTY                  GooglePayPassType = 4
	GooglePayPassType_OFFER                    GooglePayPassType = 5
	GooglePayPassType_TRANSIT                  GooglePayPassType = 6
)

// Enum value maps for GooglePayPassType.
var (
	GooglePayPassType_name = map[int32]string{
		0: "GOOGLE_PAY_NOT_SUPPORTED",
		1: "EVENT",
		2: "FLIGHT",
		3: "GIFT",
		4: "LOYALTY",
		5: "OFFER",
		6: "TRANSIT",
	}
	GooglePayPassType_value = map[string]int32{
		"GOOGLE_PAY_NOT_SUPPORTED": 0,
		"EVENT":                    1,
		"FLIGHT":                   2,
		"GIFT":                     3,
		"LOYALTY":                  4,
		"OFFER":                    5,
		"TRANSIT":                  6,
	}
)

func (x GooglePayPassType) Enum() *GooglePayPassType {
	p := new(GooglePayPassType)
	*p = x
	return p
}

func (x GooglePayPassType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GooglePayPassType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[1].Descriptor()
}

func (GooglePayPassType) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[1]
}

func (x GooglePayPassType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GooglePayPassType.Descriptor instead.
func (GooglePayPassType) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{1}
}

// Barcode type sets the type of barcode for the pass.
type BarcodeType int32

const (
	BarcodeType_BARCODE_TYPE_DO_NOT_USE BarcodeType = 0
	// QR code can store 4 types of data: numeric, alphanumeric, byte/binary, and Kanji (Chinese characters).
	BarcodeType_QR BarcodeType = 1
	// Aztec codes are commonly used by the transportation industry such as tickets and airline boarding passes.
	BarcodeType_AZTEC BarcodeType = 2
	// 2D barcode which can store multiple data encodings. Not recommended for large payloads.
	BarcodeType_PDF417 BarcodeType = 3
	// Supports any character of the ASCII 128 character set which can store highly diversified information. Suitable for older scanners that may not support 2D barcodes, however, some older scanners may also not be able to read from a phone screen, so requires proper testing before use.
	BarcodeType_CODE128 BarcodeType = 4
	// This does not set a barcode. If you set barcode type as none, no barcode will be shown on the pass.
	BarcodeType_NONE BarcodeType = 5
)

// Enum value maps for BarcodeType.
var (
	BarcodeType_name = map[int32]string{
		0: "BARCODE_TYPE_DO_NOT_USE",
		1: "QR",
		2: "AZTEC",
		3: "PDF417",
		4: "CODE128",
		5: "NONE",
	}
	BarcodeType_value = map[string]int32{
		"BARCODE_TYPE_DO_NOT_USE": 0,
		"QR":                      1,
		"AZTEC":                   2,
		"PDF417":                  3,
		"CODE128":                 4,
		"NONE":                    5,
	}
)

func (x BarcodeType) Enum() *BarcodeType {
	p := new(BarcodeType)
	*p = x
	return p
}

func (x BarcodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BarcodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[2].Descriptor()
}

func (BarcodeType) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[2]
}

func (x BarcodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BarcodeType.Descriptor instead.
func (BarcodeType) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{2}
}

// Field type categorize a type of field rendered on pass or data collection page. The value will be auto-configured on the backend.
type FieldType int32

const (
	FieldType_FIELD_TYPE_NONE FieldType = 0
	// Meta fields. DataField.UniqueName needs to be meta.FIELDNAME.
	FieldType_META FieldType = 1
	// PII fields. DataField.UniqueName needs to be person.FIELDNAME.
	FieldType_PII FieldType = 2
	// Universal fields used across protocols (e.g. Terms And Conditions, Locations, Messages). DataField.UniqueName needs to be universal.FIELDNAME (e.g. universal.messages).
	FieldType_UNIVERSAL_FIELDS FieldType = 3
	// Protocol specific fields. DataField.UniqueName needs to be protocol.OBJECT.FIELDNAME.
	FieldType_PROTOCOL_FIELDS FieldType = 4
	// Custom fields are fields which are created only for pass render purpose and does not belong to other field type.
	FieldType_CUSTOM_FIELDS FieldType = 5
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0: "FIELD_TYPE_NONE",
		1: "META",
		2: "PII",
		3: "UNIVERSAL_FIELDS",
		4: "PROTOCOL_FIELDS",
		5: "CUSTOM_FIELDS",
	}
	FieldType_value = map[string]int32{
		"FIELD_TYPE_NONE":  0,
		"META":             1,
		"PII":              2,
		"UNIVERSAL_FIELDS": 3,
		"PROTOCOL_FIELDS":  4,
		"CUSTOM_FIELDS":    5,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[3].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[3]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{3}
}

type StandardFields int32

const (
	StandardFields_STANDARD_FIELDS_DO_NOT_USE StandardFields = 0
	StandardFields_STANDARD_MESSAGES          StandardFields = 1
	StandardFields_STANDARD_LEGAL             StandardFields = 2
	StandardFields_STANDARD_EXPIRY_DATE       StandardFields = 3
	StandardFields_STANDARD_USEFUL_LINKS      StandardFields = 4
	StandardFields_STANDARD_OPT_OUT           StandardFields = 5
	StandardFields_STANDARD_LOCATIONS         StandardFields = 6
)

// Enum value maps for StandardFields.
var (
	StandardFields_name = map[int32]string{
		0: "STANDARD_FIELDS_DO_NOT_USE",
		1: "STANDARD_MESSAGES",
		2: "STANDARD_LEGAL",
		3: "STANDARD_EXPIRY_DATE",
		4: "STANDARD_USEFUL_LINKS",
		5: "STANDARD_OPT_OUT",
		6: "STANDARD_LOCATIONS",
	}
	StandardFields_value = map[string]int32{
		"STANDARD_FIELDS_DO_NOT_USE": 0,
		"STANDARD_MESSAGES":          1,
		"STANDARD_LEGAL":             2,
		"STANDARD_EXPIRY_DATE":       3,
		"STANDARD_USEFUL_LINKS":      4,
		"STANDARD_OPT_OUT":           5,
		"STANDARD_LOCATIONS":         6,
	}
)

func (x StandardFields) Enum() *StandardFields {
	p := new(StandardFields)
	*p = x
	return p
}

func (x StandardFields) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardFields) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[4].Descriptor()
}

func (StandardFields) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[4]
}

func (x StandardFields) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StandardFields.Descriptor instead.
func (StandardFields) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{4}
}

type TextAlignment int32

const (
	TextAlignment_TEXT_ALIGNMENT_DO_NOT_USE TextAlignment = 0
	TextAlignment_LEFT                      TextAlignment = 1
	TextAlignment_CENTER                    TextAlignment = 2
	TextAlignment_RIGHT                     TextAlignment = 3
	// Used for Apple only.
	TextAlignment_NATURAL TextAlignment = 4
)

// Enum value maps for TextAlignment.
var (
	TextAlignment_name = map[int32]string{
		0: "TEXT_ALIGNMENT_DO_NOT_USE",
		1: "LEFT",
		2: "CENTER",
		3: "RIGHT",
		4: "NATURAL",
	}
	TextAlignment_value = map[string]int32{
		"TEXT_ALIGNMENT_DO_NOT_USE": 0,
		"LEFT":                      1,
		"CENTER":                    2,
		"RIGHT":                     3,
		"NATURAL":                   4,
	}
)

func (x TextAlignment) Enum() *TextAlignment {
	p := new(TextAlignment)
	*p = x
	return p
}

func (x TextAlignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextAlignment) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[5].Descriptor()
}

func (TextAlignment) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[5]
}

func (x TextAlignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextAlignment.Descriptor instead.
func (TextAlignment) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{5}
}

type DateTimeStyle int32

const (
	DateTimeStyle_DATE_TIME_STYLE_DO_NOT_USE DateTimeStyle = 0
	DateTimeStyle_DATE_TIME_STYLE_SHORT      DateTimeStyle = 1
	DateTimeStyle_DATE_TIME_STYLE_MEDIUM     DateTimeStyle = 2
	DateTimeStyle_DATE_TIME_STYLE_LONG       DateTimeStyle = 3
	DateTimeStyle_DATE_TIME_STYLE_FULL       DateTimeStyle = 4
)

// Enum value maps for DateTimeStyle.
var (
	DateTimeStyle_name = map[int32]string{
		0: "DATE_TIME_STYLE_DO_NOT_USE",
		1: "DATE_TIME_STYLE_SHORT",
		2: "DATE_TIME_STYLE_MEDIUM",
		3: "DATE_TIME_STYLE_LONG",
		4: "DATE_TIME_STYLE_FULL",
	}
	DateTimeStyle_value = map[string]int32{
		"DATE_TIME_STYLE_DO_NOT_USE": 0,
		"DATE_TIME_STYLE_SHORT":      1,
		"DATE_TIME_STYLE_MEDIUM":     2,
		"DATE_TIME_STYLE_LONG":       3,
		"DATE_TIME_STYLE_FULL":       4,
	}
)

func (x DateTimeStyle) Enum() *DateTimeStyle {
	p := new(DateTimeStyle)
	*p = x
	return p
}

func (x DateTimeStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTimeStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[6].Descriptor()
}

func (DateTimeStyle) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[6]
}

func (x DateTimeStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateTimeStyle.Descriptor instead.
func (DateTimeStyle) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{6}
}

type LinkDetector int32

const (
	LinkDetector_LINK_DETECTOR_DO_NOT_USE LinkDetector = 0
	LinkDetector_LINK_DETECTOR_ADDRESS    LinkDetector = 1
	LinkDetector_LINK_DETECTOR_DATE       LinkDetector = 2
	LinkDetector_LINK_DETECTOR_URL        LinkDetector = 3
	LinkDetector_LINK_DETECTOR_PHONE      LinkDetector = 4
)

// Enum value maps for LinkDetector.
var (
	LinkDetector_name = map[int32]string{
		0: "LINK_DETECTOR_DO_NOT_USE",
		1: "LINK_DETECTOR_ADDRESS",
		2: "LINK_DETECTOR_DATE",
		3: "LINK_DETECTOR_URL",
		4: "LINK_DETECTOR_PHONE",
	}
	LinkDetector_value = map[string]int32{
		"LINK_DETECTOR_DO_NOT_USE": 0,
		"LINK_DETECTOR_ADDRESS":    1,
		"LINK_DETECTOR_DATE":       2,
		"LINK_DETECTOR_URL":        3,
		"LINK_DETECTOR_PHONE":      4,
	}
)

func (x LinkDetector) Enum() *LinkDetector {
	p := new(LinkDetector)
	*p = x
	return p
}

func (x LinkDetector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkDetector) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[7].Descriptor()
}

func (LinkDetector) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[7]
}

func (x LinkDetector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkDetector.Descriptor instead.
func (LinkDetector) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{7}
}

type NumberStyle int32

const (
	NumberStyle_NUMBER_STYLE_DO_NOT_USE NumberStyle = 0
	NumberStyle_NUMBER_STYLE_DECIMAL    NumberStyle = 1
	NumberStyle_NUMBER_STYLE_PERCENT    NumberStyle = 2
	NumberStyle_NUMBER_STYLE_SCIENTIFIC NumberStyle = 3
	NumberStyle_NUMBER_STYLE_SPELL      NumberStyle = 4
)

// Enum value maps for NumberStyle.
var (
	NumberStyle_name = map[int32]string{
		0: "NUMBER_STYLE_DO_NOT_USE",
		1: "NUMBER_STYLE_DECIMAL",
		2: "NUMBER_STYLE_PERCENT",
		3: "NUMBER_STYLE_SCIENTIFIC",
		4: "NUMBER_STYLE_SPELL",
	}
	NumberStyle_value = map[string]int32{
		"NUMBER_STYLE_DO_NOT_USE": 0,
		"NUMBER_STYLE_DECIMAL":    1,
		"NUMBER_STYLE_PERCENT":    2,
		"NUMBER_STYLE_SCIENTIFIC": 3,
		"NUMBER_STYLE_SPELL":      4,
	}
)

func (x NumberStyle) Enum() *NumberStyle {
	p := new(NumberStyle)
	*p = x
	return p
}

func (x NumberStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumberStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[8].Descriptor()
}

func (NumberStyle) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[8]
}

func (x NumberStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumberStyle.Descriptor instead.
func (NumberStyle) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{8}
}

type TransitType int32

const (
	TransitType_TRANSIT_TYPE_DO_NOT_USE TransitType = 0
	TransitType_TRANSIT_TYPE_AIR        TransitType = 1
	TransitType_TRANSIT_TYPE_BOAT       TransitType = 2
	TransitType_TRANSIT_TYPE_BUS        TransitType = 3
	TransitType_TRANSIT_TYPE_GENERIC    TransitType = 4
	TransitType_TRANSIT_TYPE_TRAIN      TransitType = 5
	// Google Pay only.
	TransitType_TRANSIT_TYPE_TRAM TransitType = 6
)

// Enum value maps for TransitType.
var (
	TransitType_name = map[int32]string{
		0: "TRANSIT_TYPE_DO_NOT_USE",
		1: "TRANSIT_TYPE_AIR",
		2: "TRANSIT_TYPE_BOAT",
		3: "TRANSIT_TYPE_BUS",
		4: "TRANSIT_TYPE_GENERIC",
		5: "TRANSIT_TYPE_TRAIN",
		6: "TRANSIT_TYPE_TRAM",
	}
	TransitType_value = map[string]int32{
		"TRANSIT_TYPE_DO_NOT_USE": 0,
		"TRANSIT_TYPE_AIR":        1,
		"TRANSIT_TYPE_BOAT":       2,
		"TRANSIT_TYPE_BUS":        3,
		"TRANSIT_TYPE_GENERIC":    4,
		"TRANSIT_TYPE_TRAIN":      5,
		"TRANSIT_TYPE_TRAM":       6,
	}
)

func (x TransitType) Enum() *TransitType {
	p := new(TransitType)
	*p = x
	return p
}

func (x TransitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransitType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[9].Descriptor()
}

func (TransitType) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[9]
}

func (x TransitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransitType.Descriptor instead.
func (TransitType) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{9}
}

// Indicates the type of data.
// IMPOTANT: If string is changed, please update data collection page data-collection-page.html.tmpl if statements.
type DataType int32

const (
	DataType_DATA_TYPE_NONE DataType = 0
	DataType_TEXT           DataType = 1 // default
	// The only difference with TEXT is that TEXT_LONG renders textarea tag on the data collection landing page.
	DataType_TEXT_LONG DataType = 2
	// Date containing year, month and date. No style.
	DataType_DATE_YYYYMMDD DataType = 3
	// Date containing year and month. No style.
	DataType_DATE_YYYYMM DataType = 4
	// Date containing month and date. No style.
	DataType_DATE_MMDD DataType = 5
	DataType_TIME      DataType = 6
	DataType_DATE_TIME DataType = 7
	// A number (No decimal support).
	DataType_INT DataType = 8
	// A number with decimal support.
	DataType_NUMBER  DataType = 9
	DataType_EMAIL   DataType = 10
	DataType_URL     DataType = 11
	DataType_TEL     DataType = 12
	DataType_ADDRESS DataType = 13
	DataType_IMAGE   DataType = 15 // IMAGE = 15; // we can comment out IMAGE when backend implement the string logic for uploaded image file.
	// A value of money amount in float (e.g. 5, 10.00, 40.95, 60.9333333333) .
	DataType_CURRENCY DataType = 16
	DataType_BOOLEAN  DataType = 17
	// A list of key value pairs
	DataType_OPTIONS DataType = 18
	DataType_DATE_MM DataType = 19
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "DATA_TYPE_NONE",
		1:  "TEXT",
		2:  "TEXT_LONG",
		3:  "DATE_YYYYMMDD",
		4:  "DATE_YYYYMM",
		5:  "DATE_MMDD",
		6:  "TIME",
		7:  "DATE_TIME",
		8:  "INT",
		9:  "NUMBER",
		10: "EMAIL",
		11: "URL",
		12: "TEL",
		13: "ADDRESS",
		15: "IMAGE",
		16: "CURRENCY",
		17: "BOOLEAN",
		18: "OPTIONS",
		19: "DATE_MM",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_NONE": 0,
		"TEXT":           1,
		"TEXT_LONG":      2,
		"DATE_YYYYMMDD":  3,
		"DATE_YYYYMM":    4,
		"DATE_MMDD":      5,
		"TIME":           6,
		"DATE_TIME":      7,
		"INT":            8,
		"NUMBER":         9,
		"EMAIL":          10,
		"URL":            11,
		"TEL":            12,
		"ADDRESS":        13,
		"IMAGE":          15,
		"CURRENCY":       16,
		"BOOLEAN":        17,
		"OPTIONS":        18,
		"DATE_MM":        19,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[10].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[10]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{10}
}

// Data style controls how value will be rendered on the pass.
type DataStyle int32

const (
	DataStyle_NO_STYLE DataStyle = 0
	// Date containing year, month and date. Numeric only (e.g. 11/23/37).
	DataStyle_DATE_SHORT DataStyle = 1
	// Date containing year, month and date. With abbreviated text (e.g. Nov 23, 1937).
	DataStyle_DATE_MEDIUM DataStyle = 2
	// Date containing year, month and date. With full text (e.g. November 23, 1937).
	DataStyle_DATE_LONG DataStyle = 3
	// Date containing year, month and date. With complete details (e.g. Tuesday, April 12, 1952 AD).
	DataStyle_DATE_FULL DataStyle = 4
	// Date containing year, month and date. Numeric only (e.g. 3:30 PM).
	DataStyle_TIME_SHORT DataStyle = 5
	// Date containing year, month and date. With abbreviated text (e.g. 3:30:32 PM).
	DataStyle_TIME_MEDIUM DataStyle = 6
	// Date containing year, month and date. With full text (e.g. 3:30:32 PM PST).
	DataStyle_TIME_LONG DataStyle = 7
	// Date containing year, month and date. With complete details (e.g. 3:30:42 PM Pacific Standard Time).
	DataStyle_TIME_FULL DataStyle = 8
	// Date containing year, month and date. Numeric only (e.g. 11/23/37 3:30 PM).
	DataStyle_DATE_TIME_SHORT DataStyle = 9
	// Date containing year, month and date. With abbreviated text (e.g. Nov 23, 1937 3:30:32 PM).
	DataStyle_DATE_TIME_MEDIUM DataStyle = 10
	// Date containing year, month and date. With full text (e.g. November 23, 1937 3:30:32 PM PST).
	DataStyle_DATE_TIME_LONG DataStyle = 11
	// Date containing year, month and date. With complete details (e.g. Tuesday, April 12, 1952 AD 3:30:42 PM Pacific Standard Time).
	DataStyle_DATE_TIME_FULL DataStyle = 12
	DataStyle_NUMBER_DECIMAL DataStyle = 13
)

// Enum value maps for DataStyle.
var (
	DataStyle_name = map[int32]string{
		0:  "NO_STYLE",
		1:  "DATE_SHORT",
		2:  "DATE_MEDIUM",
		3:  "DATE_LONG",
		4:  "DATE_FULL",
		5:  "TIME_SHORT",
		6:  "TIME_MEDIUM",
		7:  "TIME_LONG",
		8:  "TIME_FULL",
		9:  "DATE_TIME_SHORT",
		10: "DATE_TIME_MEDIUM",
		11: "DATE_TIME_LONG",
		12: "DATE_TIME_FULL",
		13: "NUMBER_DECIMAL",
	}
	DataStyle_value = map[string]int32{
		"NO_STYLE":         0,
		"DATE_SHORT":       1,
		"DATE_MEDIUM":      2,
		"DATE_LONG":        3,
		"DATE_FULL":        4,
		"TIME_SHORT":       5,
		"TIME_MEDIUM":      6,
		"TIME_LONG":        7,
		"TIME_FULL":        8,
		"DATE_TIME_SHORT":  9,
		"DATE_TIME_MEDIUM": 10,
		"DATE_TIME_LONG":   11,
		"DATE_TIME_FULL":   12,
		"NUMBER_DECIMAL":   13,
	}
)

func (x DataStyle) Enum() *DataStyle {
	p := new(DataStyle)
	*p = x
	return p
}

func (x DataStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[11].Descriptor()
}

func (DataStyle) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[11]
}

func (x DataStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataStyle.Descriptor instead.
func (DataStyle) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{11}
}

type FieldSection int32

const (
	FieldSection_FIELD_SECTION_DO_NOT_USE FieldSection = 0
	FieldSection_BACK_FIELDS              FieldSection = 1
	FieldSection_PRIMARY_FIELDS           FieldSection = 2
	FieldSection_SECONDARY_FIELDS         FieldSection = 3
	FieldSection_AUXILIARY_FIELDS         FieldSection = 4
	FieldSection_HEADER_FIELDS            FieldSection = 5
	// Used for Apple poster style event tickets.
	FieldSection_ADDITIONAL_FIELDS FieldSection = 6
)

// Enum value maps for FieldSection.
var (
	FieldSection_name = map[int32]string{
		0: "FIELD_SECTION_DO_NOT_USE",
		1: "BACK_FIELDS",
		2: "PRIMARY_FIELDS",
		3: "SECONDARY_FIELDS",
		4: "AUXILIARY_FIELDS",
		5: "HEADER_FIELDS",
		6: "ADDITIONAL_FIELDS",
	}
	FieldSection_value = map[string]int32{
		"FIELD_SECTION_DO_NOT_USE": 0,
		"BACK_FIELDS":              1,
		"PRIMARY_FIELDS":           2,
		"SECONDARY_FIELDS":         3,
		"AUXILIARY_FIELDS":         4,
		"HEADER_FIELDS":            5,
		"ADDITIONAL_FIELDS":        6,
	}
)

func (x FieldSection) Enum() *FieldSection {
	p := new(FieldSection)
	*p = x
	return p
}

func (x FieldSection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldSection) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[12].Descriptor()
}

func (FieldSection) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[12]
}

func (x FieldSection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldSection.Descriptor instead.
func (FieldSection) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{12}
}

type GooglePayField int32

const (
	GooglePayField_GOOGLE_PAY_FIELD_DO_NOT_USE GooglePayField = 0
	// Boarding 1-99
	GooglePayField_GOOGLE_PAY_BOARDING_AIRLINE_NAME    GooglePayField = 1
	GooglePayField_GOOGLE_PAY_BOARDING_AIRLINE_CODE    GooglePayField = 2
	GooglePayField_GOOGLE_PAY_BOARDING_ORIGIN          GooglePayField = 3
	GooglePayField_GOOGLE_PAY_BOARDING_DESTINATION     GooglePayField = 4
	GooglePayField_GOOGLE_PAY_BOARDING_ORIGIN_TERMINAL GooglePayField = 5
	GooglePayField_GOOGLE_PAY_BOARDING_ORIGIN_GATE     GooglePayField = 6
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_BOARDING_BOARDING_TIME         GooglePayField = 7
	GooglePayField_GOOGLE_PAY_BOARDING_PASSENGER_NAME        GooglePayField = 8
	GooglePayField_GOOGLE_PAY_BOARDING_ZONE_GROUP            GooglePayField = 9
	GooglePayField_GOOGLE_PAY_BOARDING_SEAT                  GooglePayField = 10
	GooglePayField_GOOGLE_PAY_BOARDING_BOARDING_POSITION     GooglePayField = 11
	GooglePayField_GOOGLE_PAY_BOARDING_BOARDING_SEQUENCE     GooglePayField = 12
	GooglePayField_GOOGLE_PAY_BOARDING_BOARDING_DOOR         GooglePayField = 13
	GooglePayField_GOOGLE_PAY_BOARDING_FLIGHT_NUMBER         GooglePayField = 14
	GooglePayField_GOOGLE_PAY_BOARDING_CONFIRMATION_NUMBER   GooglePayField = 15
	GooglePayField_GOOGLE_PAY_BOARDING_TICKET_NUMBER         GooglePayField = 16
	GooglePayField_GOOGLE_PAY_BOARDING_FREQUENT_FLYER_NUMBER GooglePayField = 17
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_BOARDING_GATE_CLOSES GooglePayField = 18
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_BOARDING_DEPARTURE_TIME GooglePayField = 19
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_BOARDING_ARRIVAL_TIME     GooglePayField = 20
	GooglePayField_GOOGLE_PAY_BOARDING_ARRIVAL_TERMINAL GooglePayField = 21
	GooglePayField_GOOGLE_PAY_BOARDING_ARRIVAL_GATE     GooglePayField = 22
	// Event 100-199
	GooglePayField_GOOGLE_PAY_EVENT_NAME          GooglePayField = 100
	GooglePayField_GOOGLE_PAY_EVENT_VENUE_NAME    GooglePayField = 101
	GooglePayField_GOOGLE_PAY_EVENT_VENUE_ADDRESS GooglePayField = 102
	GooglePayField_GOOGLE_PAY_EVENT_GATE          GooglePayField = 103
	GooglePayField_GOOGLE_PAY_EVENT_SECTION       GooglePayField = 104
	GooglePayField_GOOGLE_PAY_EVENT_ROW           GooglePayField = 105
	GooglePayField_GOOGLE_PAY_EVENT_SEAT          GooglePayField = 106
	GooglePayField_GOOGLE_PAY_EVENT_TICKET_HOLDER GooglePayField = 107
	GooglePayField_GOOGLE_PAY_EVENT_DOORS_OPEN    GooglePayField = 108
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_EVENT_START GooglePayField = 109
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_EVENT_END                 GooglePayField = 110
	GooglePayField_GOOGLE_PAY_EVENT_TICKET_TYPE         GooglePayField = 111
	GooglePayField_GOOGLE_PAY_EVENT_TICKET_NUMBER       GooglePayField = 112
	GooglePayField_GOOGLE_PAY_EVENT_CONFIRMATION_NUMBER GooglePayField = 113
	// This field must be of type Currency
	GooglePayField_GOOGLE_PAY_EVENT_FACE_VALUE GooglePayField = 114
	GooglePayField_GOOGLE_PAY_EVENT_FINE_PRINT GooglePayField = 115
	// Gift 200-299
	GooglePayField_GOOGLE_PAY_GIFT_MERCHANT_NAME GooglePayField = 200
	// This field must be of type Currency
	GooglePayField_GOOGLE_PAY_GIFT_BALANCE GooglePayField = 201
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_GIFT_CARD_NUMBER         GooglePayField = 202
	GooglePayField_GOOGLE_PAY_GIFT_BALANCE_UPDATE_TIME GooglePayField = 203
	GooglePayField_GOOGLE_PAY_GIFT_PIN                 GooglePayField = 204
	GooglePayField_GOOGLE_PAY_GIFT_EVENT_NUMBER        GooglePayField = 205
	// Loyalty 300-399
	GooglePayField_GOOGLE_PAY_LOYALTY_PROGRAM_NAME           GooglePayField = 300
	GooglePayField_GOOGLE_PAY_LOYALTY_POINTS                 GooglePayField = 301
	GooglePayField_GOOGLE_PAY_LOYALTY_SECONDARY_POINTS       GooglePayField = 302
	GooglePayField_GOOGLE_PAY_LOYALTY_ACCOUNT_NAME           GooglePayField = 303
	GooglePayField_GOOGLE_PAY_LOYALTY_ACCOUNT_ID             GooglePayField = 304
	GooglePayField_GOOGLE_PAY_LOYALTY_REWARDS_TIER           GooglePayField = 305
	GooglePayField_GOOGLE_PAY_LOYALTY_SECONDARY_REWARDS_TIER GooglePayField = 306
	// Offer 400-499
	GooglePayField_GOOGLE_PAY_OFFER_TITLE       GooglePayField = 400
	GooglePayField_GOOGLE_PAY_OFFER_PROVIDER    GooglePayField = 401
	GooglePayField_GOOGLE_PAY_OFFER_DETAILS     GooglePayField = 402
	GooglePayField_GOOGLE_PAY_OFFER_FINE_PRINT  GooglePayField = 403
	GooglePayField_GOOGLE_PAY_OFFER_SHORT_TITLE GooglePayField = 404
	// Transit 500-599
	GooglePayField_GOOGLE_PAY_TRANSIT_ISSUER_NAME    GooglePayField = 500
	GooglePayField_GOOGLE_PAY_TRANSIT_DEPARTURE      GooglePayField = 501
	GooglePayField_GOOGLE_PAY_TRANSIT_DEPARTURE_TIME GooglePayField = 502
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_TRANSIT_VALID_FROM GooglePayField = 503
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_TRANSIT_VALID_UNTIL               GooglePayField = 504
	GooglePayField_GOOGLE_PAY_TRANSIT_ARRIVAL                   GooglePayField = 505
	GooglePayField_GOOGLE_PAY_TRANSIT_PASSENGER_NAMES           GooglePayField = 506
	GooglePayField_GOOGLE_PAY_TRANSIT_CARRIAGE                  GooglePayField = 507
	GooglePayField_GOOGLE_PAY_TRANSIT_COACH                     GooglePayField = 508
	GooglePayField_GOOGLE_PAY_TRANSIT_SEAT                      GooglePayField = 509
	GooglePayField_GOOGLE_PAY_TRANSIT_TICKET_NUMBER             GooglePayField = 510
	GooglePayField_GOOGLE_PAY_TRANSIT_TICKET_STATUS             GooglePayField = 511
	GooglePayField_GOOGLE_PAY_TRANSIT_FARE_NAME                 GooglePayField = 512
	GooglePayField_GOOGLE_PAY_TRANSIT_PLATFORM                  GooglePayField = 513
	GooglePayField_GOOGLE_PAY_TRANSIT_ZONE                      GooglePayField = 514
	GooglePayField_GOOGLE_PAY_TRANSIT_FARE_CLASS                GooglePayField = 515
	GooglePayField_GOOGLE_PAY_TRANSIT_CONCESSION_CATEGORY       GooglePayField = 516
	GooglePayField_GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTIONS        GooglePayField = 517
	GooglePayField_GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTION_DETAILS GooglePayField = 518
	GooglePayField_GOOGLE_PAY_TRANSIT_TIME_RESTRICTIONS         GooglePayField = 519
	GooglePayField_GOOGLE_PAY_TRANSIT_OTHER_RESTRICTIONS        GooglePayField = 520
	GooglePayField_GOOGLE_PAY_TRANSIT_RECEIPT_NUMBER            GooglePayField = 521
	// This field must be of type DateTime
	GooglePayField_GOOGLE_PAY_TRANSIT_PURCHASE_DATE     GooglePayField = 522
	GooglePayField_GOOGLE_PAY_TRANSIT_ACCOUNT_ID        GooglePayField = 523
	GooglePayField_GOOGLE_PAY_TRANSIT_CONFIRMATION_CODE GooglePayField = 524
	// This field must be of type Currency
	GooglePayField_GOOGLE_PAY_TRANSIT_FACE_VALUE GooglePayField = 525
	// This field must be of type Currency
	GooglePayField_GOOGLE_PAY_TRANSIT_PURCHASE_PRICE   GooglePayField = 526
	GooglePayField_GOOGLE_PAY_TRANSIT_DISCOUNT_MESSAGE GooglePayField = 527
	// Common Fields >= 1000
	GooglePayField_GOOGLE_PAY_TEXT_MODULE        GooglePayField = 1000
	GooglePayField_GOOGLE_PAY_ISSUER_NAME        GooglePayField = 1001
	GooglePayField_GOOGLE_PAY_STATIC_TEXT_MODULE GooglePayField = 1002
)

// Enum value maps for GooglePayField.
var (
	GooglePayField_name = map[int32]string{
		0:    "GOOGLE_PAY_FIELD_DO_NOT_USE",
		1:    "GOOGLE_PAY_BOARDING_AIRLINE_NAME",
		2:    "GOOGLE_PAY_BOARDING_AIRLINE_CODE",
		3:    "GOOGLE_PAY_BOARDING_ORIGIN",
		4:    "GOOGLE_PAY_BOARDING_DESTINATION",
		5:    "GOOGLE_PAY_BOARDING_ORIGIN_TERMINAL",
		6:    "GOOGLE_PAY_BOARDING_ORIGIN_GATE",
		7:    "GOOGLE_PAY_BOARDING_BOARDING_TIME",
		8:    "GOOGLE_PAY_BOARDING_PASSENGER_NAME",
		9:    "GOOGLE_PAY_BOARDING_ZONE_GROUP",
		10:   "GOOGLE_PAY_BOARDING_SEAT",
		11:   "GOOGLE_PAY_BOARDING_BOARDING_POSITION",
		12:   "GOOGLE_PAY_BOARDING_BOARDING_SEQUENCE",
		13:   "GOOGLE_PAY_BOARDING_BOARDING_DOOR",
		14:   "GOOGLE_PAY_BOARDING_FLIGHT_NUMBER",
		15:   "GOOGLE_PAY_BOARDING_CONFIRMATION_NUMBER",
		16:   "GOOGLE_PAY_BOARDING_TICKET_NUMBER",
		17:   "GOOGLE_PAY_BOARDING_FREQUENT_FLYER_NUMBER",
		18:   "GOOGLE_PAY_BOARDING_GATE_CLOSES",
		19:   "GOOGLE_PAY_BOARDING_DEPARTURE_TIME",
		20:   "GOOGLE_PAY_BOARDING_ARRIVAL_TIME",
		21:   "GOOGLE_PAY_BOARDING_ARRIVAL_TERMINAL",
		22:   "GOOGLE_PAY_BOARDING_ARRIVAL_GATE",
		100:  "GOOGLE_PAY_EVENT_NAME",
		101:  "GOOGLE_PAY_EVENT_VENUE_NAME",
		102:  "GOOGLE_PAY_EVENT_VENUE_ADDRESS",
		103:  "GOOGLE_PAY_EVENT_GATE",
		104:  "GOOGLE_PAY_EVENT_SECTION",
		105:  "GOOGLE_PAY_EVENT_ROW",
		106:  "GOOGLE_PAY_EVENT_SEAT",
		107:  "GOOGLE_PAY_EVENT_TICKET_HOLDER",
		108:  "GOOGLE_PAY_EVENT_DOORS_OPEN",
		109:  "GOOGLE_PAY_EVENT_START",
		110:  "GOOGLE_PAY_EVENT_END",
		111:  "GOOGLE_PAY_EVENT_TICKET_TYPE",
		112:  "GOOGLE_PAY_EVENT_TICKET_NUMBER",
		113:  "GOOGLE_PAY_EVENT_CONFIRMATION_NUMBER",
		114:  "GOOGLE_PAY_EVENT_FACE_VALUE",
		115:  "GOOGLE_PAY_EVENT_FINE_PRINT",
		200:  "GOOGLE_PAY_GIFT_MERCHANT_NAME",
		201:  "GOOGLE_PAY_GIFT_BALANCE",
		202:  "GOOGLE_PAY_GIFT_CARD_NUMBER",
		203:  "GOOGLE_PAY_GIFT_BALANCE_UPDATE_TIME",
		204:  "GOOGLE_PAY_GIFT_PIN",
		205:  "GOOGLE_PAY_GIFT_EVENT_NUMBER",
		300:  "GOOGLE_PAY_LOYALTY_PROGRAM_NAME",
		301:  "GOOGLE_PAY_LOYALTY_POINTS",
		302:  "GOOGLE_PAY_LOYALTY_SECONDARY_POINTS",
		303:  "GOOGLE_PAY_LOYALTY_ACCOUNT_NAME",
		304:  "GOOGLE_PAY_LOYALTY_ACCOUNT_ID",
		305:  "GOOGLE_PAY_LOYALTY_REWARDS_TIER",
		306:  "GOOGLE_PAY_LOYALTY_SECONDARY_REWARDS_TIER",
		400:  "GOOGLE_PAY_OFFER_TITLE",
		401:  "GOOGLE_PAY_OFFER_PROVIDER",
		402:  "GOOGLE_PAY_OFFER_DETAILS",
		403:  "GOOGLE_PAY_OFFER_FINE_PRINT",
		404:  "GOOGLE_PAY_OFFER_SHORT_TITLE",
		500:  "GOOGLE_PAY_TRANSIT_ISSUER_NAME",
		501:  "GOOGLE_PAY_TRANSIT_DEPARTURE",
		502:  "GOOGLE_PAY_TRANSIT_DEPARTURE_TIME",
		503:  "GOOGLE_PAY_TRANSIT_VALID_FROM",
		504:  "GOOGLE_PAY_TRANSIT_VALID_UNTIL",
		505:  "GOOGLE_PAY_TRANSIT_ARRIVAL",
		506:  "GOOGLE_PAY_TRANSIT_PASSENGER_NAMES",
		507:  "GOOGLE_PAY_TRANSIT_CARRIAGE",
		508:  "GOOGLE_PAY_TRANSIT_COACH",
		509:  "GOOGLE_PAY_TRANSIT_SEAT",
		510:  "GOOGLE_PAY_TRANSIT_TICKET_NUMBER",
		511:  "GOOGLE_PAY_TRANSIT_TICKET_STATUS",
		512:  "GOOGLE_PAY_TRANSIT_FARE_NAME",
		513:  "GOOGLE_PAY_TRANSIT_PLATFORM",
		514:  "GOOGLE_PAY_TRANSIT_ZONE",
		515:  "GOOGLE_PAY_TRANSIT_FARE_CLASS",
		516:  "GOOGLE_PAY_TRANSIT_CONCESSION_CATEGORY",
		517:  "GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTIONS",
		518:  "GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTION_DETAILS",
		519:  "GOOGLE_PAY_TRANSIT_TIME_RESTRICTIONS",
		520:  "GOOGLE_PAY_TRANSIT_OTHER_RESTRICTIONS",
		521:  "GOOGLE_PAY_TRANSIT_RECEIPT_NUMBER",
		522:  "GOOGLE_PAY_TRANSIT_PURCHASE_DATE",
		523:  "GOOGLE_PAY_TRANSIT_ACCOUNT_ID",
		524:  "GOOGLE_PAY_TRANSIT_CONFIRMATION_CODE",
		525:  "GOOGLE_PAY_TRANSIT_FACE_VALUE",
		526:  "GOOGLE_PAY_TRANSIT_PURCHASE_PRICE",
		527:  "GOOGLE_PAY_TRANSIT_DISCOUNT_MESSAGE",
		1000: "GOOGLE_PAY_TEXT_MODULE",
		1001: "GOOGLE_PAY_ISSUER_NAME",
		1002: "GOOGLE_PAY_STATIC_TEXT_MODULE",
	}
	GooglePayField_value = map[string]int32{
		"GOOGLE_PAY_FIELD_DO_NOT_USE":                  0,
		"GOOGLE_PAY_BOARDING_AIRLINE_NAME":             1,
		"GOOGLE_PAY_BOARDING_AIRLINE_CODE":             2,
		"GOOGLE_PAY_BOARDING_ORIGIN":                   3,
		"GOOGLE_PAY_BOARDING_DESTINATION":              4,
		"GOOGLE_PAY_BOARDING_ORIGIN_TERMINAL":          5,
		"GOOGLE_PAY_BOARDING_ORIGIN_GATE":              6,
		"GOOGLE_PAY_BOARDING_BOARDING_TIME":            7,
		"GOOGLE_PAY_BOARDING_PASSENGER_NAME":           8,
		"GOOGLE_PAY_BOARDING_ZONE_GROUP":               9,
		"GOOGLE_PAY_BOARDING_SEAT":                     10,
		"GOOGLE_PAY_BOARDING_BOARDING_POSITION":        11,
		"GOOGLE_PAY_BOARDING_BOARDING_SEQUENCE":        12,
		"GOOGLE_PAY_BOARDING_BOARDING_DOOR":            13,
		"GOOGLE_PAY_BOARDING_FLIGHT_NUMBER":            14,
		"GOOGLE_PAY_BOARDING_CONFIRMATION_NUMBER":      15,
		"GOOGLE_PAY_BOARDING_TICKET_NUMBER":            16,
		"GOOGLE_PAY_BOARDING_FREQUENT_FLYER_NUMBER":    17,
		"GOOGLE_PAY_BOARDING_GATE_CLOSES":              18,
		"GOOGLE_PAY_BOARDING_DEPARTURE_TIME":           19,
		"GOOGLE_PAY_BOARDING_ARRIVAL_TIME":             20,
		"GOOGLE_PAY_BOARDING_ARRIVAL_TERMINAL":         21,
		"GOOGLE_PAY_BOARDING_ARRIVAL_GATE":             22,
		"GOOGLE_PAY_EVENT_NAME":                        100,
		"GOOGLE_PAY_EVENT_VENUE_NAME":                  101,
		"GOOGLE_PAY_EVENT_VENUE_ADDRESS":               102,
		"GOOGLE_PAY_EVENT_GATE":                        103,
		"GOOGLE_PAY_EVENT_SECTION":                     104,
		"GOOGLE_PAY_EVENT_ROW":                         105,
		"GOOGLE_PAY_EVENT_SEAT":                        106,
		"GOOGLE_PAY_EVENT_TICKET_HOLDER":               107,
		"GOOGLE_PAY_EVENT_DOORS_OPEN":                  108,
		"GOOGLE_PAY_EVENT_START":                       109,
		"GOOGLE_PAY_EVENT_END":                         110,
		"GOOGLE_PAY_EVENT_TICKET_TYPE":                 111,
		"GOOGLE_PAY_EVENT_TICKET_NUMBER":               112,
		"GOOGLE_PAY_EVENT_CONFIRMATION_NUMBER":         113,
		"GOOGLE_PAY_EVENT_FACE_VALUE":                  114,
		"GOOGLE_PAY_EVENT_FINE_PRINT":                  115,
		"GOOGLE_PAY_GIFT_MERCHANT_NAME":                200,
		"GOOGLE_PAY_GIFT_BALANCE":                      201,
		"GOOGLE_PAY_GIFT_CARD_NUMBER":                  202,
		"GOOGLE_PAY_GIFT_BALANCE_UPDATE_TIME":          203,
		"GOOGLE_PAY_GIFT_PIN":                          204,
		"GOOGLE_PAY_GIFT_EVENT_NUMBER":                 205,
		"GOOGLE_PAY_LOYALTY_PROGRAM_NAME":              300,
		"GOOGLE_PAY_LOYALTY_POINTS":                    301,
		"GOOGLE_PAY_LOYALTY_SECONDARY_POINTS":          302,
		"GOOGLE_PAY_LOYALTY_ACCOUNT_NAME":              303,
		"GOOGLE_PAY_LOYALTY_ACCOUNT_ID":                304,
		"GOOGLE_PAY_LOYALTY_REWARDS_TIER":              305,
		"GOOGLE_PAY_LOYALTY_SECONDARY_REWARDS_TIER":    306,
		"GOOGLE_PAY_OFFER_TITLE":                       400,
		"GOOGLE_PAY_OFFER_PROVIDER":                    401,
		"GOOGLE_PAY_OFFER_DETAILS":                     402,
		"GOOGLE_PAY_OFFER_FINE_PRINT":                  403,
		"GOOGLE_PAY_OFFER_SHORT_TITLE":                 404,
		"GOOGLE_PAY_TRANSIT_ISSUER_NAME":               500,
		"GOOGLE_PAY_TRANSIT_DEPARTURE":                 501,
		"GOOGLE_PAY_TRANSIT_DEPARTURE_TIME":            502,
		"GOOGLE_PAY_TRANSIT_VALID_FROM":                503,
		"GOOGLE_PAY_TRANSIT_VALID_UNTIL":               504,
		"GOOGLE_PAY_TRANSIT_ARRIVAL":                   505,
		"GOOGLE_PAY_TRANSIT_PASSENGER_NAMES":           506,
		"GOOGLE_PAY_TRANSIT_CARRIAGE":                  507,
		"GOOGLE_PAY_TRANSIT_COACH":                     508,
		"GOOGLE_PAY_TRANSIT_SEAT":                      509,
		"GOOGLE_PAY_TRANSIT_TICKET_NUMBER":             510,
		"GOOGLE_PAY_TRANSIT_TICKET_STATUS":             511,
		"GOOGLE_PAY_TRANSIT_FARE_NAME":                 512,
		"GOOGLE_PAY_TRANSIT_PLATFORM":                  513,
		"GOOGLE_PAY_TRANSIT_ZONE":                      514,
		"GOOGLE_PAY_TRANSIT_FARE_CLASS":                515,
		"GOOGLE_PAY_TRANSIT_CONCESSION_CATEGORY":       516,
		"GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTIONS":        517,
		"GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTION_DETAILS": 518,
		"GOOGLE_PAY_TRANSIT_TIME_RESTRICTIONS":         519,
		"GOOGLE_PAY_TRANSIT_OTHER_RESTRICTIONS":        520,
		"GOOGLE_PAY_TRANSIT_RECEIPT_NUMBER":            521,
		"GOOGLE_PAY_TRANSIT_PURCHASE_DATE":             522,
		"GOOGLE_PAY_TRANSIT_ACCOUNT_ID":                523,
		"GOOGLE_PAY_TRANSIT_CONFIRMATION_CODE":         524,
		"GOOGLE_PAY_TRANSIT_FACE_VALUE":                525,
		"GOOGLE_PAY_TRANSIT_PURCHASE_PRICE":            526,
		"GOOGLE_PAY_TRANSIT_DISCOUNT_MESSAGE":          527,
		"GOOGLE_PAY_TEXT_MODULE":                       1000,
		"GOOGLE_PAY_ISSUER_NAME":                       1001,
		"GOOGLE_PAY_STATIC_TEXT_MODULE":                1002,
	}
)

func (x GooglePayField) Enum() *GooglePayField {
	p := new(GooglePayField)
	*p = x
	return p
}

func (x GooglePayField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GooglePayField) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[13].Descriptor()
}

func (GooglePayField) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[13]
}

func (x GooglePayField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GooglePayField.Descriptor instead.
func (GooglePayField) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{13}
}

type PasswordType int32

const (
	PasswordType_PASSWORD_TYPE_DO_NOT_USE    PasswordType = 0
	PasswordType_PASSWORD_TYPE_NO_PASSWORD   PasswordType = 1
	PasswordType_PASSWORD_TYPE_PASSWORD_ONLY PasswordType = 2
)

// Enum value maps for PasswordType.
var (
	PasswordType_name = map[int32]string{
		0: "PASSWORD_TYPE_DO_NOT_USE",
		1: "PASSWORD_TYPE_NO_PASSWORD",
		2: "PASSWORD_TYPE_PASSWORD_ONLY",
	}
	PasswordType_value = map[string]int32{
		"PASSWORD_TYPE_DO_NOT_USE":    0,
		"PASSWORD_TYPE_NO_PASSWORD":   1,
		"PASSWORD_TYPE_PASSWORD_ONLY": 2,
	}
)

func (x PasswordType) Enum() *PasswordType {
	p := new(PasswordType)
	*p = x
	return p
}

func (x PasswordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordType) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[14].Descriptor()
}

func (PasswordType) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[14]
}

func (x PasswordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasswordType.Descriptor instead.
func (PasswordType) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{14}
}

type SupportedAndroidWallet int32

const (
	// For legacy support, a setting of do not use will default to WalletPasses.
	SupportedAndroidWallet_ANDROID_WALLET_DO_NOT_USE SupportedAndroidWallet = 0
	// Android PassWallet https://passwallet.net.
	SupportedAndroidWallet_ANDROID_WALLET_PASSWALLET SupportedAndroidWallet = 1
	// WalletPasses https://walletpasses.io (Default).
	SupportedAndroidWallet_ANDROID_WALLET_WALLETPASSES SupportedAndroidWallet = 2
)

// Enum value maps for SupportedAndroidWallet.
var (
	SupportedAndroidWallet_name = map[int32]string{
		0: "ANDROID_WALLET_DO_NOT_USE",
		1: "ANDROID_WALLET_PASSWALLET",
		2: "ANDROID_WALLET_WALLETPASSES",
	}
	SupportedAndroidWallet_value = map[string]int32{
		"ANDROID_WALLET_DO_NOT_USE":   0,
		"ANDROID_WALLET_PASSWALLET":   1,
		"ANDROID_WALLET_WALLETPASSES": 2,
	}
)

func (x SupportedAndroidWallet) Enum() *SupportedAndroidWallet {
	p := new(SupportedAndroidWallet)
	*p = x
	return p
}

func (x SupportedAndroidWallet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupportedAndroidWallet) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[15].Descriptor()
}

func (SupportedAndroidWallet) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[15]
}

func (x SupportedAndroidWallet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupportedAndroidWallet.Descriptor instead.
func (SupportedAndroidWallet) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{15}
}

// Use to indicate what personal information to request for an Apple Wallet personalized pass.
type PersonalizedDataField int32

const (
	PersonalizedDataField_PERSONALIZE_DO_NOT_USE    PersonalizedDataField = 0
	PersonalizedDataField_PERSONALIZE_NAME          PersonalizedDataField = 1
	PersonalizedDataField_PERSONALIZE_EMAIL_ADDRESS PersonalizedDataField = 2
	PersonalizedDataField_PERSONALIZE_PHONE_NUMBER  PersonalizedDataField = 4
	PersonalizedDataField_PERSONALIZE_POSTAL_CODE   PersonalizedDataField = 8
)

// Enum value maps for PersonalizedDataField.
var (
	PersonalizedDataField_name = map[int32]string{
		0: "PERSONALIZE_DO_NOT_USE",
		1: "PERSONALIZE_NAME",
		2: "PERSONALIZE_EMAIL_ADDRESS",
		4: "PERSONALIZE_PHONE_NUMBER",
		8: "PERSONALIZE_POSTAL_CODE",
	}
	PersonalizedDataField_value = map[string]int32{
		"PERSONALIZE_DO_NOT_USE":    0,
		"PERSONALIZE_NAME":          1,
		"PERSONALIZE_EMAIL_ADDRESS": 2,
		"PERSONALIZE_PHONE_NUMBER":  4,
		"PERSONALIZE_POSTAL_CODE":   8,
	}
)

func (x PersonalizedDataField) Enum() *PersonalizedDataField {
	p := new(PersonalizedDataField)
	*p = x
	return p
}

func (x PersonalizedDataField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PersonalizedDataField) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[16].Descriptor()
}

func (PersonalizedDataField) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[16]
}

func (x PersonalizedDataField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PersonalizedDataField.Descriptor instead.
func (PersonalizedDataField) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{16}
}

type ScreenshotEligibility int32

const (
	ScreenshotEligibility_SCREENSHOT_ELIGIBILITY_UNSPECIFIED ScreenshotEligibility = 0
	ScreenshotEligibility_ELIGIBLE                           ScreenshotEligibility = 1
	ScreenshotEligibility_INELIGIBLE                         ScreenshotEligibility = 2
)

// Enum value maps for ScreenshotEligibility.
var (
	ScreenshotEligibility_name = map[int32]string{
		0: "SCREENSHOT_ELIGIBILITY_UNSPECIFIED",
		1: "ELIGIBLE",
		2: "INELIGIBLE",
	}
	ScreenshotEligibility_value = map[string]int32{
		"SCREENSHOT_ELIGIBILITY_UNSPECIFIED": 0,
		"ELIGIBLE":                           1,
		"INELIGIBLE":                         2,
	}
)

func (x ScreenshotEligibility) Enum() *ScreenshotEligibility {
	p := new(ScreenshotEligibility)
	*p = x
	return p
}

func (x ScreenshotEligibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScreenshotEligibility) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_template_proto_enumTypes[17].Descriptor()
}

func (ScreenshotEligibility) Type() protoreflect.EnumType {
	return &file_io_common_template_proto_enumTypes[17]
}

func (x ScreenshotEligibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScreenshotEligibility.Descriptor instead.
func (ScreenshotEligibility) EnumDescriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{17}
}

// Sets value and display text for drop-down item.
type SelectOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The order of option in the select list. Option with listPriority 1 will be rendered at the top of drop-down list.
	ListPriority uint32 `protobuf:"varint,1,opt,name=listPriority,proto3" json:"listPriority,omitempty"`
	// Display text on the drop-down list (e.g. Hongkong and Shanghai Banking Corporation).
	TextLabel          string           `protobuf:"bytes,2,opt,name=textLabel,proto3" json:"textLabel,omitempty"`
	LocalizedTextLabel *LocalizedString `protobuf:"bytes,3,opt,name=localizedTextLabel,proto3" json:"localizedTextLabel,omitempty"`
	// Value of selected text. (e.g. HSBC)
	Value         string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectOption) Reset() {
	*x = SelectOption{}
	mi := &file_io_common_template_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectOption) ProtoMessage() {}

func (x *SelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectOption.ProtoReflect.Descriptor instead.
func (*SelectOption) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{0}
}

func (x *SelectOption) GetListPriority() uint32 {
	if x != nil {
		return x.ListPriority
	}
	return 0
}

func (x *SelectOption) GetTextLabel() string {
	if x != nil {
		return x.TextLabel
	}
	return ""
}

func (x *SelectOption) GetLocalizedTextLabel() *LocalizedString {
	if x != nil {
		return x.LocalizedTextLabel
	}
	return nil
}

func (x *SelectOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TOPTParameters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key used to generate the TOPT, provided as a Base16 string
	// @tag: validateCreate:"hexadecimal,len=40,required" validateUpdate:"hexadecimal,len=40,required"
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" validateCreate:"hexadecimal,len=40,required" validateUpdate:"hexadecimal,len=40,required"`
	// Time in milliseconds between key generation.
	// @tag: validateCreate:"numeric,required" validateUpdate:"numeric,required"
	Milliseconds uint32 `protobuf:"varint,2,opt,name=milliseconds,proto3" json:"milliseconds,omitempty" validateCreate:"numeric,required" validateUpdate:"numeric,required"`
	// String to encode in the barcode. The string {{timestamp}} will be replaced with the timestamp of the code and {{totp}} will be replaced by the TOTP value.  E.g. `${pid}-myCustomText-{{timestamp}}-{{totp}}`
	// @tag: validateCreate:"required" validateUpdate:"required"
	ValueString string `protobuf:"bytes,3,opt,name=valueString,proto3" json:"valueString,omitempty" validateCreate:"required" validateUpdate:"required"`
	// NUmber of digits for the OTP
	// @tag: validateCreate:"numeric,required" validateUpdate:"numeric,required"
	Digits        uint32 `protobuf:"varint,4,opt,name=digits,proto3" json:"digits,omitempty" validateCreate:"numeric,required" validateUpdate:"numeric,required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TOPTParameters) Reset() {
	*x = TOPTParameters{}
	mi := &file_io_common_template_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TOPTParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOPTParameters) ProtoMessage() {}

func (x *TOPTParameters) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOPTParameters.ProtoReflect.Descriptor instead.
func (*TOPTParameters) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{1}
}

func (x *TOPTParameters) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TOPTParameters) GetMilliseconds() uint32 {
	if x != nil {
		return x.Milliseconds
	}
	return 0
}

func (x *TOPTParameters) GetValueString() string {
	if x != nil {
		return x.ValueString
	}
	return ""
}

func (x *TOPTParameters) GetDigits() uint32 {
	if x != nil {
		return x.Digits
	}
	return 0
}

type Barcode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateCreate:"barcodePayload", validateUpdate:"barcodePayload"
	// Data to be encoded into the barcode.
	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty" validateCreate:"barcodePayload" validateUpdate:"barcodePayload"`
	// @tag: validateCreate:"required", validateUpdate:"required"
	Format BarcodeType `protobuf:"varint,2,opt,name=format,proto3,enum=io.BarcodeType" json:"format,omitempty" validateCreate:"required" validateUpdate:"required"`
	// Text to display underneath the barcode.
	AltText          string           `protobuf:"bytes,3,opt,name=altText,proto3" json:"altText,omitempty"`
	LocalizedAltText *LocalizedString `protobuf:"bytes,4,opt,name=localizedAltText,proto3" json:"localizedAltText,omitempty"`
	MessageEncoding  string           `protobuf:"bytes,5,opt,name=messageEncoding,proto3" json:"messageEncoding,omitempty"`
	// Set to true if you do not wish Google Pay passes to display the security shimmer animation.
	SuppressSecurity bool `protobuf:"varint,6,opt,name=suppressSecurity,proto3" json:"suppressSecurity,omitempty"`
	// Set to true to enable TOTP rotating barcode support to Google Pay Passes.
	RotatingBarcode bool `protobuf:"varint,7,opt,name=rotatingBarcode,proto3" json:"rotatingBarcode,omitempty"`
	// Optional TOTP parameters. Note that if custom parameters are provided, the PassKit Pass Scanner App will not be able to validate the pass and the user will be responsible for implementing their own validation.
	// @tag: validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"
	TotpParameters *TOPTParameters `protobuf:"bytes,8,opt,name=totpParameters,proto3" json:"totpParameters,omitempty" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Barcode) Reset() {
	*x = Barcode{}
	mi := &file_io_common_template_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Barcode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Barcode) ProtoMessage() {}

func (x *Barcode) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Barcode.ProtoReflect.Descriptor instead.
func (*Barcode) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{2}
}

func (x *Barcode) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Barcode) GetFormat() BarcodeType {
	if x != nil {
		return x.Format
	}
	return BarcodeType_BARCODE_TYPE_DO_NOT_USE
}

func (x *Barcode) GetAltText() string {
	if x != nil {
		return x.AltText
	}
	return ""
}

func (x *Barcode) GetLocalizedAltText() *LocalizedString {
	if x != nil {
		return x.LocalizedAltText
	}
	return nil
}

func (x *Barcode) GetMessageEncoding() string {
	if x != nil {
		return x.MessageEncoding
	}
	return ""
}

func (x *Barcode) GetSuppressSecurity() bool {
	if x != nil {
		return x.SuppressSecurity
	}
	return false
}

func (x *Barcode) GetRotatingBarcode() bool {
	if x != nil {
		return x.RotatingBarcode
	}
	return false
}

func (x *Barcode) GetTotpParameters() *TOPTParameters {
	if x != nil {
		return x.TotpParameters
	}
	return nil
}

// Pass Template holds design and data elements for Apple Wallet and Google Pay passes.
type PassTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This design id (not writable).
	// @tag: validateGeneric:"required" validateCreate:"-" validateUpdate:"required"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required" validateCreate:"-" validateUpdate:"required"`
	// A name to allow for searching within the console.
	// @tag: validate:"required"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" validate:"required"`
	// The protocol for the design.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	Protocol PassProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// The version of the protocol design. (for protocols that support more than one pass style).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Revision uint32 `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// This defines the template’s default language. For a list of supported languages please see the Language List.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	DefaultLanguage LanguageCode `protobuf:"varint,5,opt,name=defaultLanguage,proto3,enum=io.LanguageCode" json:"defaultLanguage,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// This is the name of the company or organisation issuing the pass.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	OrganizationName string `protobuf:"bytes,6,opt,name=organizationName,proto3" json:"organizationName,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Different language translations for the name of company or organisation issuing the pass.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedOrganizationName *LocalizedString `protobuf:"bytes,7,opt,name=localizedOrganizationName,proto3" json:"localizedOrganizationName,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// This is your campaign description. The description will be displayed at the top on the back of the Apple pass, and when customers are downloading their pass. This value should detail the campaign offers and customer benefits.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"required"`
	// Different language translations for the campaign description.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LocalizedDescription *LocalizedString `protobuf:"bytes,9,opt,name=localizedDescription,proto3" json:"localizedDescription,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// This holds pass fields for both front and back of the pass and settings of rendering pass fields and data collection page.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Data *Data `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Image assets hold image data.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	//
	// Types that are valid to be assigned to ImageAssets:
	//
	//	*PassTemplate_ImageIds
	//	*PassTemplate_Images
	ImageAssets isPassTemplate_ImageAssets `protobuf_oneof:"ImageAssets" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Colours take a hex code input.  A '#' prefix is optional. Not all colors have effect on each design.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Colors *Colors `protobuf:"bytes,13,opt,name=colors,proto3" json:"colors,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Barcode *Barcode `protobuf:"bytes,14,opt,name=barcode,proto3" json:"barcode,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// NFC enabled passes will depend on client certificate capabilities. Contact support for more information.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	NfcEnabled *NFC `protobuf:"bytes,15,opt,name=nfcEnabled,proto3" json:"nfcEnabled,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// When set controls how this pass is shared. For Apple wallet this uses the built in sharing functionality. For Google Pay, a sharing link will be added to the pass.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Sharing *Sharing `protobuf:"bytes,16,opt,name=sharing,proto3" json:"sharing,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	AppleWalletSettings *AppleWalletSettings `protobuf:"bytes,17,opt,name=appleWalletSettings,proto3" json:"appleWalletSettings,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	GooglePaySettings *GooglePaySettings `protobuf:"bytes,18,opt,name=googlePaySettings,proto3" json:"googlePaySettings,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// A list of up to 10 GPS locations where this pass should be presented on the lock-screen.
	// @tag: validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"
	Locations []*GPSLocation `protobuf:"bytes,19,rep,name=locations,proto3" json:"locations,omitempty" validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"`
	// A list of up to 10 Beacon UUIDs that should trigger the pass to be presented on the lock-screen.
	// @tag: validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"
	Beacons []*Beacon `protobuf:"bytes,20,rep,name=beacons,proto3" json:"beacons,omitempty" validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"`
	// A list of links to be shown on each pass.
	// @tag: validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"
	Links []*Link `protobuf:"bytes,21,rep,name=links,proto3" json:"links,omitempty" validateGeneric:"omitempty,dive" validateCreate:"omitempty,dive" validateUpdate:"omitempty,dive"`
	// Timezone string in IANA timezone format. If not provided defaults to Etc/UTC.
	// @tag: validateGeneric:"omitempty,ianaTimeZone" validateCreate:"required,ianaTimeZone" validateUpdate:"required,ianaTimeZone"
	Timezone       string          `protobuf:"bytes,22,opt,name=timezone,proto3" json:"timezone,omitempty" validateGeneric:"omitempty,ianaTimeZone" validateCreate:"required,ianaTimeZone" validateUpdate:"required,ianaTimeZone"`
	ExpirySettings *ExpirySettings `protobuf:"bytes,23,opt,name=expirySettings,proto3" json:"expirySettings,omitempty"`
	// Optional settings that override default localizations and Android experience.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	LandingPageSettings *LandingPageSettings `protobuf:"bytes,24,opt,name=landingPageSettings,proto3" json:"landingPageSettings,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PassTemplate) Reset() {
	*x = PassTemplate{}
	mi := &file_io_common_template_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassTemplate) ProtoMessage() {}

func (x *PassTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassTemplate.ProtoReflect.Descriptor instead.
func (*PassTemplate) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{3}
}

func (x *PassTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PassTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PassTemplate) GetProtocol() PassProtocol {
	if x != nil {
		return x.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

func (x *PassTemplate) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *PassTemplate) GetDefaultLanguage() LanguageCode {
	if x != nil {
		return x.DefaultLanguage
	}
	return LanguageCode_EN
}

func (x *PassTemplate) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *PassTemplate) GetLocalizedOrganizationName() *LocalizedString {
	if x != nil {
		return x.LocalizedOrganizationName
	}
	return nil
}

func (x *PassTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PassTemplate) GetLocalizedDescription() *LocalizedString {
	if x != nil {
		return x.LocalizedDescription
	}
	return nil
}

func (x *PassTemplate) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PassTemplate) GetImageAssets() isPassTemplate_ImageAssets {
	if x != nil {
		return x.ImageAssets
	}
	return nil
}

func (x *PassTemplate) GetImageIds() *ImageIds {
	if x != nil {
		if x, ok := x.ImageAssets.(*PassTemplate_ImageIds); ok {
			return x.ImageIds
		}
	}
	return nil
}

func (x *PassTemplate) GetImages() *ImageData {
	if x != nil {
		if x, ok := x.ImageAssets.(*PassTemplate_Images); ok {
			return x.Images
		}
	}
	return nil
}

func (x *PassTemplate) GetColors() *Colors {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *PassTemplate) GetBarcode() *Barcode {
	if x != nil {
		return x.Barcode
	}
	return nil
}

func (x *PassTemplate) GetNfcEnabled() *NFC {
	if x != nil {
		return x.NfcEnabled
	}
	return nil
}

func (x *PassTemplate) GetSharing() *Sharing {
	if x != nil {
		return x.Sharing
	}
	return nil
}

func (x *PassTemplate) GetAppleWalletSettings() *AppleWalletSettings {
	if x != nil {
		return x.AppleWalletSettings
	}
	return nil
}

func (x *PassTemplate) GetGooglePaySettings() *GooglePaySettings {
	if x != nil {
		return x.GooglePaySettings
	}
	return nil
}

func (x *PassTemplate) GetLocations() []*GPSLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *PassTemplate) GetBeacons() []*Beacon {
	if x != nil {
		return x.Beacons
	}
	return nil
}

func (x *PassTemplate) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *PassTemplate) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *PassTemplate) GetExpirySettings() *ExpirySettings {
	if x != nil {
		return x.ExpirySettings
	}
	return nil
}

func (x *PassTemplate) GetLandingPageSettings() *LandingPageSettings {
	if x != nil {
		return x.LandingPageSettings
	}
	return nil
}

type isPassTemplate_ImageAssets interface {
	isPassTemplate_ImageAssets()
}

type PassTemplate_ImageIds struct {
	// Image data defined by image ids.
	ImageIds *ImageIds `protobuf:"bytes,11,opt,name=imageIds,proto3,oneof"`
}

type PassTemplate_Images struct {
	// Image data defined as image object.
	Images *ImageData `protobuf:"bytes,12,opt,name=images,proto3,oneof"`
}

func (*PassTemplate_ImageIds) isPassTemplate_ImageAssets() {}

func (*PassTemplate_Images) isPassTemplate_ImageAssets() {}

// Pass settings only for Apple Wallet.
type AppleWalletSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pass type
	PassType ApplePassType `protobuf:"varint,1,opt,name=passType,proto3,enum=io.ApplePassType" json:"passType,omitempty"`
	// Custom information for companion apps. This data is not displayed to the user on the pass. This data needs to be a valid JSON object and is passed to the companion app when it launches from the pass. For example, a pass for a cafe could include information about the user’s favorite drink and sandwich in a machine-readable form for the companion app to read, making it easy to place an order for "the usual" from the app.
	// @tag: validateGeneric:"omitempty,json" validateCreate:"omitempty,json" validateUpdate:"omitempty,json"
	UserInfo string `protobuf:"bytes,2,opt,name=userInfo,proto3" json:"userInfo,omitempty" validateGeneric:"omitempty,json" validateCreate:"omitempty,json" validateUpdate:"omitempty,json"`
	// This is used to specify a deep link into the app displayed on the back of the Apple Wallet pass (the app is chosen from the associatedStoreIdentifiers). If the app supports deep linking, you can use this url to go to a specific point within the app when the link is clicked.
	AppLaunchUrl string `protobuf:"bytes,3,opt,name=appLaunchUrl,proto3" json:"appLaunchUrl,omitempty"`
	// Deprecated - use appStoreIdentifiers. A list of iTunes Store item identifiers for the associated apps. Only one item in the list is used — the first item identifier for an app compatible with the user's App Store account and device (hardware/iOS version). If the app is not installed, the link opens the App Store and shows the app. If the app is already installed, the link launches the app.
	AssociatedStoreIdentifiers []uint32 `protobuf:"varint,4,rep,packed,name=associatedStoreIdentifiers,proto3" json:"associatedStoreIdentifiers,omitempty"`
	// GPS lock screen messages will show at the lower of max distance and the pass default(unpublished) value.
	MaxDistance uint32 `protobuf:"varint,5,opt,name=maxDistance,proto3" json:"maxDistance,omitempty"`
	// List of country codes for the stores of the associated apps. This is required to render the pass correctly in the designer.
	AppStoreCountries  []string    `protobuf:"bytes,6,rep,name=appStoreCountries,proto3" json:"appStoreCountries,omitempty"`
	TransitType        TransitType `protobuf:"varint,7,opt,name=transitType,proto3,enum=io.TransitType" json:"transitType,omitempty"`
	GroupingIdentifier string      `protobuf:"bytes,8,opt,name=groupingIdentifier,proto3" json:"groupingIdentifier,omitempty"`
	// Personal data requested for an Apple Wallet Pass (Requires Apple to whitelist your certificate for this service).
	PersonalizationDetails *PersonalizationDetails `protobuf:"bytes,9,opt,name=personalizationDetails,proto3" json:"personalizationDetails,omitempty"`
	// A list of iTunes Store item identifiers for the associated apps. Only one item in the list is used — the first item identifier for an app compatible with the user's App Store account and device (hardware/iOS version). If the app is not installed, the link opens the App Store and shows the app. If the app is already installed, the link launches the app.
	AppStoreIdentifiers []uint64 `protobuf:"varint,10,rep,packed,name=appStoreIdentifiers,proto3" json:"appStoreIdentifiers,omitempty"`
	// Used to indicate if the poster event ticket style should be used.  Requires an NFC certificate and iCloud binding.
	PosterTicketStyle bool `protobuf:"varint,11,opt,name=posterTicketStyle,proto3" json:"posterTicketStyle,omitempty"`
	// Used to turn off the top gradient of event poster tickets.
	SuppressHeaderDarkening bool `protobuf:"varint,12,opt,name=suppressHeaderDarkening,proto3" json:"suppressHeaderDarkening,omitempty"`
	// Indicates whether the pass faces should automatically determine the foreground/label colors from the background image, overwriting the set foreground/label colors.
	UseAutomaticColors bool `protobuf:"varint,13,opt,name=useAutomaticColors,proto3" json:"useAutomaticColors,omitempty"`
	// Text to be used in the place of, or in addition to a logo on Apple passes.
	LogoText string `protobuf:"bytes,14,opt,name=logoText,proto3" json:"logoText,omitempty"`
	// If set to true, time components of an Apple poster Event Ticket start/end date will not be shown on the front of the pass.
	IgnoreTimeComponents bool `protobuf:"varint,15,opt,name=ignoreTimeComponents,proto3" json:"ignoreTimeComponents,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AppleWalletSettings) Reset() {
	*x = AppleWalletSettings{}
	mi := &file_io_common_template_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppleWalletSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppleWalletSettings) ProtoMessage() {}

func (x *AppleWalletSettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppleWalletSettings.ProtoReflect.Descriptor instead.
func (*AppleWalletSettings) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{4}
}

func (x *AppleWalletSettings) GetPassType() ApplePassType {
	if x != nil {
		return x.PassType
	}
	return ApplePassType_APPLE_NOT_SUPPORTED
}

func (x *AppleWalletSettings) GetUserInfo() string {
	if x != nil {
		return x.UserInfo
	}
	return ""
}

func (x *AppleWalletSettings) GetAppLaunchUrl() string {
	if x != nil {
		return x.AppLaunchUrl
	}
	return ""
}

func (x *AppleWalletSettings) GetAssociatedStoreIdentifiers() []uint32 {
	if x != nil {
		return x.AssociatedStoreIdentifiers
	}
	return nil
}

func (x *AppleWalletSettings) GetMaxDistance() uint32 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

func (x *AppleWalletSettings) GetAppStoreCountries() []string {
	if x != nil {
		return x.AppStoreCountries
	}
	return nil
}

func (x *AppleWalletSettings) GetTransitType() TransitType {
	if x != nil {
		return x.TransitType
	}
	return TransitType_TRANSIT_TYPE_DO_NOT_USE
}

func (x *AppleWalletSettings) GetGroupingIdentifier() string {
	if x != nil {
		return x.GroupingIdentifier
	}
	return ""
}

func (x *AppleWalletSettings) GetPersonalizationDetails() *PersonalizationDetails {
	if x != nil {
		return x.PersonalizationDetails
	}
	return nil
}

func (x *AppleWalletSettings) GetAppStoreIdentifiers() []uint64 {
	if x != nil {
		return x.AppStoreIdentifiers
	}
	return nil
}

func (x *AppleWalletSettings) GetPosterTicketStyle() bool {
	if x != nil {
		return x.PosterTicketStyle
	}
	return false
}

func (x *AppleWalletSettings) GetSuppressHeaderDarkening() bool {
	if x != nil {
		return x.SuppressHeaderDarkening
	}
	return false
}

func (x *AppleWalletSettings) GetUseAutomaticColors() bool {
	if x != nil {
		return x.UseAutomaticColors
	}
	return false
}

func (x *AppleWalletSettings) GetLogoText() string {
	if x != nil {
		return x.LogoText
	}
	return ""
}

func (x *AppleWalletSettings) GetIgnoreTimeComponents() bool {
	if x != nil {
		return x.IgnoreTimeComponents
	}
	return false
}

type PersonalizationDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A brief description of the program for a pass that appears on the signup sheet, under the personalization logo.
	// @tag: validate:"required"
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty" validate:"required"`
	// An array of the required validation items. [PERSONALIZE_NAME, PERSONALIZE_EMAIL_ADDRESS, PERSONALIZE_PHONE_NUMBER, PERSONALIZE_POSTAL_CODE]
	// @tag: validate:"required,min=1"
	RequiredPersonalizationData []PersonalizedDataField `protobuf:"varint,2,rep,packed,name=requiredPersonalizationData,proto3,enum=io.PersonalizedDataField" json:"requiredPersonalizationData,omitempty" validate:"required,min=1"`
	// A description of the program’s terms and conditions. This string can contain HTML link tags to external content.
	// If present, this information appears after the user enters their personal information and taps the Next button. The user then has the option to agree to the terms, or to cancel the sign-up process.
	TermsAndConditions string `protobuf:"bytes,3,opt,name=termsAndConditions,proto3" json:"termsAndConditions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PersonalizationDetails) Reset() {
	*x = PersonalizationDetails{}
	mi := &file_io_common_template_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonalizationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalizationDetails) ProtoMessage() {}

func (x *PersonalizationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalizationDetails.ProtoReflect.Descriptor instead.
func (*PersonalizationDetails) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{5}
}

func (x *PersonalizationDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PersonalizationDetails) GetRequiredPersonalizationData() []PersonalizedDataField {
	if x != nil {
		return x.RequiredPersonalizationData
	}
	return nil
}

func (x *PersonalizationDetails) GetTermsAndConditions() string {
	if x != nil {
		return x.TermsAndConditions
	}
	return ""
}

// Pass settings only for Google Pay.
type GooglePaySettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pass type
	PassType GooglePayPassType `protobuf:"varint,1,opt,name=passType,proto3,enum=io.GooglePayPassType" json:"passType,omitempty"`
	// Android App details
	AndroidApp *GooglePayApp `protobuf:"bytes,2,opt,name=androidApp,proto3" json:"androidApp,omitempty"`
	// IOS app details
	IosApp *GooglePayApp `protobuf:"bytes,3,opt,name=iosApp,proto3" json:"iosApp,omitempty"`
	// Web app details
	WebApp *GooglePayApp `protobuf:"bytes,4,opt,name=webApp,proto3" json:"webApp,omitempty"`
	// Custom template (takes a JSON ClassTemplateInfo object https://developers.google.com/pay/passes/rest/v1/ClassTemplateInfo)
	ClassTemplateInfo string `protobuf:"bytes,5,opt,name=classTemplateInfo,proto3" json:"classTemplateInfo,omitempty"`
	// Override template background color
	BackgroundColor string `protobuf:"bytes,6,opt,name=backgroundColor,proto3" json:"backgroundColor,omitempty"`
	// The pass localisation will be restricted to languages in this list. Currently only available to Boarding Passes and restricted to a single language. Google are working on supporting multiple overrides and we will update this documentation once multiple languages are available.
	LanguageOverrides []LanguageCode `protobuf:"varint,7,rep,packed,name=languageOverrides,proto3,enum=io.LanguageCode" json:"languageOverrides,omitempty"`
	// Specifies if the pass holder can take a screenshot of the pass.
	ScreenshotEligibility ScreenshotEligibility `protobuf:"varint,8,opt,name=screenshotEligibility,proto3,enum=io.ScreenshotEligibility" json:"screenshotEligibility,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GooglePaySettings) Reset() {
	*x = GooglePaySettings{}
	mi := &file_io_common_template_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GooglePaySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GooglePaySettings) ProtoMessage() {}

func (x *GooglePaySettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GooglePaySettings.ProtoReflect.Descriptor instead.
func (*GooglePaySettings) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{6}
}

func (x *GooglePaySettings) GetPassType() GooglePayPassType {
	if x != nil {
		return x.PassType
	}
	return GooglePayPassType_GOOGLE_PAY_NOT_SUPPORTED
}

func (x *GooglePaySettings) GetAndroidApp() *GooglePayApp {
	if x != nil {
		return x.AndroidApp
	}
	return nil
}

func (x *GooglePaySettings) GetIosApp() *GooglePayApp {
	if x != nil {
		return x.IosApp
	}
	return nil
}

func (x *GooglePaySettings) GetWebApp() *GooglePayApp {
	if x != nil {
		return x.WebApp
	}
	return nil
}

func (x *GooglePaySettings) GetClassTemplateInfo() string {
	if x != nil {
		return x.ClassTemplateInfo
	}
	return ""
}

func (x *GooglePaySettings) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *GooglePaySettings) GetLanguageOverrides() []LanguageCode {
	if x != nil {
		return x.LanguageOverrides
	}
	return nil
}

func (x *GooglePaySettings) GetScreenshotEligibility() ScreenshotEligibility {
	if x != nil {
		return x.ScreenshotEligibility
	}
	return ScreenshotEligibility_SCREENSHOT_ELIGIBILITY_UNSPECIFIED
}

// Settings to render an app on the head of a pass. Apps can be Android, iOS or Web.
type GooglePayApp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Link to an associated app on the Google Play Store
	Url *Url `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Localized title of the Android App
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Title of the Android App
	LocalizedTitle *LocalizedString `protobuf:"bytes,3,opt,name=localizedTitle,proto3" json:"localizedTitle,omitempty"`
	// Description of the Android App
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Localized description of the Android App
	LocalizedDescription *LocalizedString `protobuf:"bytes,5,opt,name=localizedDescription,proto3" json:"localizedDescription,omitempty"`
	// Clickable link description of the Android App
	UrlDescription string `protobuf:"bytes,6,opt,name=urlDescription,proto3" json:"urlDescription,omitempty"`
	// Localized clickable link description of the Android App
	LocalizedUrlDescription *LocalizedString `protobuf:"bytes,7,opt,name=localizedUrlDescription,proto3" json:"localizedUrlDescription,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GooglePayApp) Reset() {
	*x = GooglePayApp{}
	mi := &file_io_common_template_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GooglePayApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GooglePayApp) ProtoMessage() {}

func (x *GooglePayApp) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GooglePayApp.ProtoReflect.Descriptor instead.
func (*GooglePayApp) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{7}
}

func (x *GooglePayApp) GetUrl() *Url {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *GooglePayApp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GooglePayApp) GetLocalizedTitle() *LocalizedString {
	if x != nil {
		return x.LocalizedTitle
	}
	return nil
}

func (x *GooglePayApp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GooglePayApp) GetLocalizedDescription() *LocalizedString {
	if x != nil {
		return x.LocalizedDescription
	}
	return nil
}

func (x *GooglePayApp) GetUrlDescription() string {
	if x != nil {
		return x.UrlDescription
	}
	return ""
}

func (x *GooglePayApp) GetLocalizedUrlDescription() *LocalizedString {
	if x != nil {
		return x.LocalizedUrlDescription
	}
	return nil
}

// This allows you to configure data so that you can save it against each customer record or render it on the pass.
type Data struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This allows you to configure individual data field that is rendered on the customer UI (data collection page and the pass).
	// You can set data field purely for CRM analytics purpose and not show it on the customer UI.
	DataFields []*DataField `protobuf:"bytes,1,rep,name=dataFields,proto3" json:"dataFields,omitempty"`
	// Settings for data collection elements other than form fields. Form fields can be configured in dataFields object.
	DataCollectionPageSettings *DataCollectionPageSettings `protobuf:"bytes,2,opt,name=dataCollectionPageSettings,proto3" json:"dataCollectionPageSettings,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_io_common_template_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{8}
}

func (x *Data) GetDataFields() []*DataField {
	if x != nil {
		return x.DataFields
	}
	return nil
}

func (x *Data) GetDataCollectionPageSettings() *DataCollectionPageSettings {
	if x != nil {
		return x.DataCollectionPageSettings
	}
	return nil
}

type LandingPageSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Array of languages to display on the landing page, if you would like your language to be supported, please contact support.
	LandingLocalizationOverride []LanguageCode `protobuf:"varint,1,rep,packed,name=landingLocalizationOverride,proto3,enum=io.LanguageCode" json:"landingLocalizationOverride,omitempty"`
	// Set to on to present a third party wallet instead of Google Pay as the default option to Android Users.
	PreferThirdPartyAndroidWallet Toggle `protobuf:"varint,2,opt,name=preferThirdPartyAndroidWallet,proto3,enum=io.Toggle" json:"preferThirdPartyAndroidWallet,omitempty"`
	// Preferred Android Wallet.
	PreferredAndroidWallet SupportedAndroidWallet `protobuf:"varint,3,opt,name=preferredAndroidWallet,proto3,enum=io.SupportedAndroidWallet" json:"preferredAndroidWallet,omitempty"`
	// Override landing page text, note that the localized string must contain the template default language, or "EN" - please contact support for dictionary keys and further usage details.
	LocalizedTextOverrides map[string]*LocalizedString `protobuf:"bytes,4,rep,name=localizedTextOverrides,proto3" json:"localizedTextOverrides,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LandingPageSettings) Reset() {
	*x = LandingPageSettings{}
	mi := &file_io_common_template_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LandingPageSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandingPageSettings) ProtoMessage() {}

func (x *LandingPageSettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandingPageSettings.ProtoReflect.Descriptor instead.
func (*LandingPageSettings) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{9}
}

func (x *LandingPageSettings) GetLandingLocalizationOverride() []LanguageCode {
	if x != nil {
		return x.LandingLocalizationOverride
	}
	return nil
}

func (x *LandingPageSettings) GetPreferThirdPartyAndroidWallet() Toggle {
	if x != nil {
		return x.PreferThirdPartyAndroidWallet
	}
	return Toggle_DO_NOT_USE
}

func (x *LandingPageSettings) GetPreferredAndroidWallet() SupportedAndroidWallet {
	if x != nil {
		return x.PreferredAndroidWallet
	}
	return SupportedAndroidWallet_ANDROID_WALLET_DO_NOT_USE
}

func (x *LandingPageSettings) GetLocalizedTextOverrides() map[string]*LocalizedString {
	if x != nil {
		return x.LocalizedTextOverrides
	}
	return nil
}

// This allows you to customize the contents rendered on data collection landing page.
type DataCollectionPageSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Used as title.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Localized title of the page.
	LocalizedTitle *LocalizedString `protobuf:"bytes,2,opt,name=localizedTitle,proto3" json:"localizedTitle,omitempty"`
	// Description of the page.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Localized description of the page.
	LocalizedDescription *LocalizedString `protobuf:"bytes,4,opt,name=localizedDescription,proto3" json:"localizedDescription,omitempty"`
	// This sets text for form submit button on the data collection landing page. Default text is 'Submit'.
	SubmitButtonText          string           `protobuf:"bytes,5,opt,name=submitButtonText,proto3" json:"submitButtonText,omitempty"`
	LocalizedSubmitButtonText *LocalizedString `protobuf:"bytes,6,opt,name=localizedSubmitButtonText,proto3" json:"localizedSubmitButtonText,omitempty"`
	// The text showed to customers when the page is processing new enrolments.
	LoadingText string `protobuf:"bytes,7,opt,name=loadingText,proto3" json:"loadingText,omitempty"`
	// Localized loading text.
	LocalizedLoadingText *LocalizedString `protobuf:"bytes,8,opt,name=localizedLoadingText,proto3" json:"localizedLoadingText,omitempty"`
	// Thank you text to display on the standard issue page. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.
	ThankYouText string `protobuf:"bytes,9,opt,name=thankYouText,proto3" json:"thankYouText,omitempty"`
	// Localized thank you text. Can contain any of the fields from fields array: ${DISPLAY_NAME}, ${EMAIL_ADDRESS}, etc.
	LocalizedThankYouText *LocalizedString `protobuf:"bytes,10,opt,name=localizedThankYouText,proto3" json:"localizedThankYouText,omitempty"`
	// For device size greater than the iPad, the form will be rendered with page background color. Form background color is always set as white.
	PageBackgroundColor string `protobuf:"bytes,11,opt,name=pageBackgroundColor,proto3" json:"pageBackgroundColor,omitempty"`
	// Localized page background color shown if device is greater than the iPad.
	LocalizedPageBackgroundColor *LocalizedString `protobuf:"bytes,12,opt,name=localizedPageBackgroundColor,proto3" json:"localizedPageBackgroundColor,omitempty"`
	// Tracking settings for Facebook Pixel & Google Analytics
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	TrackingSettings *TrackingSettings `protobuf:"bytes,13,opt,name=trackingSettings,proto3" json:"trackingSettings,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The color for submit button text. Default is #ffffff.
	SubmitButtonTextColor string `protobuf:"bytes,14,opt,name=submitButtonTextColor,proto3" json:"submitButtonTextColor,omitempty"`
	// The background color of submit button. Default is #4CAF50 (green).
	SubmitButtonBackgroundColor string `protobuf:"bytes,15,opt,name=submitButtonBackgroundColor,proto3" json:"submitButtonBackgroundColor,omitempty"`
	// Renders above the submit button. Can be used to show T&C link.
	FooterText string `protobuf:"bytes,16,opt,name=footerText,proto3" json:"footerText,omitempty"`
	// Localized footer text.
	LocalizedFooterText *LocalizedString `protobuf:"bytes,17,opt,name=localizedFooterText,proto3" json:"localizedFooterText,omitempty"`
	// Custom css to overwrite on the data collection page.
	CssOverrides string `protobuf:"bytes,18,opt,name=cssOverrides,proto3" json:"cssOverrides,omitempty"`
	// Configuration for password protecting the data collection page
	PasswordSettings *PasswordSettings `protobuf:"bytes,19,opt,name=passwordSettings,proto3" json:"passwordSettings,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DataCollectionPageSettings) Reset() {
	*x = DataCollectionPageSettings{}
	mi := &file_io_common_template_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataCollectionPageSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCollectionPageSettings) ProtoMessage() {}

func (x *DataCollectionPageSettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCollectionPageSettings.ProtoReflect.Descriptor instead.
func (*DataCollectionPageSettings) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{10}
}

func (x *DataCollectionPageSettings) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DataCollectionPageSettings) GetLocalizedTitle() *LocalizedString {
	if x != nil {
		return x.LocalizedTitle
	}
	return nil
}

func (x *DataCollectionPageSettings) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DataCollectionPageSettings) GetLocalizedDescription() *LocalizedString {
	if x != nil {
		return x.LocalizedDescription
	}
	return nil
}

func (x *DataCollectionPageSettings) GetSubmitButtonText() string {
	if x != nil {
		return x.SubmitButtonText
	}
	return ""
}

func (x *DataCollectionPageSettings) GetLocalizedSubmitButtonText() *LocalizedString {
	if x != nil {
		return x.LocalizedSubmitButtonText
	}
	return nil
}

func (x *DataCollectionPageSettings) GetLoadingText() string {
	if x != nil {
		return x.LoadingText
	}
	return ""
}

func (x *DataCollectionPageSettings) GetLocalizedLoadingText() *LocalizedString {
	if x != nil {
		return x.LocalizedLoadingText
	}
	return nil
}

func (x *DataCollectionPageSettings) GetThankYouText() string {
	if x != nil {
		return x.ThankYouText
	}
	return ""
}

func (x *DataCollectionPageSettings) GetLocalizedThankYouText() *LocalizedString {
	if x != nil {
		return x.LocalizedThankYouText
	}
	return nil
}

func (x *DataCollectionPageSettings) GetPageBackgroundColor() string {
	if x != nil {
		return x.PageBackgroundColor
	}
	return ""
}

func (x *DataCollectionPageSettings) GetLocalizedPageBackgroundColor() *LocalizedString {
	if x != nil {
		return x.LocalizedPageBackgroundColor
	}
	return nil
}

func (x *DataCollectionPageSettings) GetTrackingSettings() *TrackingSettings {
	if x != nil {
		return x.TrackingSettings
	}
	return nil
}

func (x *DataCollectionPageSettings) GetSubmitButtonTextColor() string {
	if x != nil {
		return x.SubmitButtonTextColor
	}
	return ""
}

func (x *DataCollectionPageSettings) GetSubmitButtonBackgroundColor() string {
	if x != nil {
		return x.SubmitButtonBackgroundColor
	}
	return ""
}

func (x *DataCollectionPageSettings) GetFooterText() string {
	if x != nil {
		return x.FooterText
	}
	return ""
}

func (x *DataCollectionPageSettings) GetLocalizedFooterText() *LocalizedString {
	if x != nil {
		return x.LocalizedFooterText
	}
	return nil
}

func (x *DataCollectionPageSettings) GetCssOverrides() string {
	if x != nil {
		return x.CssOverrides
	}
	return ""
}

func (x *DataCollectionPageSettings) GetPasswordSettings() *PasswordSettings {
	if x != nil {
		return x.PasswordSettings
	}
	return nil
}

// PasswordSettings holds the settings for the password protection page.
type PasswordSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configures the type of password.
	PasswordType PasswordType `protobuf:"varint,1,opt,name=passwordType,proto3,enum=io.PasswordType" json:"passwordType,omitempty"`
	// Password users need to provide to access the data collection page.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Label text for the password field.
	InputLabelText string `protobuf:"bytes,3,opt,name=inputLabelText,proto3" json:"inputLabelText,omitempty"`
	// Localized input label text.
	LocalizedInputLabelText *LocalizedString `protobuf:"bytes,4,opt,name=localizedInputLabelText,proto3" json:"localizedInputLabelText,omitempty"`
	// Error text to be shown when an incorrect password is shown.
	ErrorText string `protobuf:"bytes,5,opt,name=errorText,proto3" json:"errorText,omitempty"`
	// Localized error text.
	LocalizedErrorText *LocalizedString `protobuf:"bytes,6,opt,name=localizedErrorText,proto3" json:"localizedErrorText,omitempty"`
	// Header text to be displayed above the password input box.
	HeaderText string `protobuf:"bytes,7,opt,name=headerText,proto3" json:"headerText,omitempty"`
	// Localized header text.
	LocalizedHeaderText *LocalizedString `protobuf:"bytes,8,opt,name=localizedHeaderText,proto3" json:"localizedHeaderText,omitempty"`
	// Text for the submit button.
	ButtonText string `protobuf:"bytes,9,opt,name=buttonText,proto3" json:"buttonText,omitempty"`
	// Localized button text.
	LocalizedButtonText *LocalizedString `protobuf:"bytes,10,opt,name=localizedButtonText,proto3" json:"localizedButtonText,omitempty"`
	// Text for the submit button.
	TitleText string `protobuf:"bytes,11,opt,name=titleText,proto3" json:"titleText,omitempty"`
	// Localized button text.
	LocalizedTitleText *LocalizedString `protobuf:"bytes,12,opt,name=localizedTitleText,proto3" json:"localizedTitleText,omitempty"`
	// Setting to auto logout once form has been submitted
	AutoLogoutOnSubmit bool `protobuf:"varint,13,opt,name=autoLogoutOnSubmit,proto3" json:"autoLogoutOnSubmit,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PasswordSettings) Reset() {
	*x = PasswordSettings{}
	mi := &file_io_common_template_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordSettings) ProtoMessage() {}

func (x *PasswordSettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordSettings.ProtoReflect.Descriptor instead.
func (*PasswordSettings) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{11}
}

func (x *PasswordSettings) GetPasswordType() PasswordType {
	if x != nil {
		return x.PasswordType
	}
	return PasswordType_PASSWORD_TYPE_DO_NOT_USE
}

func (x *PasswordSettings) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PasswordSettings) GetInputLabelText() string {
	if x != nil {
		return x.InputLabelText
	}
	return ""
}

func (x *PasswordSettings) GetLocalizedInputLabelText() *LocalizedString {
	if x != nil {
		return x.LocalizedInputLabelText
	}
	return nil
}

func (x *PasswordSettings) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

func (x *PasswordSettings) GetLocalizedErrorText() *LocalizedString {
	if x != nil {
		return x.LocalizedErrorText
	}
	return nil
}

func (x *PasswordSettings) GetHeaderText() string {
	if x != nil {
		return x.HeaderText
	}
	return ""
}

func (x *PasswordSettings) GetLocalizedHeaderText() *LocalizedString {
	if x != nil {
		return x.LocalizedHeaderText
	}
	return nil
}

func (x *PasswordSettings) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *PasswordSettings) GetLocalizedButtonText() *LocalizedString {
	if x != nil {
		return x.LocalizedButtonText
	}
	return nil
}

func (x *PasswordSettings) GetTitleText() string {
	if x != nil {
		return x.TitleText
	}
	return ""
}

func (x *PasswordSettings) GetLocalizedTitleText() *LocalizedString {
	if x != nil {
		return x.LocalizedTitleText
	}
	return nil
}

func (x *PasswordSettings) GetAutoLogoutOnSubmit() bool {
	if x != nil {
		return x.AutoLogoutOnSubmit
	}
	return false
}

type PassTemplateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Template      *PassTemplate          `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	OwnerUsername string                 `protobuf:"bytes,3,opt,name=ownerUsername,proto3" json:"ownerUsername,omitempty"`
	Protocol      PassProtocol           `protobuf:"varint,4,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty"`
	Revision      uint32                 `protobuf:"varint,5,opt,name=revision,proto3" json:"revision,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PassTemplateResponse) Reset() {
	*x = PassTemplateResponse{}
	mi := &file_io_common_template_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassTemplateResponse) ProtoMessage() {}

func (x *PassTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassTemplateResponse.ProtoReflect.Descriptor instead.
func (*PassTemplateResponse) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{12}
}

func (x *PassTemplateResponse) GetTemplate() *PassTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *PassTemplateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PassTemplateResponse) GetOwnerUsername() string {
	if x != nil {
		return x.OwnerUsername
	}
	return ""
}

func (x *PassTemplateResponse) GetProtocol() PassProtocol {
	if x != nil {
		return x.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

func (x *PassTemplateResponse) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *PassTemplateResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PassTemplateResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Colours take a hexcode input.  A '#' prefix is optional.
type Colors struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The background color of the card in hex (e.g. “#ffffff” or "ffffff").
	BackgroundColor string `protobuf:"bytes,1,opt,name=backgroundColor,proto3" json:"backgroundColor,omitempty"`
	// This customises the color of field label of Apple Wallet pass.
	LabelColor string `protobuf:"bytes,2,opt,name=labelColor,proto3" json:"labelColor,omitempty"`
	// This customises the color of field text or value of Apple Wallet pass.
	TextColor string `protobuf:"bytes,3,opt,name=textColor,proto3" json:"textColor,omitempty"`
	// Optional undocumented color for text placed over the strip image in Apple Wallet.
	StripColor string `protobuf:"bytes,4,opt,name=stripColor,proto3" json:"stripColor,omitempty"`
	// Used for Event Poster Tickets (applies to Logo Text, Day, Seating/Entry Values, Venue Name)
	ForegroundColor string `protobuf:"bytes,5,opt,name=foregroundColor,proto3" json:"foregroundColor,omitempty"`
	// Used for Event Poster Tickets
	FooterBackgroundColor string `protobuf:"bytes,6,opt,name=footerBackgroundColor,proto3" json:"footerBackgroundColor,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Colors) Reset() {
	*x = Colors{}
	mi := &file_io_common_template_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Colors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Colors) ProtoMessage() {}

func (x *Colors) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Colors.ProtoReflect.Descriptor instead.
func (*Colors) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{13}
}

func (x *Colors) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *Colors) GetLabelColor() string {
	if x != nil {
		return x.LabelColor
	}
	return ""
}

func (x *Colors) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *Colors) GetStripColor() string {
	if x != nil {
		return x.StripColor
	}
	return ""
}

func (x *Colors) GetForegroundColor() string {
	if x != nil {
		return x.ForegroundColor
	}
	return ""
}

func (x *Colors) GetFooterBackgroundColor() string {
	if x != nil {
		return x.FooterBackgroundColor
	}
	return ""
}

type CopyObjectInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required,uuidCompressedString" validateCreate:"required,uuidCompressedString"
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required,uuidCompressedString" validateCreate:"required,uuidCompressedString"`
	NewName       string `protobuf:"bytes,2,opt,name=newName,proto3" json:"newName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyObjectInput) Reset() {
	*x = CopyObjectInput{}
	mi := &file_io_common_template_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyObjectInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyObjectInput) ProtoMessage() {}

func (x *CopyObjectInput) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyObjectInput.ProtoReflect.Descriptor instead.
func (*CopyObjectInput) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{14}
}

func (x *CopyObjectInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CopyObjectInput) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type NFC struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Enabled bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Leave empty to use your default account keys, or provide the key ID of the public / private keypair you have provided.
	CertificateId string `protobuf:"bytes,2,opt,name=certificateId,proto3" json:"certificateId,omitempty"`
	// A maximum of 64 characters can be provided
	// @tag: validateGeneric:"max=64"
	Payload string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty" validateGeneric:"max=64"`
	// iCloud binding restricts the use of the pass to a single iCloud account. Passes cannot be shared and care should be given when distributing passes to ensure that the pass goes to the correct user.  Users will need to have the iOS 17 or above, and no barcodes will be permitted on the pass.
	ICloudBound bool `protobuf:"varint,4,opt,name=iCloudBound,proto3" json:"iCloudBound,omitempty"`
	// If not provided, a default learn more URL and your organization name will be used.
	BindingInfo   *BindingInfo `protobuf:"bytes,5,opt,name=bindingInfo,proto3" json:"bindingInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NFC) Reset() {
	*x = NFC{}
	mi := &file_io_common_template_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NFC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFC) ProtoMessage() {}

func (x *NFC) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFC.ProtoReflect.Descriptor instead.
func (*NFC) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{15}
}

func (x *NFC) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *NFC) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *NFC) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *NFC) GetICloudBound() bool {
	if x != nil {
		return x.ICloudBound
	}
	return false
}

func (x *NFC) GetBindingInfo() *BindingInfo {
	if x != nil {
		return x.BindingInfo
	}
	return nil
}

type BindingInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name describing the pass that will be displayed in the dialog when the user is required to authenticate.
	DisplayableName string `protobuf:"bytes,1,opt,name=displayableName,proto3" json:"displayableName,omitempty"`
	// If the user encounters an error installing the pass (usually because the pass is already installed in another Apple account), a button will be displayed to link to a web page offering help. If no URL is provided a PassKit URL will be used (https://help.passkit.com/en/articles/10056843-pass-account-binding).
	// @tag: validateGeneric:"omitempty,http_url"
	LearnMoreUrl  string `protobuf:"bytes,2,opt,name=learnMoreUrl,proto3" json:"learnMoreUrl,omitempty" validateGeneric:"omitempty,http_url"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindingInfo) Reset() {
	*x = BindingInfo{}
	mi := &file_io_common_template_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindingInfo) ProtoMessage() {}

func (x *BindingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindingInfo.ProtoReflect.Descriptor instead.
func (*BindingInfo) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{16}
}

func (x *BindingInfo) GetDisplayableName() string {
	if x != nil {
		return x.DisplayableName
	}
	return ""
}

func (x *BindingInfo) GetLearnMoreUrl() string {
	if x != nil {
		return x.LearnMoreUrl
	}
	return ""
}

// Data Field allows you to define set of data you store against each pass holder.
// When data field is created, DataField for Terms & Conditions and optIn will be autogenerated.
type DataField struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If PII key is set as an unique name of the field, collected data will be stored under PII (ex. surname, forename).
	// Else, uniqueName (key) and value are stored under meta object.
	UniqueName string `protobuf:"bytes,1,opt,name=uniqueName,proto3" json:"uniqueName,omitempty"`
	// The template id which this field belongs to.
	TemplateId string    `protobuf:"bytes,2,opt,name=templateId,proto3" json:"templateId,omitempty"`
	FieldType  FieldType `protobuf:"varint,3,opt,name=fieldType,proto3,enum=io.FieldType" json:"fieldType,omitempty"`
	// If set true, the field is mandatory. If set false, the field is optional.
	IsRequired bool `protobuf:"varint,4,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	// A text used for the data collection field label and pass field title.
	Label string `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	// This translates label text into different language.
	LocalizedLabel *LocalizedString `protobuf:"bytes,6,opt,name=localizedLabel,proto3" json:"localizedLabel,omitempty"`
	// Data type you want to receive from your users.
	DataType DataType `protobuf:"varint,7,opt,name=dataType,proto3,enum=io.DataType" json:"dataType,omitempty"`
	// An optional default value or text. E.g. a default set of terms an conditions. Value can contain a protocol field in the format of ${member.externalId}.
	DefaultValue string `protobuf:"bytes,8,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	// This translates default value of the field into different languages.
	LocalizedDefaultValue *LocalizedString `protobuf:"bytes,9,opt,name=localizedDefaultValue,proto3" json:"localizedDefaultValue,omitempty"`
	// A regex which allows you to set set custom validation rules for the data stored.
	Validation string `protobuf:"bytes,10,opt,name=validation,proto3" json:"validation,omitempty"`
	// If false, a defaultValue or listOptions[0] will be used.
	UserCanSetValue bool `protobuf:"varint,11,opt,name=userCanSetValue,proto3" json:"userCanSetValue,omitempty"`
	// The currency code (e.g. USD, EUR) to display with money value if data type is set as currency.
	CurrencyCode                     string                            `protobuf:"bytes,12,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	AppleWalletFieldRenderOptions    *AppleWalletFieldRenderOptions    `protobuf:"bytes,13,opt,name=appleWalletFieldRenderOptions,proto3" json:"appleWalletFieldRenderOptions,omitempty"`
	DataCollectionFieldRenderOptions *DataCollectionFieldRenderOptions `protobuf:"bytes,14,opt,name=dataCollectionFieldRenderOptions,proto3" json:"dataCollectionFieldRenderOptions,omitempty"`
	// Usage: indicates where the field is used (apple render, google render, data collection page)
	Usage                       []UsageType                  `protobuf:"varint,15,rep,packed,name=usage,proto3,enum=io.UsageType" json:"usage,omitempty"`
	GooglePayFieldRenderOptions *GooglePayFieldRenderOptions `protobuf:"bytes,16,opt,name=googlePayFieldRenderOptions,proto3" json:"googlePayFieldRenderOptions,omitempty"`
	// Default international telephone code determines the default country flag of the tel input field (e.g. +852, +44).
	DefaultTelCountryCode string `protobuf:"bytes,17,opt,name=defaultTelCountryCode,proto3" json:"defaultTelCountryCode,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *DataField) Reset() {
	*x = DataField{}
	mi := &file_io_common_template_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataField) ProtoMessage() {}

func (x *DataField) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataField.ProtoReflect.Descriptor instead.
func (*DataField) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{17}
}

func (x *DataField) GetUniqueName() string {
	if x != nil {
		return x.UniqueName
	}
	return ""
}

func (x *DataField) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *DataField) GetFieldType() FieldType {
	if x != nil {
		return x.FieldType
	}
	return FieldType_FIELD_TYPE_NONE
}

func (x *DataField) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *DataField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DataField) GetLocalizedLabel() *LocalizedString {
	if x != nil {
		return x.LocalizedLabel
	}
	return nil
}

func (x *DataField) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_NONE
}

func (x *DataField) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *DataField) GetLocalizedDefaultValue() *LocalizedString {
	if x != nil {
		return x.LocalizedDefaultValue
	}
	return nil
}

func (x *DataField) GetValidation() string {
	if x != nil {
		return x.Validation
	}
	return ""
}

func (x *DataField) GetUserCanSetValue() bool {
	if x != nil {
		return x.UserCanSetValue
	}
	return false
}

func (x *DataField) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *DataField) GetAppleWalletFieldRenderOptions() *AppleWalletFieldRenderOptions {
	if x != nil {
		return x.AppleWalletFieldRenderOptions
	}
	return nil
}

func (x *DataField) GetDataCollectionFieldRenderOptions() *DataCollectionFieldRenderOptions {
	if x != nil {
		return x.DataCollectionFieldRenderOptions
	}
	return nil
}

func (x *DataField) GetUsage() []UsageType {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *DataField) GetGooglePayFieldRenderOptions() *GooglePayFieldRenderOptions {
	if x != nil {
		return x.GooglePayFieldRenderOptions
	}
	return nil
}

func (x *DataField) GetDefaultTelCountryCode() string {
	if x != nil {
		return x.DefaultTelCountryCode
	}
	return ""
}

// Customise how data field is rendered on the front and back of the pass.
type AppleWalletFieldRenderOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Alignment for field title and body text for fields which are displayed on the front of Apple Wallet pass.
	TextAlignment    TextAlignment     `protobuf:"varint,2,opt,name=textAlignment,proto3,enum=io.TextAlignment" json:"textAlignment,omitempty"`
	PositionSettings *PositionSettings `protobuf:"bytes,3,opt,name=positionSettings,proto3" json:"positionSettings,omitempty"`
	// This message will be displayed as a notification when this field is updated. If %@ is used in the change message it will be replaced with the new field value when the message is displayed. E.g. Your registered name has been changed to %@.
	ChangeMessage string `protobuf:"bytes,4,opt,name=changeMessage,proto3" json:"changeMessage,omitempty"`
	// Localize push notification message for different languages.
	LocalizedChangeMessage *LocalizedString `protobuf:"bytes,5,opt,name=localizedChangeMessage,proto3" json:"localizedChangeMessage,omitempty"`
	DateStyle              DateTimeStyle    `protobuf:"varint,6,opt,name=dateStyle,proto3,enum=io.DateTimeStyle" json:"dateStyle,omitempty"`
	TimeStyle              DateTimeStyle    `protobuf:"varint,7,opt,name=timeStyle,proto3,enum=io.DateTimeStyle" json:"timeStyle,omitempty"`
	NumberStyle            NumberStyle      `protobuf:"varint,8,opt,name=numberStyle,proto3,enum=io.NumberStyle" json:"numberStyle,omitempty"`
	SuppressLinkDetection  []LinkDetector   `protobuf:"varint,9,rep,packed,name=suppressLinkDetection,proto3,enum=io.LinkDetector" json:"suppressLinkDetection,omitempty"`
	// Render date and time values in the provided time, rather than switching to the local time of the user.
	IgnoreTimezone bool `protobuf:"varint,10,opt,name=ignoreTimezone,proto3" json:"ignoreTimezone,omitempty"`
	// Render date as a relavent date, rather than an absolute date.
	IsRelativeDate bool `protobuf:"varint,11,opt,name=isRelativeDate,proto3" json:"isRelativeDate,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AppleWalletFieldRenderOptions) Reset() {
	*x = AppleWalletFieldRenderOptions{}
	mi := &file_io_common_template_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppleWalletFieldRenderOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppleWalletFieldRenderOptions) ProtoMessage() {}

func (x *AppleWalletFieldRenderOptions) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppleWalletFieldRenderOptions.ProtoReflect.Descriptor instead.
func (*AppleWalletFieldRenderOptions) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{18}
}

func (x *AppleWalletFieldRenderOptions) GetTextAlignment() TextAlignment {
	if x != nil {
		return x.TextAlignment
	}
	return TextAlignment_TEXT_ALIGNMENT_DO_NOT_USE
}

func (x *AppleWalletFieldRenderOptions) GetPositionSettings() *PositionSettings {
	if x != nil {
		return x.PositionSettings
	}
	return nil
}

func (x *AppleWalletFieldRenderOptions) GetChangeMessage() string {
	if x != nil {
		return x.ChangeMessage
	}
	return ""
}

func (x *AppleWalletFieldRenderOptions) GetLocalizedChangeMessage() *LocalizedString {
	if x != nil {
		return x.LocalizedChangeMessage
	}
	return nil
}

func (x *AppleWalletFieldRenderOptions) GetDateStyle() DateTimeStyle {
	if x != nil {
		return x.DateStyle
	}
	return DateTimeStyle_DATE_TIME_STYLE_DO_NOT_USE
}

func (x *AppleWalletFieldRenderOptions) GetTimeStyle() DateTimeStyle {
	if x != nil {
		return x.TimeStyle
	}
	return DateTimeStyle_DATE_TIME_STYLE_DO_NOT_USE
}

func (x *AppleWalletFieldRenderOptions) GetNumberStyle() NumberStyle {
	if x != nil {
		return x.NumberStyle
	}
	return NumberStyle_NUMBER_STYLE_DO_NOT_USE
}

func (x *AppleWalletFieldRenderOptions) GetSuppressLinkDetection() []LinkDetector {
	if x != nil {
		return x.SuppressLinkDetection
	}
	return nil
}

func (x *AppleWalletFieldRenderOptions) GetIgnoreTimezone() bool {
	if x != nil {
		return x.IgnoreTimezone
	}
	return false
}

func (x *AppleWalletFieldRenderOptions) GetIsRelativeDate() bool {
	if x != nil {
		return x.IsRelativeDate
	}
	return false
}

// Customise how data field is rendered on the front and back of the pass.
type GooglePayFieldRenderOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Determines which field the data will be mapped to on the Google Pay pass. Note, not all Google Pay fields support
	// labels or localization.  Where not supported, label and localization options will be ignored.
	GooglePayPosition GooglePayField `protobuf:"varint,1,opt,name=googlePayPosition,proto3,enum=io.GooglePayField" json:"googlePayPosition,omitempty"`
	// If the field type is a text module, the priority of the text module.
	TextModulePriority uint32 `protobuf:"varint,2,opt,name=textModulePriority,proto3" json:"textModulePriority,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GooglePayFieldRenderOptions) Reset() {
	*x = GooglePayFieldRenderOptions{}
	mi := &file_io_common_template_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GooglePayFieldRenderOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GooglePayFieldRenderOptions) ProtoMessage() {}

func (x *GooglePayFieldRenderOptions) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GooglePayFieldRenderOptions.ProtoReflect.Descriptor instead.
func (*GooglePayFieldRenderOptions) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{19}
}

func (x *GooglePayFieldRenderOptions) GetGooglePayPosition() GooglePayField {
	if x != nil {
		return x.GooglePayPosition
	}
	return GooglePayField_GOOGLE_PAY_FIELD_DO_NOT_USE
}

func (x *GooglePayFieldRenderOptions) GetTextModulePriority() uint32 {
	if x != nil {
		return x.TextModulePriority
	}
	return 0
}

// Sets a position of field on the pass. Priority attribute allows you to change the order of field within the section.
type PositionSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Selects a section to render a field.
	Section FieldSection `protobuf:"varint,1,opt,name=section,proto3,enum=io.FieldSection" json:"section,omitempty"`
	// The field section has certain number of fields they can contain. The priority indicates the position of the section.
	Priority      uint32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionSettings) Reset() {
	*x = PositionSettings{}
	mi := &file_io_common_template_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionSettings) ProtoMessage() {}

func (x *PositionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionSettings.ProtoReflect.Descriptor instead.
func (*PositionSettings) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{20}
}

func (x *PositionSettings) GetSection() FieldSection {
	if x != nil {
		return x.Section
	}
	return FieldSection_FIELD_SECTION_DO_NOT_USE
}

func (x *PositionSettings) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// Customise how data field is rendered on the data collection landing page.
type DataCollectionFieldRenderOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tooltip or helper text displayed under the input field which explains the purpose of field's input.
	HelpText string `protobuf:"bytes,1,opt,name=helpText,proto3" json:"helpText,omitempty"`
	// Tooltip or helper text in localized language.
	LocalizedHelpText *LocalizedString `protobuf:"bytes,2,opt,name=localizedHelpText,proto3" json:"localizedHelpText,omitempty"`
	// Used to change the order of fields displayed on the data collection landing page.
	DisplayOrder int32 `protobuf:"varint,3,opt,name=displayOrder,proto3" json:"displayOrder,omitempty"`
	// If placeholder is set or elementText is not set, then an input element will be rendered. The default is placeholder is an empty string.
	Placeholder string `protobuf:"bytes,5,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	// If DataType.OPTIONS is set, then drop-down list will be rendered.
	SelectOptions []*SelectOption `protobuf:"bytes,6,rep,name=selectOptions,proto3" json:"selectOptions,omitempty"`
	// Placeholder in localized language.
	LocalizedPlaceholder *LocalizedString `protobuf:"bytes,7,opt,name=localizedPlaceholder,proto3" json:"localizedPlaceholder,omitempty"`
	// If set true, input field will have autocomplete enabled. The default is false.
	Autocomplete bool `protobuf:"varint,8,opt,name=autocomplete,proto3" json:"autocomplete,omitempty"`
	// Customize address input fields.
	AddressRenderOptions *AddressRenderOptions `protobuf:"bytes,9,opt,name=addressRenderOptions,proto3" json:"addressRenderOptions,omitempty"`
	// Localized text rendered on year select placeholder of DATE_YYYYMM.
	LocalizedYearPlaceholder string `protobuf:"bytes,10,opt,name=localizedYearPlaceholder,proto3" json:"localizedYearPlaceholder,omitempty"`
	// Localized text rendered on month select placeholder of DATE_YYYYMM and DATE_MMDD.
	LocalizedMonthPlaceholder string `protobuf:"bytes,11,opt,name=localizedMonthPlaceholder,proto3" json:"localizedMonthPlaceholder,omitempty"`
	// Localized text rendered on day select placeholder of DATE_MMDD.
	LocalizedDayPlaceholder string `protobuf:"bytes,12,opt,name=localizedDayPlaceholder,proto3" json:"localizedDayPlaceholder,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DataCollectionFieldRenderOptions) Reset() {
	*x = DataCollectionFieldRenderOptions{}
	mi := &file_io_common_template_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataCollectionFieldRenderOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCollectionFieldRenderOptions) ProtoMessage() {}

func (x *DataCollectionFieldRenderOptions) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCollectionFieldRenderOptions.ProtoReflect.Descriptor instead.
func (*DataCollectionFieldRenderOptions) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{21}
}

func (x *DataCollectionFieldRenderOptions) GetHelpText() string {
	if x != nil {
		return x.HelpText
	}
	return ""
}

func (x *DataCollectionFieldRenderOptions) GetLocalizedHelpText() *LocalizedString {
	if x != nil {
		return x.LocalizedHelpText
	}
	return nil
}

func (x *DataCollectionFieldRenderOptions) GetDisplayOrder() int32 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *DataCollectionFieldRenderOptions) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *DataCollectionFieldRenderOptions) GetSelectOptions() []*SelectOption {
	if x != nil {
		return x.SelectOptions
	}
	return nil
}

func (x *DataCollectionFieldRenderOptions) GetLocalizedPlaceholder() *LocalizedString {
	if x != nil {
		return x.LocalizedPlaceholder
	}
	return nil
}

func (x *DataCollectionFieldRenderOptions) GetAutocomplete() bool {
	if x != nil {
		return x.Autocomplete
	}
	return false
}

func (x *DataCollectionFieldRenderOptions) GetAddressRenderOptions() *AddressRenderOptions {
	if x != nil {
		return x.AddressRenderOptions
	}
	return nil
}

func (x *DataCollectionFieldRenderOptions) GetLocalizedYearPlaceholder() string {
	if x != nil {
		return x.LocalizedYearPlaceholder
	}
	return ""
}

func (x *DataCollectionFieldRenderOptions) GetLocalizedMonthPlaceholder() string {
	if x != nil {
		return x.LocalizedMonthPlaceholder
	}
	return ""
}

func (x *DataCollectionFieldRenderOptions) GetLocalizedDayPlaceholder() string {
	if x != nil {
		return x.LocalizedDayPlaceholder
	}
	return ""
}

type AddressRenderOptions struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Address1Label                string                 `protobuf:"bytes,1,opt,name=address1Label,proto3" json:"address1Label,omitempty"`
	Address2Label                string                 `protobuf:"bytes,2,opt,name=address2Label,proto3" json:"address2Label,omitempty"`
	CityLabel                    string                 `protobuf:"bytes,3,opt,name=cityLabel,proto3" json:"cityLabel,omitempty"`
	CountryLabel                 string                 `protobuf:"bytes,4,opt,name=countryLabel,proto3" json:"countryLabel,omitempty"`
	ZipLabel                     string                 `protobuf:"bytes,5,opt,name=zipLabel,proto3" json:"zipLabel,omitempty"`
	Address1Placeholder          string                 `protobuf:"bytes,6,opt,name=address1Placeholder,proto3" json:"address1Placeholder,omitempty"`
	Address2Placeholder          string                 `protobuf:"bytes,7,opt,name=address2Placeholder,proto3" json:"address2Placeholder,omitempty"`
	CityPlaceholder              string                 `protobuf:"bytes,8,opt,name=cityPlaceholder,proto3" json:"cityPlaceholder,omitempty"`
	CountryPlaceholder           string                 `protobuf:"bytes,9,opt,name=countryPlaceholder,proto3" json:"countryPlaceholder,omitempty"`
	ZipPlaceholder               string                 `protobuf:"bytes,10,opt,name=zipPlaceholder,proto3" json:"zipPlaceholder,omitempty"`
	LocalizedAddress1Label       *LocalizedString       `protobuf:"bytes,11,opt,name=localizedAddress1Label,proto3" json:"localizedAddress1Label,omitempty"`
	LocalizedAddress2Label       *LocalizedString       `protobuf:"bytes,12,opt,name=localizedAddress2Label,proto3" json:"localizedAddress2Label,omitempty"`
	LocalizedCityLabel           *LocalizedString       `protobuf:"bytes,13,opt,name=localizedCityLabel,proto3" json:"localizedCityLabel,omitempty"`
	LocalizedCountryLabel        *LocalizedString       `protobuf:"bytes,14,opt,name=localizedCountryLabel,proto3" json:"localizedCountryLabel,omitempty"`
	LocalizedZipLabel            *LocalizedString       `protobuf:"bytes,15,opt,name=localizedZipLabel,proto3" json:"localizedZipLabel,omitempty"`
	LocalizedAddress1Placeholder *LocalizedString       `protobuf:"bytes,16,opt,name=localizedAddress1Placeholder,proto3" json:"localizedAddress1Placeholder,omitempty"`
	LocalizedAddress2Placeholder *LocalizedString       `protobuf:"bytes,17,opt,name=localizedAddress2Placeholder,proto3" json:"localizedAddress2Placeholder,omitempty"`
	LocalizedCityPlaceholder     *LocalizedString       `protobuf:"bytes,18,opt,name=localizedCityPlaceholder,proto3" json:"localizedCityPlaceholder,omitempty"`
	LocalizedCountryPlaceholder  *LocalizedString       `protobuf:"bytes,19,opt,name=localizedCountryPlaceholder,proto3" json:"localizedCountryPlaceholder,omitempty"`
	LocalizedZipPlaceholder      *LocalizedString       `protobuf:"bytes,20,opt,name=localizedZipPlaceholder,proto3" json:"localizedZipPlaceholder,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *AddressRenderOptions) Reset() {
	*x = AddressRenderOptions{}
	mi := &file_io_common_template_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressRenderOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressRenderOptions) ProtoMessage() {}

func (x *AddressRenderOptions) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressRenderOptions.ProtoReflect.Descriptor instead.
func (*AddressRenderOptions) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{22}
}

func (x *AddressRenderOptions) GetAddress1Label() string {
	if x != nil {
		return x.Address1Label
	}
	return ""
}

func (x *AddressRenderOptions) GetAddress2Label() string {
	if x != nil {
		return x.Address2Label
	}
	return ""
}

func (x *AddressRenderOptions) GetCityLabel() string {
	if x != nil {
		return x.CityLabel
	}
	return ""
}

func (x *AddressRenderOptions) GetCountryLabel() string {
	if x != nil {
		return x.CountryLabel
	}
	return ""
}

func (x *AddressRenderOptions) GetZipLabel() string {
	if x != nil {
		return x.ZipLabel
	}
	return ""
}

func (x *AddressRenderOptions) GetAddress1Placeholder() string {
	if x != nil {
		return x.Address1Placeholder
	}
	return ""
}

func (x *AddressRenderOptions) GetAddress2Placeholder() string {
	if x != nil {
		return x.Address2Placeholder
	}
	return ""
}

func (x *AddressRenderOptions) GetCityPlaceholder() string {
	if x != nil {
		return x.CityPlaceholder
	}
	return ""
}

func (x *AddressRenderOptions) GetCountryPlaceholder() string {
	if x != nil {
		return x.CountryPlaceholder
	}
	return ""
}

func (x *AddressRenderOptions) GetZipPlaceholder() string {
	if x != nil {
		return x.ZipPlaceholder
	}
	return ""
}

func (x *AddressRenderOptions) GetLocalizedAddress1Label() *LocalizedString {
	if x != nil {
		return x.LocalizedAddress1Label
	}
	return nil
}

func (x *AddressRenderOptions) GetLocalizedAddress2Label() *LocalizedString {
	if x != nil {
		return x.LocalizedAddress2Label
	}
	return nil
}

func (x *AddressRenderOptions) GetLocalizedCityLabel() *LocalizedString {
	if x != nil {
		return x.LocalizedCityLabel
	}
	return nil
}

func (x *AddressRenderOptions) GetLocalizedCountryLabel() *LocalizedString {
	if x != nil {
		return x.LocalizedCountryLabel
	}
	return nil
}

func (x *AddressRenderOptions) GetLocalizedZipLabel() *LocalizedString {
	if x != nil {
		return x.LocalizedZipLabel
	}
	return nil
}

func (x *AddressRenderOptions) GetLocalizedAddress1Placeholder() *LocalizedString {
	if x != nil {
		return x.LocalizedAddress1Placeholder
	}
	return nil
}

func (x *AddressRenderOptions) GetLocalizedAddress2Placeholder() *LocalizedString {
	if x != nil {
		return x.LocalizedAddress2Placeholder
	}
	return nil
}

func (x *AddressRenderOptions) GetLocalizedCityPlaceholder() *LocalizedString {
	if x != nil {
		return x.LocalizedCityPlaceholder
	}
	return nil
}

func (x *AddressRenderOptions) GetLocalizedCountryPlaceholder() *LocalizedString {
	if x != nil {
		return x.LocalizedCountryPlaceholder
	}
	return nil
}

func (x *AddressRenderOptions) GetLocalizedZipPlaceholder() *LocalizedString {
	if x != nil {
		return x.LocalizedZipPlaceholder
	}
	return nil
}

// Controls the sharing settings for the program. Sharing settings only apply to Apple Wallet.
type Sharing struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If not disabled will show the 'Share Pass' button on the back of an Apple Wallet pass. Setting a url and description will redirect sharing to a URL (such as a sign-up or info url) instead of sharing the pass.
	ProhibitSharing bool `protobuf:"varint,1,opt,name=prohibitSharing,proto3" json:"prohibitSharing,omitempty"`
	// If provided will allow for a custom share URL to be triggered from 'Share Pass' butto.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// If provided will allow for a custom description text to be inserted in the sharing message.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Sharing description in localized language.
	LocalizedDescription *LocalizedString `protobuf:"bytes,4,opt,name=localizedDescription,proto3" json:"localizedDescription,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Sharing) Reset() {
	*x = Sharing{}
	mi := &file_io_common_template_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sharing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sharing) ProtoMessage() {}

func (x *Sharing) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sharing.ProtoReflect.Descriptor instead.
func (*Sharing) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{23}
}

func (x *Sharing) GetProhibitSharing() bool {
	if x != nil {
		return x.ProhibitSharing
	}
	return false
}

func (x *Sharing) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Sharing) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Sharing) GetLocalizedDescription() *LocalizedString {
	if x != nil {
		return x.LocalizedDescription
	}
	return nil
}

type DefaultTemplateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required"
	Protocol PassProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=io.PassProtocol" json:"protocol,omitempty" validateGeneric:"required"`
	// @tag: validateGeneric:"required"
	Revision      uint32 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultTemplateRequest) Reset() {
	*x = DefaultTemplateRequest{}
	mi := &file_io_common_template_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultTemplateRequest) ProtoMessage() {}

func (x *DefaultTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_template_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultTemplateRequest.ProtoReflect.Descriptor instead.
func (*DefaultTemplateRequest) Descriptor() ([]byte, []int) {
	return file_io_common_template_proto_rawDescGZIP(), []int{24}
}

func (x *DefaultTemplateRequest) GetProtocol() PassProtocol {
	if x != nil {
		return x.Protocol
	}
	return PassProtocol_PASS_PROTOCOL_DO_NOT_USE
}

func (x *DefaultTemplateRequest) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

var File_io_common_template_proto protoreflect.FileDescriptor

var file_io_common_template_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x69, 0x6f, 0x1a, 0x1e,
	0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x69, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x69, 0x6f, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x80, 0x01, 0x0a, 0x0e, 0x54, 0x4f, 0x50, 0x54, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x07, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x42,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x10,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x4f, 0x50, 0x54, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd8, 0x09, 0x0a, 0x0c, 0x50, 0x61,
	0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x51, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x69, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6f, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x42, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0a,
	0x6e, 0x66, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x69, 0x6f, 0x2e, 0x4e, 0x46, 0x43, 0x52, 0x0a, 0x6e, 0x66, 0x63, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x13,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x50, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x50, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x06, 0x92, 0x41, 0x03, 0xa0, 0x01, 0x0a, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x06, 0x92, 0x41, 0x03, 0xa0, 0x01, 0x0a, 0x52, 0x07, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x3a, 0x0a,
	0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x6c, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x13, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a, 0x5a, 0x2a, 0x0b, 0x50, 0x61, 0x73,
	0x73, 0x20, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x32, 0x39, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x50, 0x61, 0x79, 0x20, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x2e, 0xd2, 0x01, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x22, 0xe5, 0x05, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x1a, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x1a, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x52,
	0x0a, 0x16, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x16, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x13, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x44, 0x61, 0x72, 0x6b, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x72, 0x6b, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12,
	0x75, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc7, 0x01, 0x0a,
	0x16, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x1b, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb5, 0x03, 0x0a, 0x11, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x50, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50,
	0x61, 0x79, 0x41, 0x70, 0x70, 0x52, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70,
	0x70, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79,
	0x41, 0x70, 0x70, 0x52, 0x06, 0x69, 0x6f, 0x73, 0x41, 0x70, 0x70, 0x12, 0x28, 0x0a, 0x06, 0x77,
	0x65, 0x62, 0x41, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6f,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x41, 0x70, 0x70, 0x52, 0x06, 0x77,
	0x65, 0x62, 0x41, 0x70, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3e, 0x0a,
	0x11, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x15, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x69,
	0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x15, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xde,
	0x02, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x41, 0x70, 0x70, 0x12,
	0x19, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x69,
	0x6f, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x72, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x75, 0x72, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x72, 0x6c,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x55, 0x72, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x95, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xdc, 0x03, 0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x52, 0x0a, 0x1b, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x1b, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x1d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x6b, 0x0a, 0x16, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x1b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x08, 0x0a, 0x1a, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x14, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x51, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x68, 0x61, 0x6e, 0x6b, 0x59, 0x6f, 0x75, 0x54, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x61, 0x6e, 0x6b, 0x59, 0x6f, 0x75, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x49, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x68,
	0x61, 0x6e, 0x6b, 0x59, 0x6f, 0x75, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x68, 0x61, 0x6e, 0x6b, 0x59, 0x6f, 0x75, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x57,
	0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x40, 0x0a, 0x1b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x45, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x73, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x10,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x9f,
	0x05, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a,
	0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x45, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x12, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x4f, 0x6e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x75,
	0x74, 0x6f, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x4f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x22, 0xbc, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6f,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xf0, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x70, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x15,
	0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x6f, 0x6f,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x22, 0x3b, 0x0a, 0x0f, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xb4, 0x01, 0x0a, 0x03, 0x4e, 0x46, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x4d, 0x6f, 0x72, 0x65,
	0x55, 0x72, 0x6c, 0x22, 0x8b, 0x07, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x28, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x49, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x67, 0x0a, 0x1d, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x1d, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x70, 0x0a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x20, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x69, 0x6f, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x50, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xba, 0x04, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x74,
	0x65, 0x78, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x10,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x8f,
	0x01, 0x0a, 0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40,
	0x0a, 0x11, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x69, 0x6f, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x11, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x65,
	0x78, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x22, 0x5a, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xee, 0x04, 0x0a,
	0x20, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x41, 0x0a,
	0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x69, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47,
	0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61,
	0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x14, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x44, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44,
	0x61, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0xbc, 0x09,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x69, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x30, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x7a, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x7a, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x43, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x69, 0x74,
	0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x69, 0x74, 0x79,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x41, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5a, 0x69, 0x70,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5a, 0x69, 0x70, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x57, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x31, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x1c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x32, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x43, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a,
	0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5a, 0x69, 0x70, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5a, 0x69,
	0x70, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0xf0, 0x01, 0x0a,
	0x07, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x22,
	0x62, 0x0a, 0x16, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x6f,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2a, 0x76, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x05, 0x2a, 0x77, 0x0a, 0x11, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x50, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x49, 0x46, 0x54, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x54, 0x10, 0x06, 0x2a, 0x60, 0x0a, 0x0b, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x51, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x5a, 0x54, 0x45,
	0x43, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x44, 0x46, 0x34, 0x31, 0x37, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x44, 0x45, 0x31, 0x32, 0x38, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x2a, 0x71, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x54, 0x41,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x49, 0x49, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55,
	0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x53, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x10, 0x05, 0x2a, 0xbe, 0x01, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f,
	0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f,
	0x4c, 0x45, 0x47, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x53,
	0x45, 0x46, 0x55, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x4f, 0x55, 0x54,
	0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06, 0x2a, 0x5c, 0x0a, 0x0d, 0x54, 0x65,
	0x78, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45,
	0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0x9a, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x44, 0x4f,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x53, 0x48,
	0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53,
	0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0x04, 0x2a, 0x8f, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0x93, 0x01, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x59, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x4c, 0x4c, 0x10, 0x04, 0x2a, 0xb6, 0x01,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4d, 0x10, 0x06, 0x2a, 0x88, 0x02, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x59, 0x59, 0x59, 0x59, 0x4d, 0x4d, 0x44,
	0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x59, 0x59, 0x59, 0x59,
	0x4d, 0x4d, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4d, 0x44,
	0x44, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x09, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03,
	0x55, 0x52, 0x4c, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x45, 0x4c, 0x10, 0x0c, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10,
	0x11, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x12, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4d, 0x10, 0x13, 0x22, 0x04, 0x08, 0x0e, 0x10,
	0x0e, 0x2a, 0xfe, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x0c, 0x12, 0x12,
	0x0a, 0x0e, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c,
	0x10, 0x0d, 0x2a, 0xa7, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x55, 0x58, 0x49, 0x4c, 0x49, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x53, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x10, 0x06, 0x2a, 0x8e, 0x19, 0x0a,
	0x0e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1f, 0x0a, 0x1b, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00,
	0x12, 0x24, 0x0a, 0x20, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x49, 0x52, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x49,
	0x52, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f,
	0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12,
	0x25, 0x0a, 0x21, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x22,
	0x0a, 0x1e, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41,
	0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59,
	0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x10, 0x0a,
	0x12, 0x29, 0x0a, 0x25, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x47,
	0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x25, 0x0a,
	0x21, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x0e, 0x12, 0x2b, 0x0a, 0x27, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x0f, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x10, 0x12, 0x2d, 0x0a, 0x29, 0x47, 0x4f, 0x4f, 0x47,
	0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x59, 0x45, 0x52, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x11, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
	0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x47,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x53, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22,
	0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x52, 0x49,
	0x56, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x14, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x52, 0x52, 0x49, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e,
	0x41, 0x4c, 0x10, 0x15, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x52, 0x49,
	0x56, 0x41, 0x4c, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x4e, 0x55, 0x45,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47,
	0x41, 0x54, 0x45, 0x10, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41,
	0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x57, 0x10, 0x69, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x10, 0x6a, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x4f, 0x4f, 0x47,
	0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x6b, 0x12, 0x1f, 0x0a, 0x1b,
	0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x4f, 0x4f, 0x52, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x6c, 0x12, 0x1a, 0x0a,
	0x16, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e,
	0x44, 0x10, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41,
	0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x6f, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x70, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x71, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41,
	0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x52,
	0x49, 0x4e, 0x54, 0x10, 0x73, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xc8, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0xc9, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
	0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0xca, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0xcb, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41,
	0x59, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x10, 0xcc, 0x01, 0x12, 0x21, 0x0a,
	0x1c, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x47, 0x49, 0x46, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0xcd, 0x01,
	0x12, 0x24, 0x0a, 0x1f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4c,
	0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0xac, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4c, 0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x53, 0x10, 0xad, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4c, 0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0xae, 0x02,
	0x12, 0x24, 0x0a, 0x1f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4c,
	0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0xaf, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4c, 0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0xb0, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4c, 0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x10, 0xb1, 0x02,
	0x12, 0x2e, 0x0a, 0x29, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4c,
	0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x10, 0xb2, 0x02,
	0x12, 0x1b, 0x0a, 0x16, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4f,
	0x46, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x90, 0x03, 0x12, 0x1e, 0x0a,
	0x19, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x91, 0x03, 0x12, 0x1d, 0x0a,
	0x18, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x92, 0x03, 0x12, 0x20, 0x0a, 0x1b,
	0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x93, 0x03, 0x12, 0x21,
	0x0a, 0x1c, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x46,
	0x45, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x94,
	0x03, 0x12, 0x23, 0x0a, 0x1e, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0xf4, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x50,
	0x41, 0x52, 0x54, 0x55, 0x52, 0x45, 0x10, 0xf5, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f,
	0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xf6,
	0x03, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x52,
	0x4f, 0x4d, 0x10, 0xf7, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x10, 0xf8, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54,
	0x5f, 0x41, 0x52, 0x52, 0x49, 0x56, 0x41, 0x4c, 0x10, 0xf9, 0x03, 0x12, 0x27, 0x0a, 0x22, 0x47,
	0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x10, 0xfa, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49,
	0x41, 0x47, 0x45, 0x10, 0xfb, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x41,
	0x43, 0x48, 0x10, 0xfc, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x54,
	0x10, 0xfd, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41,
	0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0xfe, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54,
	0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xff,
	0x03, 0x12, 0x21, 0x0a, 0x1c, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x52, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x80, 0x04, 0x12, 0x20, 0x0a, 0x1b, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x10, 0x81, 0x04, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x5a, 0x4f, 0x4e,
	0x45, 0x10, 0x82, 0x04, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x52, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x83, 0x04, 0x12, 0x2b, 0x0a, 0x26, 0x47, 0x4f, 0x4f, 0x47,
	0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x10, 0x84, 0x04, 0x12, 0x2a, 0x0a, 0x25, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x85,
	0x04, 0x12, 0x31, 0x0a, 0x2c, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x53, 0x10, 0x86, 0x04, 0x12, 0x29, 0x0a, 0x24, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x87, 0x04, 0x12,
	0x2a, 0x0a, 0x25, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x88, 0x04, 0x12, 0x26, 0x0a, 0x21, 0x47,
	0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x89, 0x04, 0x12, 0x25, 0x0a, 0x20, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41,
	0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x8a, 0x04, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x8b, 0x04, 0x12, 0x29,
	0x0a, 0x24, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x8c, 0x04, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x8d, 0x04, 0x12, 0x26, 0x0a,
	0x21, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x49, 0x54, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x10, 0x8e, 0x04, 0x12, 0x28, 0x0a, 0x23, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x8f, 0x04, 0x12,
	0x1b, 0x0a, 0x16, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0xe8, 0x07, 0x12, 0x1b, 0x0a, 0x16,
	0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xe9, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0xea, 0x07, 0x2a, 0x6c, 0x0a,
	0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41,
	0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x2a, 0x77, 0x0a, 0x16, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44,
	0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x41, 0x4c, 0x4c, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x50, 0x41, 0x53, 0x53,
	0x45, 0x53, 0x10, 0x02, 0x2a, 0xa3, 0x01, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x44, 0x4f,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45,
	0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x08, 0x2a, 0x5d, 0x0a, 0x15, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x53, 0x48, 0x4f,
	0x54, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x45,
	0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x42, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x24, 0x73,
	0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f,
	0x2f, 0x69, 0x6f, 0xaa, 0x02, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_common_template_proto_rawDescOnce sync.Once
	file_io_common_template_proto_rawDescData []byte
)

func file_io_common_template_proto_rawDescGZIP() []byte {
	file_io_common_template_proto_rawDescOnce.Do(func() {
		file_io_common_template_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_common_template_proto_rawDesc), len(file_io_common_template_proto_rawDesc)))
	})
	return file_io_common_template_proto_rawDescData
}

var file_io_common_template_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_io_common_template_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_io_common_template_proto_goTypes = []any{
	(ApplePassType)(0),                       // 0: io.ApplePassType
	(GooglePayPassType)(0),                   // 1: io.GooglePayPassType
	(BarcodeType)(0),                         // 2: io.BarcodeType
	(FieldType)(0),                           // 3: io.FieldType
	(StandardFields)(0),                      // 4: io.StandardFields
	(TextAlignment)(0),                       // 5: io.TextAlignment
	(DateTimeStyle)(0),                       // 6: io.DateTimeStyle
	(LinkDetector)(0),                        // 7: io.LinkDetector
	(NumberStyle)(0),                         // 8: io.NumberStyle
	(TransitType)(0),                         // 9: io.TransitType
	(DataType)(0),                            // 10: io.DataType
	(DataStyle)(0),                           // 11: io.DataStyle
	(FieldSection)(0),                        // 12: io.FieldSection
	(GooglePayField)(0),                      // 13: io.GooglePayField
	(PasswordType)(0),                        // 14: io.PasswordType
	(SupportedAndroidWallet)(0),              // 15: io.SupportedAndroidWallet
	(PersonalizedDataField)(0),               // 16: io.PersonalizedDataField
	(ScreenshotEligibility)(0),               // 17: io.ScreenshotEligibility
	(*SelectOption)(nil),                     // 18: io.SelectOption
	(*TOPTParameters)(nil),                   // 19: io.TOPTParameters
	(*Barcode)(nil),                          // 20: io.Barcode
	(*PassTemplate)(nil),                     // 21: io.PassTemplate
	(*AppleWalletSettings)(nil),              // 22: io.AppleWalletSettings
	(*PersonalizationDetails)(nil),           // 23: io.PersonalizationDetails
	(*GooglePaySettings)(nil),                // 24: io.GooglePaySettings
	(*GooglePayApp)(nil),                     // 25: io.GooglePayApp
	(*Data)(nil),                             // 26: io.Data
	(*LandingPageSettings)(nil),              // 27: io.LandingPageSettings
	(*DataCollectionPageSettings)(nil),       // 28: io.DataCollectionPageSettings
	(*PasswordSettings)(nil),                 // 29: io.PasswordSettings
	(*PassTemplateResponse)(nil),             // 30: io.PassTemplateResponse
	(*Colors)(nil),                           // 31: io.Colors
	(*CopyObjectInput)(nil),                  // 32: io.CopyObjectInput
	(*NFC)(nil),                              // 33: io.NFC
	(*BindingInfo)(nil),                      // 34: io.BindingInfo
	(*DataField)(nil),                        // 35: io.DataField
	(*AppleWalletFieldRenderOptions)(nil),    // 36: io.AppleWalletFieldRenderOptions
	(*GooglePayFieldRenderOptions)(nil),      // 37: io.GooglePayFieldRenderOptions
	(*PositionSettings)(nil),                 // 38: io.PositionSettings
	(*DataCollectionFieldRenderOptions)(nil), // 39: io.DataCollectionFieldRenderOptions
	(*AddressRenderOptions)(nil),             // 40: io.AddressRenderOptions
	(*Sharing)(nil),                          // 41: io.Sharing
	(*DefaultTemplateRequest)(nil),           // 42: io.DefaultTemplateRequest
	nil,                                      // 43: io.LandingPageSettings.LocalizedTextOverridesEntry
	(*LocalizedString)(nil),                  // 44: io.LocalizedString
	(PassProtocol)(0),                        // 45: io.PassProtocol
	(LanguageCode)(0),                        // 46: io.LanguageCode
	(*ImageIds)(nil),                         // 47: io.ImageIds
	(*ImageData)(nil),                        // 48: io.ImageData
	(*GPSLocation)(nil),                      // 49: io.GPSLocation
	(*Beacon)(nil),                           // 50: io.Beacon
	(*Link)(nil),                             // 51: io.Link
	(*ExpirySettings)(nil),                   // 52: io.ExpirySettings
	(*Url)(nil),                              // 53: io.Url
	(Toggle)(0),                              // 54: io.Toggle
	(*TrackingSettings)(nil),                 // 55: io.TrackingSettings
	(*timestamppb.Timestamp)(nil),            // 56: google.protobuf.Timestamp
	(UsageType)(0),                           // 57: io.UsageType
}
var file_io_common_template_proto_depIdxs = []int32{
	44, // 0: io.SelectOption.localizedTextLabel:type_name -> io.LocalizedString
	2,  // 1: io.Barcode.format:type_name -> io.BarcodeType
	44, // 2: io.Barcode.localizedAltText:type_name -> io.LocalizedString
	19, // 3: io.Barcode.totpParameters:type_name -> io.TOPTParameters
	45, // 4: io.PassTemplate.protocol:type_name -> io.PassProtocol
	46, // 5: io.PassTemplate.defaultLanguage:type_name -> io.LanguageCode
	44, // 6: io.PassTemplate.localizedOrganizationName:type_name -> io.LocalizedString
	44, // 7: io.PassTemplate.localizedDescription:type_name -> io.LocalizedString
	26, // 8: io.PassTemplate.data:type_name -> io.Data
	47, // 9: io.PassTemplate.imageIds:type_name -> io.ImageIds
	48, // 10: io.PassTemplate.images:type_name -> io.ImageData
	31, // 11: io.PassTemplate.colors:type_name -> io.Colors
	20, // 12: io.PassTemplate.barcode:type_name -> io.Barcode
	33, // 13: io.PassTemplate.nfcEnabled:type_name -> io.NFC
	41, // 14: io.PassTemplate.sharing:type_name -> io.Sharing
	22, // 15: io.PassTemplate.appleWalletSettings:type_name -> io.AppleWalletSettings
	24, // 16: io.PassTemplate.googlePaySettings:type_name -> io.GooglePaySettings
	49, // 17: io.PassTemplate.locations:type_name -> io.GPSLocation
	50, // 18: io.PassTemplate.beacons:type_name -> io.Beacon
	51, // 19: io.PassTemplate.links:type_name -> io.Link
	52, // 20: io.PassTemplate.expirySettings:type_name -> io.ExpirySettings
	27, // 21: io.PassTemplate.landingPageSettings:type_name -> io.LandingPageSettings
	0,  // 22: io.AppleWalletSettings.passType:type_name -> io.ApplePassType
	9,  // 23: io.AppleWalletSettings.transitType:type_name -> io.TransitType
	23, // 24: io.AppleWalletSettings.personalizationDetails:type_name -> io.PersonalizationDetails
	16, // 25: io.PersonalizationDetails.requiredPersonalizationData:type_name -> io.PersonalizedDataField
	1,  // 26: io.GooglePaySettings.passType:type_name -> io.GooglePayPassType
	25, // 27: io.GooglePaySettings.androidApp:type_name -> io.GooglePayApp
	25, // 28: io.GooglePaySettings.iosApp:type_name -> io.GooglePayApp
	25, // 29: io.GooglePaySettings.webApp:type_name -> io.GooglePayApp
	46, // 30: io.GooglePaySettings.languageOverrides:type_name -> io.LanguageCode
	17, // 31: io.GooglePaySettings.screenshotEligibility:type_name -> io.ScreenshotEligibility
	53, // 32: io.GooglePayApp.url:type_name -> io.Url
	44, // 33: io.GooglePayApp.localizedTitle:type_name -> io.LocalizedString
	44, // 34: io.GooglePayApp.localizedDescription:type_name -> io.LocalizedString
	44, // 35: io.GooglePayApp.localizedUrlDescription:type_name -> io.LocalizedString
	35, // 36: io.Data.dataFields:type_name -> io.DataField
	28, // 37: io.Data.dataCollectionPageSettings:type_name -> io.DataCollectionPageSettings
	46, // 38: io.LandingPageSettings.landingLocalizationOverride:type_name -> io.LanguageCode
	54, // 39: io.LandingPageSettings.preferThirdPartyAndroidWallet:type_name -> io.Toggle
	15, // 40: io.LandingPageSettings.preferredAndroidWallet:type_name -> io.SupportedAndroidWallet
	43, // 41: io.LandingPageSettings.localizedTextOverrides:type_name -> io.LandingPageSettings.LocalizedTextOverridesEntry
	44, // 42: io.DataCollectionPageSettings.localizedTitle:type_name -> io.LocalizedString
	44, // 43: io.DataCollectionPageSettings.localizedDescription:type_name -> io.LocalizedString
	44, // 44: io.DataCollectionPageSettings.localizedSubmitButtonText:type_name -> io.LocalizedString
	44, // 45: io.DataCollectionPageSettings.localizedLoadingText:type_name -> io.LocalizedString
	44, // 46: io.DataCollectionPageSettings.localizedThankYouText:type_name -> io.LocalizedString
	44, // 47: io.DataCollectionPageSettings.localizedPageBackgroundColor:type_name -> io.LocalizedString
	55, // 48: io.DataCollectionPageSettings.trackingSettings:type_name -> io.TrackingSettings
	44, // 49: io.DataCollectionPageSettings.localizedFooterText:type_name -> io.LocalizedString
	29, // 50: io.DataCollectionPageSettings.passwordSettings:type_name -> io.PasswordSettings
	14, // 51: io.PasswordSettings.passwordType:type_name -> io.PasswordType
	44, // 52: io.PasswordSettings.localizedInputLabelText:type_name -> io.LocalizedString
	44, // 53: io.PasswordSettings.localizedErrorText:type_name -> io.LocalizedString
	44, // 54: io.PasswordSettings.localizedHeaderText:type_name -> io.LocalizedString
	44, // 55: io.PasswordSettings.localizedButtonText:type_name -> io.LocalizedString
	44, // 56: io.PasswordSettings.localizedTitleText:type_name -> io.LocalizedString
	21, // 57: io.PassTemplateResponse.template:type_name -> io.PassTemplate
	45, // 58: io.PassTemplateResponse.protocol:type_name -> io.PassProtocol
	56, // 59: io.PassTemplateResponse.createdAt:type_name -> google.protobuf.Timestamp
	56, // 60: io.PassTemplateResponse.updatedAt:type_name -> google.protobuf.Timestamp
	34, // 61: io.NFC.bindingInfo:type_name -> io.BindingInfo
	3,  // 62: io.DataField.fieldType:type_name -> io.FieldType
	44, // 63: io.DataField.localizedLabel:type_name -> io.LocalizedString
	10, // 64: io.DataField.dataType:type_name -> io.DataType
	44, // 65: io.DataField.localizedDefaultValue:type_name -> io.LocalizedString
	36, // 66: io.DataField.appleWalletFieldRenderOptions:type_name -> io.AppleWalletFieldRenderOptions
	39, // 67: io.DataField.dataCollectionFieldRenderOptions:type_name -> io.DataCollectionFieldRenderOptions
	57, // 68: io.DataField.usage:type_name -> io.UsageType
	37, // 69: io.DataField.googlePayFieldRenderOptions:type_name -> io.GooglePayFieldRenderOptions
	5,  // 70: io.AppleWalletFieldRenderOptions.textAlignment:type_name -> io.TextAlignment
	38, // 71: io.AppleWalletFieldRenderOptions.positionSettings:type_name -> io.PositionSettings
	44, // 72: io.AppleWalletFieldRenderOptions.localizedChangeMessage:type_name -> io.LocalizedString
	6,  // 73: io.AppleWalletFieldRenderOptions.dateStyle:type_name -> io.DateTimeStyle
	6,  // 74: io.AppleWalletFieldRenderOptions.timeStyle:type_name -> io.DateTimeStyle
	8,  // 75: io.AppleWalletFieldRenderOptions.numberStyle:type_name -> io.NumberStyle
	7,  // 76: io.AppleWalletFieldRenderOptions.suppressLinkDetection:type_name -> io.LinkDetector
	13, // 77: io.GooglePayFieldRenderOptions.googlePayPosition:type_name -> io.GooglePayField
	12, // 78: io.PositionSettings.section:type_name -> io.FieldSection
	44, // 79: io.DataCollectionFieldRenderOptions.localizedHelpText:type_name -> io.LocalizedString
	18, // 80: io.DataCollectionFieldRenderOptions.selectOptions:type_name -> io.SelectOption
	44, // 81: io.DataCollectionFieldRenderOptions.localizedPlaceholder:type_name -> io.LocalizedString
	40, // 82: io.DataCollectionFieldRenderOptions.addressRenderOptions:type_name -> io.AddressRenderOptions
	44, // 83: io.AddressRenderOptions.localizedAddress1Label:type_name -> io.LocalizedString
	44, // 84: io.AddressRenderOptions.localizedAddress2Label:type_name -> io.LocalizedString
	44, // 85: io.AddressRenderOptions.localizedCityLabel:type_name -> io.LocalizedString
	44, // 86: io.AddressRenderOptions.localizedCountryLabel:type_name -> io.LocalizedString
	44, // 87: io.AddressRenderOptions.localizedZipLabel:type_name -> io.LocalizedString
	44, // 88: io.AddressRenderOptions.localizedAddress1Placeholder:type_name -> io.LocalizedString
	44, // 89: io.AddressRenderOptions.localizedAddress2Placeholder:type_name -> io.LocalizedString
	44, // 90: io.AddressRenderOptions.localizedCityPlaceholder:type_name -> io.LocalizedString
	44, // 91: io.AddressRenderOptions.localizedCountryPlaceholder:type_name -> io.LocalizedString
	44, // 92: io.AddressRenderOptions.localizedZipPlaceholder:type_name -> io.LocalizedString
	44, // 93: io.Sharing.localizedDescription:type_name -> io.LocalizedString
	45, // 94: io.DefaultTemplateRequest.protocol:type_name -> io.PassProtocol
	44, // 95: io.LandingPageSettings.LocalizedTextOverridesEntry.value:type_name -> io.LocalizedString
	96, // [96:96] is the sub-list for method output_type
	96, // [96:96] is the sub-list for method input_type
	96, // [96:96] is the sub-list for extension type_name
	96, // [96:96] is the sub-list for extension extendee
	0,  // [0:96] is the sub-list for field type_name
}

func init() { file_io_common_template_proto_init() }
func file_io_common_template_proto_init() {
	if File_io_common_template_proto != nil {
		return
	}
	file_io_common_common_objects_proto_init()
	file_io_common_localization_proto_init()
	file_io_common_protocols_proto_init()
	file_io_common_proximity_proto_init()
	file_io_common_links_proto_init()
	file_io_common_tracking_proto_init()
	file_io_image_image_proto_init()
	file_io_common_expiry_proto_init()
	file_io_common_template_proto_msgTypes[3].OneofWrappers = []any{
		(*PassTemplate_ImageIds)(nil),
		(*PassTemplate_Images)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_common_template_proto_rawDesc), len(file_io_common_template_proto_rawDesc)),
			NumEnums:      18,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_common_template_proto_goTypes,
		DependencyIndexes: file_io_common_template_proto_depIdxs,
		EnumInfos:         file_io_common_template_proto_enumTypes,
		MessageInfos:      file_io_common_template_proto_msgTypes,
	}.Build()
	File_io_common_template_proto = out.File
	file_io_common_template_proto_goTypes = nil
	file_io_common_template_proto_depIdxs = nil
}
