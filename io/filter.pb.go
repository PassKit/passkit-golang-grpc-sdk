//*
// Filters
//
// Filter your data with multiple conditions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/common/filter.proto

package io

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operator int32

const (
	// Join grouped filter fields with AND operator. E.g. tier_id = bronze AND tier_id = silver. The default.
	Operator_AND Operator = 0
	// Join grouped filter fields with OR operator. E.g. tier_id = bronze OR tier_id = silver.
	Operator_OR Operator = 1
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0: "AND",
		1: "OR",
	}
	Operator_value = map[string]int32{
		"AND": 0,
		"OR":  1,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_io_common_filter_proto_enumTypes[0].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_io_common_filter_proto_enumTypes[0]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_io_common_filter_proto_rawDescGZIP(), []int{0}
}

type Filters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Allows you to offset the first record returned by the limit.
	Offset       int32          `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	FilterGroups []*FilterGroup `protobuf:"bytes,3,rep,name=filterGroups,proto3" json:"filterGroups,omitempty"`
	// Field to order results by.
	OrderBy string `protobuf:"bytes,4,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	// Will return in ascending order if true, or descending order if false.
	OrderAsc      bool `protobuf:"varint,5,opt,name=orderAsc,proto3" json:"orderAsc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filters) Reset() {
	*x = Filters{}
	mi := &file_io_common_filter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filters) ProtoMessage() {}

func (x *Filters) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_filter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filters.ProtoReflect.Descriptor instead.
func (*Filters) Descriptor() ([]byte, []int) {
	return file_io_common_filter_proto_rawDescGZIP(), []int{0}
}

func (x *Filters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Filters) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Filters) GetFilterGroups() []*FilterGroup {
	if x != nil {
		return x.FilterGroups
	}
	return nil
}

func (x *Filters) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *Filters) GetOrderAsc() bool {
	if x != nil {
		return x.OrderAsc
	}
	return false
}

type FieldFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Column name to filter results by.
	// @tag: validateGeneric:"required"
	FilterField string `protobuf:"bytes,1,opt,name=filterField,proto3" json:"filterField,omitempty" validateGeneric:"required"`
	// Values to test against the filter fields.
	// @tag: validateGeneric:"required"
	FilterValue string `protobuf:"bytes,2,opt,name=filterValue,proto3" json:"filterValue,omitempty" validateGeneric:"required"`
	// Operator (e.g. eq, gt, gte, lt, lte, like)
	// @tag: validateGeneric:"required"
	FilterOperator string `protobuf:"bytes,3,opt,name=filterOperator,proto3" json:"filterOperator,omitempty" validateGeneric:"required"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FieldFilter) Reset() {
	*x = FieldFilter{}
	mi := &file_io_common_filter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldFilter) ProtoMessage() {}

func (x *FieldFilter) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_filter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldFilter.ProtoReflect.Descriptor instead.
func (*FieldFilter) Descriptor() ([]byte, []int) {
	return file_io_common_filter_proto_rawDescGZIP(), []int{1}
}

func (x *FieldFilter) GetFilterField() string {
	if x != nil {
		return x.FilterField
	}
	return ""
}

func (x *FieldFilter) GetFilterValue() string {
	if x != nil {
		return x.FilterValue
	}
	return ""
}

func (x *FieldFilter) GetFilterOperator() string {
	if x != nil {
		return x.FilterOperator
	}
	return ""
}

type FilterGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Use AND or OR conditions to join each filter field. E.g. (tier_id = bronze AND tier_id = silver) (tier_id = bronze OR tier_id = silver)
	Condition Operator `protobuf:"varint,1,opt,name=condition,proto3,enum=io.Operator" json:"condition,omitempty"`
	// Filter fields.
	FieldFilters  []*FieldFilter `protobuf:"bytes,2,rep,name=fieldFilters,proto3" json:"fieldFilters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterGroup) Reset() {
	*x = FilterGroup{}
	mi := &file_io_common_filter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterGroup) ProtoMessage() {}

func (x *FilterGroup) ProtoReflect() protoreflect.Message {
	mi := &file_io_common_filter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterGroup.ProtoReflect.Descriptor instead.
func (*FilterGroup) Descriptor() ([]byte, []int) {
	return file_io_common_filter_proto_rawDescGZIP(), []int{2}
}

func (x *FilterGroup) GetCondition() Operator {
	if x != nil {
		return x.Condition
	}
	return Operator_AND
}

func (x *FilterGroup) GetFieldFilters() []*FieldFilter {
	if x != nil {
		return x.FieldFilters
	}
	return nil
}

var File_io_common_filter_proto protoreflect.FileDescriptor

var file_io_common_filter_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x69, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x01, 0x0a,
	0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73,
	0x63, 0x3a, 0x5a, 0x92, 0x41, 0x57, 0x0a, 0x55, 0x2a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x32, 0x47, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x22, 0x79, 0x0a,
	0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x6e, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6f, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2a, 0x1b, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x52, 0x10, 0x01, 0x42, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73,
	0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x24, 0x73, 0x74, 0x61, 0x73, 0x68,
	0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0xaa,
	0x02, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_common_filter_proto_rawDescOnce sync.Once
	file_io_common_filter_proto_rawDescData []byte
)

func file_io_common_filter_proto_rawDescGZIP() []byte {
	file_io_common_filter_proto_rawDescOnce.Do(func() {
		file_io_common_filter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_common_filter_proto_rawDesc), len(file_io_common_filter_proto_rawDesc)))
	})
	return file_io_common_filter_proto_rawDescData
}

var file_io_common_filter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_io_common_filter_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_io_common_filter_proto_goTypes = []any{
	(Operator)(0),       // 0: io.Operator
	(*Filters)(nil),     // 1: io.Filters
	(*FieldFilter)(nil), // 2: io.FieldFilter
	(*FilterGroup)(nil), // 3: io.FilterGroup
}
var file_io_common_filter_proto_depIdxs = []int32{
	3, // 0: io.Filters.filterGroups:type_name -> io.FilterGroup
	0, // 1: io.FilterGroup.condition:type_name -> io.Operator
	2, // 2: io.FilterGroup.fieldFilters:type_name -> io.FieldFilter
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_io_common_filter_proto_init() }
func file_io_common_filter_proto_init() {
	if File_io_common_filter_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_common_filter_proto_rawDesc), len(file_io_common_filter_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_common_filter_proto_goTypes,
		DependencyIndexes: file_io_common_filter_proto_depIdxs,
		EnumInfos:         file_io_common_filter_proto_enumTypes,
		MessageInfos:      file_io_common_filter_proto_msgTypes,
	}.Build()
	File_io_common_filter_proto = out.File
	file_io_common_filter_proto_goTypes = nil
	file_io_common_filter_proto_depIdxs = nil
}
