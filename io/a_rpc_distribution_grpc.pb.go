// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: io/core/a_rpc_distribution.proto

package io

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Distribution_SendWelcomeEmail_FullMethodName            = "/io.Distribution/sendWelcomeEmail"
	Distribution_GetSmartPassLink_FullMethodName            = "/io.Distribution/getSmartPassLink"
	Distribution_GetDataCollectionPageFields_FullMethodName = "/io.Distribution/getDataCollectionPageFields"
	Distribution_UploadSmartPassCsv_FullMethodName          = "/io.Distribution/uploadSmartPassCsv"
	Distribution_ImportProtocolCsv_FullMethodName           = "/io.Distribution/importProtocolCsv"
	Distribution_ValidateBarcode_FullMethodName             = "/io.Distribution/validateBarcode"
)

// DistributionClient is the client API for Distribution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributionClient interface {
	SendWelcomeEmail(ctx context.Context, in *EmailDistributionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSmartPassLink(ctx context.Context, in *SmartPassLinkRequest, opts ...grpc.CallOption) (*Url, error)
	GetDataCollectionPageFields(ctx context.Context, in *ClassObjectInput, opts ...grpc.CallOption) (*DataCollectionFields, error)
	UploadSmartPassCsv(ctx context.Context, in *SmartPassCsvUploadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ImportProtocolCsv(ctx context.Context, in *ImportProtocolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateBarcode(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Payload, error)
}

type distributionClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributionClient(cc grpc.ClientConnInterface) DistributionClient {
	return &distributionClient{cc}
}

func (c *distributionClient) SendWelcomeEmail(ctx context.Context, in *EmailDistributionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Distribution_SendWelcomeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) GetSmartPassLink(ctx context.Context, in *SmartPassLinkRequest, opts ...grpc.CallOption) (*Url, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Url)
	err := c.cc.Invoke(ctx, Distribution_GetSmartPassLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) GetDataCollectionPageFields(ctx context.Context, in *ClassObjectInput, opts ...grpc.CallOption) (*DataCollectionFields, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataCollectionFields)
	err := c.cc.Invoke(ctx, Distribution_GetDataCollectionPageFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) UploadSmartPassCsv(ctx context.Context, in *SmartPassCsvUploadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Distribution_UploadSmartPassCsv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) ImportProtocolCsv(ctx context.Context, in *ImportProtocolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Distribution_ImportProtocolCsv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) ValidateBarcode(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Payload, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payload)
	err := c.cc.Invoke(ctx, Distribution_ValidateBarcode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionServer is the server API for Distribution service.
// All implementations should embed UnimplementedDistributionServer
// for forward compatibility.
type DistributionServer interface {
	SendWelcomeEmail(context.Context, *EmailDistributionRequest) (*emptypb.Empty, error)
	GetSmartPassLink(context.Context, *SmartPassLinkRequest) (*Url, error)
	GetDataCollectionPageFields(context.Context, *ClassObjectInput) (*DataCollectionFields, error)
	UploadSmartPassCsv(context.Context, *SmartPassCsvUploadRequest) (*emptypb.Empty, error)
	ImportProtocolCsv(context.Context, *ImportProtocolRequest) (*emptypb.Empty, error)
	ValidateBarcode(context.Context, *Payload) (*Payload, error)
}

// UnimplementedDistributionServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDistributionServer struct{}

func (UnimplementedDistributionServer) SendWelcomeEmail(context.Context, *EmailDistributionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWelcomeEmail not implemented")
}
func (UnimplementedDistributionServer) GetSmartPassLink(context.Context, *SmartPassLinkRequest) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmartPassLink not implemented")
}
func (UnimplementedDistributionServer) GetDataCollectionPageFields(context.Context, *ClassObjectInput) (*DataCollectionFields, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataCollectionPageFields not implemented")
}
func (UnimplementedDistributionServer) UploadSmartPassCsv(context.Context, *SmartPassCsvUploadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSmartPassCsv not implemented")
}
func (UnimplementedDistributionServer) ImportProtocolCsv(context.Context, *ImportProtocolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProtocolCsv not implemented")
}
func (UnimplementedDistributionServer) ValidateBarcode(context.Context, *Payload) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBarcode not implemented")
}
func (UnimplementedDistributionServer) testEmbeddedByValue() {}

// UnsafeDistributionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributionServer will
// result in compilation errors.
type UnsafeDistributionServer interface {
	mustEmbedUnimplementedDistributionServer()
}

func RegisterDistributionServer(s grpc.ServiceRegistrar, srv DistributionServer) {
	// If the following call pancis, it indicates UnimplementedDistributionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Distribution_ServiceDesc, srv)
}

func _Distribution_SendWelcomeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).SendWelcomeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_SendWelcomeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).SendWelcomeEmail(ctx, req.(*EmailDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_GetSmartPassLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartPassLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).GetSmartPassLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_GetSmartPassLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).GetSmartPassLink(ctx, req.(*SmartPassLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_GetDataCollectionPageFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).GetDataCollectionPageFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_GetDataCollectionPageFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).GetDataCollectionPageFields(ctx, req.(*ClassObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_UploadSmartPassCsv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartPassCsvUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).UploadSmartPassCsv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_UploadSmartPassCsv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).UploadSmartPassCsv(ctx, req.(*SmartPassCsvUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_ImportProtocolCsv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).ImportProtocolCsv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_ImportProtocolCsv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).ImportProtocolCsv(ctx, req.(*ImportProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_ValidateBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).ValidateBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Distribution_ValidateBarcode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).ValidateBarcode(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

// Distribution_ServiceDesc is the grpc.ServiceDesc for Distribution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Distribution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.Distribution",
	HandlerType: (*DistributionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendWelcomeEmail",
			Handler:    _Distribution_SendWelcomeEmail_Handler,
		},
		{
			MethodName: "getSmartPassLink",
			Handler:    _Distribution_GetSmartPassLink_Handler,
		},
		{
			MethodName: "getDataCollectionPageFields",
			Handler:    _Distribution_GetDataCollectionPageFields_Handler,
		},
		{
			MethodName: "uploadSmartPassCsv",
			Handler:    _Distribution_UploadSmartPassCsv_Handler,
		},
		{
			MethodName: "importProtocolCsv",
			Handler:    _Distribution_ImportProtocolCsv_Handler,
		},
		{
			MethodName: "validateBarcode",
			Handler:    _Distribution_ValidateBarcode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "io/core/a_rpc_distribution.proto",
}
