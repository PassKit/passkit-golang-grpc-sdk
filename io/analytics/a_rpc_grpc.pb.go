//*
// Analytics RPC
//
// The PassKit Analytics API lets you track the performance of Apple Wallet and Google Pay passes.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: io/analytics/a_rpc.proto

package analytics

import (
	context "context"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Analytics_GetAnalytics_FullMethodName = "/analytics.Analytics/getAnalytics"
)

// AnalyticsClient is the client API for Analytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsClient interface {
	// Retrieve a daily, monthly or yearly record.
	GetAnalytics(ctx context.Context, in *io.AnalyticsRequest, opts ...grpc.CallOption) (*io.AnalyticsResponse, error)
}

type analyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsClient(cc grpc.ClientConnInterface) AnalyticsClient {
	return &analyticsClient{cc}
}

func (c *analyticsClient) GetAnalytics(ctx context.Context, in *io.AnalyticsRequest, opts ...grpc.CallOption) (*io.AnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.AnalyticsResponse)
	err := c.cc.Invoke(ctx, Analytics_GetAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServer is the server API for Analytics service.
// All implementations should embed UnimplementedAnalyticsServer
// for forward compatibility.
type AnalyticsServer interface {
	// Retrieve a daily, monthly or yearly record.
	GetAnalytics(context.Context, *io.AnalyticsRequest) (*io.AnalyticsResponse, error)
}

// UnimplementedAnalyticsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServer struct{}

func (UnimplementedAnalyticsServer) GetAnalytics(context.Context, *io.AnalyticsRequest) (*io.AnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalytics not implemented")
}
func (UnimplementedAnalyticsServer) testEmbeddedByValue() {}

// UnsafeAnalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServer will
// result in compilation errors.
type UnsafeAnalyticsServer interface {
	mustEmbedUnimplementedAnalyticsServer()
}

func RegisterAnalyticsServer(s grpc.ServiceRegistrar, srv AnalyticsServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Analytics_ServiceDesc, srv)
}

func _Analytics_GetAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.AnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analytics_GetAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetAnalytics(ctx, req.(*io.AnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Analytics_ServiceDesc is the grpc.ServiceDesc for Analytics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analytics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.Analytics",
	HandlerType: (*AnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAnalytics",
			Handler:    _Analytics_GetAnalytics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "io/analytics/a_rpc.proto",
}
