//*
// Members RPC
//
// The PassKit Members API lets you manage your membership programs and passes for Apple Wallet and Google Pay.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: io/member/a_rpc.proto

package members

import (
	context "context"
	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Members_CreateProgram_FullMethodName                    = "/members.Members/createProgram"
	Members_UpdateProgram_FullMethodName                    = "/members.Members/updateProgram"
	Members_GetProgram_FullMethodName                       = "/members.Members/getProgram"
	Members_CopyProgram_FullMethodName                      = "/members.Members/copyProgram"
	Members_DeleteProgram_FullMethodName                    = "/members.Members/deleteProgram"
	Members_ListProgramsDeprecated_FullMethodName           = "/members.Members/listProgramsDeprecated"
	Members_ListPrograms_FullMethodName                     = "/members.Members/listPrograms"
	Members_CreateTier_FullMethodName                       = "/members.Members/createTier"
	Members_UpdateTier_FullMethodName                       = "/members.Members/updateTier"
	Members_GetTier_FullMethodName                          = "/members.Members/getTier"
	Members_DeleteTier_FullMethodName                       = "/members.Members/deleteTier"
	Members_ListTiersDeprecated_FullMethodName              = "/members.Members/listTiersDeprecated"
	Members_ListTiers_FullMethodName                        = "/members.Members/listTiers"
	Members_EnrolMember_FullMethodName                      = "/members.Members/enrolMember"
	Members_EnrolMemberPublic_FullMethodName                = "/members.Members/enrolMemberPublic"
	Members_GetMemberRecordById_FullMethodName              = "/members.Members/getMemberRecordById"
	Members_GetMemberRecordByExternalId_FullMethodName      = "/members.Members/getMemberRecordByExternalId"
	Members_CheckInMember_FullMethodName                    = "/members.Members/checkInMember"
	Members_CheckOutMember_FullMethodName                   = "/members.Members/checkOutMember"
	Members_ListMembersDeprecated_FullMethodName            = "/members.Members/listMembersDeprecated"
	Members_ListMembers_FullMethodName                      = "/members.Members/listMembers"
	Members_UpdateMember_FullMethodName                     = "/members.Members/updateMember"
	Members_EarnPoints_FullMethodName                       = "/members.Members/earnPoints"
	Members_BurnPoints_FullMethodName                       = "/members.Members/burnPoints"
	Members_SetPoints_FullMethodName                        = "/members.Members/setPoints"
	Members_ChangeMemberTier_FullMethodName                 = "/members.Members/changeMemberTier"
	Members_UpdateMembersBySegment_FullMethodName           = "/members.Members/updateMembersBySegment"
	Members_DeleteMembersBySegment_FullMethodName           = "/members.Members/deleteMembersBySegment"
	Members_DeleteMember_FullMethodName                     = "/members.Members/deleteMember"
	Members_BulkDeleteMembers_FullMethodName                = "/members.Members/bulkDeleteMembers"
	Members_CountMembersDeprecated_FullMethodName           = "/members.Members/countMembersDeprecated"
	Members_CountMembers_FullMethodName                     = "/members.Members/countMembers"
	Members_GetMessageHistoryForMember_FullMethodName       = "/members.Members/getMessageHistoryForMember"
	Members_GetMetaKeysForProgram_FullMethodName            = "/members.Members/getMetaKeysForProgram"
	Members_RenewMembersExpiry_FullMethodName               = "/members.Members/renewMembersExpiry"
	Members_UpdateMemberExpiry_FullMethodName               = "/members.Members/updateMemberExpiry"
	Members_PatchPerson_FullMethodName                      = "/members.Members/patchPerson"
	Members_CountMemberEvents_FullMethodName                = "/members.Members/countMemberEvents"
	Members_ListMemberEvents_FullMethodName                 = "/members.Members/listMemberEvents"
	Members_GetMemberEventMetaKeysForProgram_FullMethodName = "/members.Members/getMemberEventMetaKeysForProgram"
	Members_ListEventsForMember_FullMethodName              = "/members.Members/listEventsForMember"
	Members_DeleteMemberEvents_FullMethodName               = "/members.Members/deleteMemberEvents"
	Members_DeleteEventsForMember_FullMethodName            = "/members.Members/deleteEventsForMember"
	Members_DeleteMemberEvent_FullMethodName                = "/members.Members/deleteMemberEvent"
	Members_GetProgramEnrolment_FullMethodName              = "/members.Members/getProgramEnrolment"
)

// MembersClient is the client API for Members service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MembersClient interface {
	// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
	CreateProgram(ctx context.Context, in *Program, opts ...grpc.CallOption) (*io.Id, error)
	// Updates an existing program record.
	UpdateProgram(ctx context.Context, in *Program, opts ...grpc.CallOption) (*Program, error)
	// Gets an existing program record by id.
	GetProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Program, error)
	// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
	CopyProgram(ctx context.Context, in *ProgramCopyRequest, opts ...grpc.CallOption) (*io.Id, error)
	// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
	DeleteProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all programs for the logged in user.
	ListProgramsDeprecated(ctx context.Context, in *io.Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Program], error)
	// Lists all programs for the logged in user.
	ListPrograms(ctx context.Context, in *io.Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Program], error)
	// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
	CreateTier(ctx context.Context, in *Tier, opts ...grpc.CallOption) (*io.Id, error)
	// Updates a tier by tier id
	UpdateTier(ctx context.Context, in *Tier, opts ...grpc.CallOption) (*Tier, error)
	// Gets a tier by tier ID
	GetTier(ctx context.Context, in *TierRequestInput, opts ...grpc.CallOption) (*Tier, error)
	// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
	DeleteTier(ctx context.Context, in *TierRequestInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all the tiers.
	ListTiersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tier], error)
	// Lists all the tiers.
	ListTiers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tier], error)
	// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
	EnrolMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error)
	// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
	EnrolMemberPublic(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error)
	GetMemberRecordById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Member, error)
	GetMemberRecordByExternalId(ctx context.Context, in *MemberRecordByExternalIdRequest, opts ...grpc.CallOption) (*Member, error)
	CheckInMember(ctx context.Context, in *MemberCheckInOutRequest, opts ...grpc.CallOption) (*MemberEvent, error)
	CheckOutMember(ctx context.Context, in *MemberCheckInOutRequest, opts ...grpc.CallOption) (*MemberEvent, error)
	ListMembersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Member], error)
	ListMembers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Member], error)
	UpdateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error)
	// @todo: define callback
	EarnPoints(ctx context.Context, in *EarnBurnPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error)
	// @todo: define callback
	BurnPoints(ctx context.Context, in *EarnBurnPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error)
	SetPoints(ctx context.Context, in *SetPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error)
	ChangeMemberTier(ctx context.Context, in *ChangeTierRequest, opts ...grpc.CallOption) (*MemberEvent, error)
	UpdateMembersBySegment(ctx context.Context, in *MemberSegmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMembersBySegment(ctx context.Context, in *MemberSegmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkDeleteMembers(ctx context.Context, in *io.BulkPassActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CountMembersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (*io.Count, error)
	CountMembers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*io.Count, error)
	GetMessageHistoryForMember(ctx context.Context, in *io.Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[io.Message], error)
	GetMetaKeysForProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*io.Strings, error)
	RenewMembersExpiry(ctx context.Context, in *UpdateExpiryRequest, opts ...grpc.CallOption) (*io.Count, error)
	UpdateMemberExpiry(ctx context.Context, in *MemberExpiry, opts ...grpc.CallOption) (*io.Id, error)
	PatchPerson(ctx context.Context, in *io.PersonRequest, opts ...grpc.CallOption) (*io.Id, error)
	CountMemberEvents(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*io.Count, error)
	ListMemberEvents(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MemberEvent], error)
	GetMemberEventMetaKeysForProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*io.Strings, error)
	ListEventsForMember(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MemberEvent], error)
	DeleteMemberEvents(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEventsForMember(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMemberEvent(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProgramEnrolment(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*io.EnrolmentUrls, error)
}

type membersClient struct {
	cc grpc.ClientConnInterface
}

func NewMembersClient(cc grpc.ClientConnInterface) MembersClient {
	return &membersClient{cc}
}

func (c *membersClient) CreateProgram(ctx context.Context, in *Program, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, Members_CreateProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) UpdateProgram(ctx context.Context, in *Program, opts ...grpc.CallOption) (*Program, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Program)
	err := c.cc.Invoke(ctx, Members_UpdateProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) GetProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Program, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Program)
	err := c.cc.Invoke(ctx, Members_GetProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) CopyProgram(ctx context.Context, in *ProgramCopyRequest, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, Members_CopyProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) DeleteProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Members_DeleteProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) ListProgramsDeprecated(ctx context.Context, in *io.Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Program], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Members_ServiceDesc.Streams[0], Members_ListProgramsDeprecated_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[io.Pagination, Program]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListProgramsDeprecatedClient = grpc.ServerStreamingClient[Program]

func (c *membersClient) ListPrograms(ctx context.Context, in *io.Filters, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Program], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Members_ServiceDesc.Streams[1], Members_ListPrograms_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[io.Filters, Program]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListProgramsClient = grpc.ServerStreamingClient[Program]

func (c *membersClient) CreateTier(ctx context.Context, in *Tier, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, Members_CreateTier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) UpdateTier(ctx context.Context, in *Tier, opts ...grpc.CallOption) (*Tier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tier)
	err := c.cc.Invoke(ctx, Members_UpdateTier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) GetTier(ctx context.Context, in *TierRequestInput, opts ...grpc.CallOption) (*Tier, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tier)
	err := c.cc.Invoke(ctx, Members_GetTier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) DeleteTier(ctx context.Context, in *TierRequestInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Members_DeleteTier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) ListTiersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tier], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Members_ServiceDesc.Streams[2], Members_ListTiersDeprecated_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRequestDeprecated, Tier]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListTiersDeprecatedClient = grpc.ServerStreamingClient[Tier]

func (c *membersClient) ListTiers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tier], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Members_ServiceDesc.Streams[3], Members_ListTiers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRequest, Tier]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListTiersClient = grpc.ServerStreamingClient[Tier]

func (c *membersClient) EnrolMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, Members_EnrolMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) EnrolMemberPublic(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, Members_EnrolMemberPublic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) GetMemberRecordById(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*Member, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Member)
	err := c.cc.Invoke(ctx, Members_GetMemberRecordById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) GetMemberRecordByExternalId(ctx context.Context, in *MemberRecordByExternalIdRequest, opts ...grpc.CallOption) (*Member, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Member)
	err := c.cc.Invoke(ctx, Members_GetMemberRecordByExternalId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) CheckInMember(ctx context.Context, in *MemberCheckInOutRequest, opts ...grpc.CallOption) (*MemberEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberEvent)
	err := c.cc.Invoke(ctx, Members_CheckInMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) CheckOutMember(ctx context.Context, in *MemberCheckInOutRequest, opts ...grpc.CallOption) (*MemberEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberEvent)
	err := c.cc.Invoke(ctx, Members_CheckOutMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) ListMembersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Member], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Members_ServiceDesc.Streams[4], Members_ListMembersDeprecated_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRequestDeprecated, Member]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListMembersDeprecatedClient = grpc.ServerStreamingClient[Member]

func (c *membersClient) ListMembers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Member], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Members_ServiceDesc.Streams[5], Members_ListMembers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRequest, Member]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListMembersClient = grpc.ServerStreamingClient[Member]

func (c *membersClient) UpdateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, Members_UpdateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) EarnPoints(ctx context.Context, in *EarnBurnPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberPoints)
	err := c.cc.Invoke(ctx, Members_EarnPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) BurnPoints(ctx context.Context, in *EarnBurnPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberPoints)
	err := c.cc.Invoke(ctx, Members_BurnPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) SetPoints(ctx context.Context, in *SetPointsRequest, opts ...grpc.CallOption) (*MemberPoints, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberPoints)
	err := c.cc.Invoke(ctx, Members_SetPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) ChangeMemberTier(ctx context.Context, in *ChangeTierRequest, opts ...grpc.CallOption) (*MemberEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberEvent)
	err := c.cc.Invoke(ctx, Members_ChangeMemberTier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) UpdateMembersBySegment(ctx context.Context, in *MemberSegmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Members_UpdateMembersBySegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) DeleteMembersBySegment(ctx context.Context, in *MemberSegmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Members_DeleteMembersBySegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) DeleteMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Members_DeleteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) BulkDeleteMembers(ctx context.Context, in *io.BulkPassActionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Members_BulkDeleteMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) CountMembersDeprecated(ctx context.Context, in *ListRequestDeprecated, opts ...grpc.CallOption) (*io.Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Count)
	err := c.cc.Invoke(ctx, Members_CountMembersDeprecated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) CountMembers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*io.Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Count)
	err := c.cc.Invoke(ctx, Members_CountMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) GetMessageHistoryForMember(ctx context.Context, in *io.Pagination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[io.Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Members_ServiceDesc.Streams[6], Members_GetMessageHistoryForMember_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[io.Pagination, io.Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_GetMessageHistoryForMemberClient = grpc.ServerStreamingClient[io.Message]

func (c *membersClient) GetMetaKeysForProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*io.Strings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Strings)
	err := c.cc.Invoke(ctx, Members_GetMetaKeysForProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) RenewMembersExpiry(ctx context.Context, in *UpdateExpiryRequest, opts ...grpc.CallOption) (*io.Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Count)
	err := c.cc.Invoke(ctx, Members_RenewMembersExpiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) UpdateMemberExpiry(ctx context.Context, in *MemberExpiry, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, Members_UpdateMemberExpiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) PatchPerson(ctx context.Context, in *io.PersonRequest, opts ...grpc.CallOption) (*io.Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Id)
	err := c.cc.Invoke(ctx, Members_PatchPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) CountMemberEvents(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*io.Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Count)
	err := c.cc.Invoke(ctx, Members_CountMemberEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) ListMemberEvents(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MemberEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Members_ServiceDesc.Streams[7], Members_ListMemberEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRequest, MemberEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListMemberEventsClient = grpc.ServerStreamingClient[MemberEvent]

func (c *membersClient) GetMemberEventMetaKeysForProgram(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*io.Strings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.Strings)
	err := c.cc.Invoke(ctx, Members_GetMemberEventMetaKeysForProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) ListEventsForMember(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MemberEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Members_ServiceDesc.Streams[8], Members_ListEventsForMember_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[io.Id, MemberEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListEventsForMemberClient = grpc.ServerStreamingClient[MemberEvent]

func (c *membersClient) DeleteMemberEvents(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Members_DeleteMemberEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) DeleteEventsForMember(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Members_DeleteEventsForMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) DeleteMemberEvent(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Members_DeleteMemberEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersClient) GetProgramEnrolment(ctx context.Context, in *io.Id, opts ...grpc.CallOption) (*io.EnrolmentUrls, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(io.EnrolmentUrls)
	err := c.cc.Invoke(ctx, Members_GetProgramEnrolment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembersServer is the server API for Members service.
// All implementations should embed UnimplementedMembersServer
// for forward compatibility.
type MembersServer interface {
	// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
	CreateProgram(context.Context, *Program) (*io.Id, error)
	// Updates an existing program record.
	UpdateProgram(context.Context, *Program) (*Program, error)
	// Gets an existing program record by id.
	GetProgram(context.Context, *io.Id) (*Program, error)
	// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
	CopyProgram(context.Context, *ProgramCopyRequest) (*io.Id, error)
	// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
	DeleteProgram(context.Context, *io.Id) (*emptypb.Empty, error)
	// Lists all programs for the logged in user.
	ListProgramsDeprecated(*io.Pagination, grpc.ServerStreamingServer[Program]) error
	// Lists all programs for the logged in user.
	ListPrograms(*io.Filters, grpc.ServerStreamingServer[Program]) error
	// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
	CreateTier(context.Context, *Tier) (*io.Id, error)
	// Updates a tier by tier id
	UpdateTier(context.Context, *Tier) (*Tier, error)
	// Gets a tier by tier ID
	GetTier(context.Context, *TierRequestInput) (*Tier, error)
	// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
	DeleteTier(context.Context, *TierRequestInput) (*emptypb.Empty, error)
	// Lists all the tiers.
	ListTiersDeprecated(*ListRequestDeprecated, grpc.ServerStreamingServer[Tier]) error
	// Lists all the tiers.
	ListTiers(*ListRequest, grpc.ServerStreamingServer[Tier]) error
	// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
	EnrolMember(context.Context, *Member) (*io.Id, error)
	// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
	EnrolMemberPublic(context.Context, *Member) (*io.Id, error)
	GetMemberRecordById(context.Context, *io.Id) (*Member, error)
	GetMemberRecordByExternalId(context.Context, *MemberRecordByExternalIdRequest) (*Member, error)
	CheckInMember(context.Context, *MemberCheckInOutRequest) (*MemberEvent, error)
	CheckOutMember(context.Context, *MemberCheckInOutRequest) (*MemberEvent, error)
	ListMembersDeprecated(*ListRequestDeprecated, grpc.ServerStreamingServer[Member]) error
	ListMembers(*ListRequest, grpc.ServerStreamingServer[Member]) error
	UpdateMember(context.Context, *Member) (*io.Id, error)
	// @todo: define callback
	EarnPoints(context.Context, *EarnBurnPointsRequest) (*MemberPoints, error)
	// @todo: define callback
	BurnPoints(context.Context, *EarnBurnPointsRequest) (*MemberPoints, error)
	SetPoints(context.Context, *SetPointsRequest) (*MemberPoints, error)
	ChangeMemberTier(context.Context, *ChangeTierRequest) (*MemberEvent, error)
	UpdateMembersBySegment(context.Context, *MemberSegmentRequest) (*emptypb.Empty, error)
	DeleteMembersBySegment(context.Context, *MemberSegmentRequest) (*emptypb.Empty, error)
	DeleteMember(context.Context, *Member) (*emptypb.Empty, error)
	BulkDeleteMembers(context.Context, *io.BulkPassActionRequest) (*emptypb.Empty, error)
	CountMembersDeprecated(context.Context, *ListRequestDeprecated) (*io.Count, error)
	CountMembers(context.Context, *ListRequest) (*io.Count, error)
	GetMessageHistoryForMember(*io.Pagination, grpc.ServerStreamingServer[io.Message]) error
	GetMetaKeysForProgram(context.Context, *io.Id) (*io.Strings, error)
	RenewMembersExpiry(context.Context, *UpdateExpiryRequest) (*io.Count, error)
	UpdateMemberExpiry(context.Context, *MemberExpiry) (*io.Id, error)
	PatchPerson(context.Context, *io.PersonRequest) (*io.Id, error)
	CountMemberEvents(context.Context, *ListRequest) (*io.Count, error)
	ListMemberEvents(*ListRequest, grpc.ServerStreamingServer[MemberEvent]) error
	GetMemberEventMetaKeysForProgram(context.Context, *io.Id) (*io.Strings, error)
	ListEventsForMember(*io.Id, grpc.ServerStreamingServer[MemberEvent]) error
	DeleteMemberEvents(context.Context, *ListRequest) (*emptypb.Empty, error)
	DeleteEventsForMember(context.Context, *io.Id) (*emptypb.Empty, error)
	DeleteMemberEvent(context.Context, *io.Id) (*emptypb.Empty, error)
	GetProgramEnrolment(context.Context, *io.Id) (*io.EnrolmentUrls, error)
}

// UnimplementedMembersServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMembersServer struct{}

func (UnimplementedMembersServer) CreateProgram(context.Context, *Program) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgram not implemented")
}
func (UnimplementedMembersServer) UpdateProgram(context.Context, *Program) (*Program, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgram not implemented")
}
func (UnimplementedMembersServer) GetProgram(context.Context, *io.Id) (*Program, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgram not implemented")
}
func (UnimplementedMembersServer) CopyProgram(context.Context, *ProgramCopyRequest) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyProgram not implemented")
}
func (UnimplementedMembersServer) DeleteProgram(context.Context, *io.Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProgram not implemented")
}
func (UnimplementedMembersServer) ListProgramsDeprecated(*io.Pagination, grpc.ServerStreamingServer[Program]) error {
	return status.Errorf(codes.Unimplemented, "method ListProgramsDeprecated not implemented")
}
func (UnimplementedMembersServer) ListPrograms(*io.Filters, grpc.ServerStreamingServer[Program]) error {
	return status.Errorf(codes.Unimplemented, "method ListPrograms not implemented")
}
func (UnimplementedMembersServer) CreateTier(context.Context, *Tier) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTier not implemented")
}
func (UnimplementedMembersServer) UpdateTier(context.Context, *Tier) (*Tier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTier not implemented")
}
func (UnimplementedMembersServer) GetTier(context.Context, *TierRequestInput) (*Tier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTier not implemented")
}
func (UnimplementedMembersServer) DeleteTier(context.Context, *TierRequestInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTier not implemented")
}
func (UnimplementedMembersServer) ListTiersDeprecated(*ListRequestDeprecated, grpc.ServerStreamingServer[Tier]) error {
	return status.Errorf(codes.Unimplemented, "method ListTiersDeprecated not implemented")
}
func (UnimplementedMembersServer) ListTiers(*ListRequest, grpc.ServerStreamingServer[Tier]) error {
	return status.Errorf(codes.Unimplemented, "method ListTiers not implemented")
}
func (UnimplementedMembersServer) EnrolMember(context.Context, *Member) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrolMember not implemented")
}
func (UnimplementedMembersServer) EnrolMemberPublic(context.Context, *Member) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrolMemberPublic not implemented")
}
func (UnimplementedMembersServer) GetMemberRecordById(context.Context, *io.Id) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberRecordById not implemented")
}
func (UnimplementedMembersServer) GetMemberRecordByExternalId(context.Context, *MemberRecordByExternalIdRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberRecordByExternalId not implemented")
}
func (UnimplementedMembersServer) CheckInMember(context.Context, *MemberCheckInOutRequest) (*MemberEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInMember not implemented")
}
func (UnimplementedMembersServer) CheckOutMember(context.Context, *MemberCheckInOutRequest) (*MemberEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOutMember not implemented")
}
func (UnimplementedMembersServer) ListMembersDeprecated(*ListRequestDeprecated, grpc.ServerStreamingServer[Member]) error {
	return status.Errorf(codes.Unimplemented, "method ListMembersDeprecated not implemented")
}
func (UnimplementedMembersServer) ListMembers(*ListRequest, grpc.ServerStreamingServer[Member]) error {
	return status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedMembersServer) UpdateMember(context.Context, *Member) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedMembersServer) EarnPoints(context.Context, *EarnBurnPointsRequest) (*MemberPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarnPoints not implemented")
}
func (UnimplementedMembersServer) BurnPoints(context.Context, *EarnBurnPointsRequest) (*MemberPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnPoints not implemented")
}
func (UnimplementedMembersServer) SetPoints(context.Context, *SetPointsRequest) (*MemberPoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPoints not implemented")
}
func (UnimplementedMembersServer) ChangeMemberTier(context.Context, *ChangeTierRequest) (*MemberEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMemberTier not implemented")
}
func (UnimplementedMembersServer) UpdateMembersBySegment(context.Context, *MemberSegmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembersBySegment not implemented")
}
func (UnimplementedMembersServer) DeleteMembersBySegment(context.Context, *MemberSegmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMembersBySegment not implemented")
}
func (UnimplementedMembersServer) DeleteMember(context.Context, *Member) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedMembersServer) BulkDeleteMembers(context.Context, *io.BulkPassActionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDeleteMembers not implemented")
}
func (UnimplementedMembersServer) CountMembersDeprecated(context.Context, *ListRequestDeprecated) (*io.Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMembersDeprecated not implemented")
}
func (UnimplementedMembersServer) CountMembers(context.Context, *ListRequest) (*io.Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMembers not implemented")
}
func (UnimplementedMembersServer) GetMessageHistoryForMember(*io.Pagination, grpc.ServerStreamingServer[io.Message]) error {
	return status.Errorf(codes.Unimplemented, "method GetMessageHistoryForMember not implemented")
}
func (UnimplementedMembersServer) GetMetaKeysForProgram(context.Context, *io.Id) (*io.Strings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaKeysForProgram not implemented")
}
func (UnimplementedMembersServer) RenewMembersExpiry(context.Context, *UpdateExpiryRequest) (*io.Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewMembersExpiry not implemented")
}
func (UnimplementedMembersServer) UpdateMemberExpiry(context.Context, *MemberExpiry) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberExpiry not implemented")
}
func (UnimplementedMembersServer) PatchPerson(context.Context, *io.PersonRequest) (*io.Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchPerson not implemented")
}
func (UnimplementedMembersServer) CountMemberEvents(context.Context, *ListRequest) (*io.Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMemberEvents not implemented")
}
func (UnimplementedMembersServer) ListMemberEvents(*ListRequest, grpc.ServerStreamingServer[MemberEvent]) error {
	return status.Errorf(codes.Unimplemented, "method ListMemberEvents not implemented")
}
func (UnimplementedMembersServer) GetMemberEventMetaKeysForProgram(context.Context, *io.Id) (*io.Strings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberEventMetaKeysForProgram not implemented")
}
func (UnimplementedMembersServer) ListEventsForMember(*io.Id, grpc.ServerStreamingServer[MemberEvent]) error {
	return status.Errorf(codes.Unimplemented, "method ListEventsForMember not implemented")
}
func (UnimplementedMembersServer) DeleteMemberEvents(context.Context, *ListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberEvents not implemented")
}
func (UnimplementedMembersServer) DeleteEventsForMember(context.Context, *io.Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventsForMember not implemented")
}
func (UnimplementedMembersServer) DeleteMemberEvent(context.Context, *io.Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberEvent not implemented")
}
func (UnimplementedMembersServer) GetProgramEnrolment(context.Context, *io.Id) (*io.EnrolmentUrls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramEnrolment not implemented")
}
func (UnimplementedMembersServer) testEmbeddedByValue() {}

// UnsafeMembersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MembersServer will
// result in compilation errors.
type UnsafeMembersServer interface {
	mustEmbedUnimplementedMembersServer()
}

func RegisterMembersServer(s grpc.ServiceRegistrar, srv MembersServer) {
	// If the following call pancis, it indicates UnimplementedMembersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Members_ServiceDesc, srv)
}

func _Members_CreateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Program)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CreateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_CreateProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CreateProgram(ctx, req.(*Program))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_UpdateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Program)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).UpdateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_UpdateProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).UpdateProgram(ctx, req.(*Program))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_GetProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_GetProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetProgram(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_CopyProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgramCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CopyProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_CopyProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CopyProgram(ctx, req.(*ProgramCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_DeleteProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).DeleteProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_DeleteProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).DeleteProgram(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_ListProgramsDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(io.Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListProgramsDeprecated(m, &grpc.GenericServerStream[io.Pagination, Program]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListProgramsDeprecatedServer = grpc.ServerStreamingServer[Program]

func _Members_ListPrograms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(io.Filters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListPrograms(m, &grpc.GenericServerStream[io.Filters, Program]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListProgramsServer = grpc.ServerStreamingServer[Program]

func _Members_CreateTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CreateTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_CreateTier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CreateTier(ctx, req.(*Tier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_UpdateTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).UpdateTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_UpdateTier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).UpdateTier(ctx, req.(*Tier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_GetTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TierRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_GetTier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetTier(ctx, req.(*TierRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_DeleteTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TierRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).DeleteTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_DeleteTier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).DeleteTier(ctx, req.(*TierRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_ListTiersDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequestDeprecated)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListTiersDeprecated(m, &grpc.GenericServerStream[ListRequestDeprecated, Tier]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListTiersDeprecatedServer = grpc.ServerStreamingServer[Tier]

func _Members_ListTiers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListTiers(m, &grpc.GenericServerStream[ListRequest, Tier]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListTiersServer = grpc.ServerStreamingServer[Tier]

func _Members_EnrolMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).EnrolMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_EnrolMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).EnrolMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_EnrolMemberPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).EnrolMemberPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_EnrolMemberPublic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).EnrolMemberPublic(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_GetMemberRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetMemberRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_GetMemberRecordById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetMemberRecordById(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_GetMemberRecordByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRecordByExternalIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetMemberRecordByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_GetMemberRecordByExternalId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetMemberRecordByExternalId(ctx, req.(*MemberRecordByExternalIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_CheckInMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCheckInOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CheckInMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_CheckInMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CheckInMember(ctx, req.(*MemberCheckInOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_CheckOutMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCheckInOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CheckOutMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_CheckOutMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CheckOutMember(ctx, req.(*MemberCheckInOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_ListMembersDeprecated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequestDeprecated)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListMembersDeprecated(m, &grpc.GenericServerStream[ListRequestDeprecated, Member]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListMembersDeprecatedServer = grpc.ServerStreamingServer[Member]

func _Members_ListMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListMembers(m, &grpc.GenericServerStream[ListRequest, Member]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListMembersServer = grpc.ServerStreamingServer[Member]

func _Members_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).UpdateMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_EarnPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EarnBurnPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).EarnPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_EarnPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).EarnPoints(ctx, req.(*EarnBurnPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_BurnPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EarnBurnPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).BurnPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_BurnPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).BurnPoints(ctx, req.(*EarnBurnPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_SetPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).SetPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_SetPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).SetPoints(ctx, req.(*SetPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_ChangeMemberTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).ChangeMemberTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_ChangeMemberTier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).ChangeMemberTier(ctx, req.(*ChangeTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_UpdateMembersBySegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).UpdateMembersBySegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_UpdateMembersBySegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).UpdateMembersBySegment(ctx, req.(*MemberSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_DeleteMembersBySegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).DeleteMembersBySegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_DeleteMembersBySegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).DeleteMembersBySegment(ctx, req.(*MemberSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).DeleteMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_BulkDeleteMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.BulkPassActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).BulkDeleteMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_BulkDeleteMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).BulkDeleteMembers(ctx, req.(*io.BulkPassActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_CountMembersDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequestDeprecated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CountMembersDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_CountMembersDeprecated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CountMembersDeprecated(ctx, req.(*ListRequestDeprecated))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_CountMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CountMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_CountMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CountMembers(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_GetMessageHistoryForMember_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(io.Pagination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).GetMessageHistoryForMember(m, &grpc.GenericServerStream[io.Pagination, io.Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_GetMessageHistoryForMemberServer = grpc.ServerStreamingServer[io.Message]

func _Members_GetMetaKeysForProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetMetaKeysForProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_GetMetaKeysForProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetMetaKeysForProgram(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_RenewMembersExpiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).RenewMembersExpiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_RenewMembersExpiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).RenewMembersExpiry(ctx, req.(*UpdateExpiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_UpdateMemberExpiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberExpiry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).UpdateMemberExpiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_UpdateMemberExpiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).UpdateMemberExpiry(ctx, req.(*MemberExpiry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_PatchPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.PersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).PatchPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_PatchPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).PatchPerson(ctx, req.(*io.PersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_CountMemberEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).CountMemberEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_CountMemberEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).CountMemberEvents(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_ListMemberEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListMemberEvents(m, &grpc.GenericServerStream[ListRequest, MemberEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListMemberEventsServer = grpc.ServerStreamingServer[MemberEvent]

func _Members_GetMemberEventMetaKeysForProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetMemberEventMetaKeysForProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_GetMemberEventMetaKeysForProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetMemberEventMetaKeysForProgram(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_ListEventsForMember_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(io.Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembersServer).ListEventsForMember(m, &grpc.GenericServerStream[io.Id, MemberEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Members_ListEventsForMemberServer = grpc.ServerStreamingServer[MemberEvent]

func _Members_DeleteMemberEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).DeleteMemberEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_DeleteMemberEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).DeleteMemberEvents(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_DeleteEventsForMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).DeleteEventsForMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_DeleteEventsForMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).DeleteEventsForMember(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_DeleteMemberEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).DeleteMemberEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_DeleteMemberEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).DeleteMemberEvent(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Members_GetProgramEnrolment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(io.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServer).GetProgramEnrolment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Members_GetProgramEnrolment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServer).GetProgramEnrolment(ctx, req.(*io.Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Members_ServiceDesc is the grpc.ServiceDesc for Members service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Members_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "members.Members",
	HandlerType: (*MembersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createProgram",
			Handler:    _Members_CreateProgram_Handler,
		},
		{
			MethodName: "updateProgram",
			Handler:    _Members_UpdateProgram_Handler,
		},
		{
			MethodName: "getProgram",
			Handler:    _Members_GetProgram_Handler,
		},
		{
			MethodName: "copyProgram",
			Handler:    _Members_CopyProgram_Handler,
		},
		{
			MethodName: "deleteProgram",
			Handler:    _Members_DeleteProgram_Handler,
		},
		{
			MethodName: "createTier",
			Handler:    _Members_CreateTier_Handler,
		},
		{
			MethodName: "updateTier",
			Handler:    _Members_UpdateTier_Handler,
		},
		{
			MethodName: "getTier",
			Handler:    _Members_GetTier_Handler,
		},
		{
			MethodName: "deleteTier",
			Handler:    _Members_DeleteTier_Handler,
		},
		{
			MethodName: "enrolMember",
			Handler:    _Members_EnrolMember_Handler,
		},
		{
			MethodName: "enrolMemberPublic",
			Handler:    _Members_EnrolMemberPublic_Handler,
		},
		{
			MethodName: "getMemberRecordById",
			Handler:    _Members_GetMemberRecordById_Handler,
		},
		{
			MethodName: "getMemberRecordByExternalId",
			Handler:    _Members_GetMemberRecordByExternalId_Handler,
		},
		{
			MethodName: "checkInMember",
			Handler:    _Members_CheckInMember_Handler,
		},
		{
			MethodName: "checkOutMember",
			Handler:    _Members_CheckOutMember_Handler,
		},
		{
			MethodName: "updateMember",
			Handler:    _Members_UpdateMember_Handler,
		},
		{
			MethodName: "earnPoints",
			Handler:    _Members_EarnPoints_Handler,
		},
		{
			MethodName: "burnPoints",
			Handler:    _Members_BurnPoints_Handler,
		},
		{
			MethodName: "setPoints",
			Handler:    _Members_SetPoints_Handler,
		},
		{
			MethodName: "changeMemberTier",
			Handler:    _Members_ChangeMemberTier_Handler,
		},
		{
			MethodName: "updateMembersBySegment",
			Handler:    _Members_UpdateMembersBySegment_Handler,
		},
		{
			MethodName: "deleteMembersBySegment",
			Handler:    _Members_DeleteMembersBySegment_Handler,
		},
		{
			MethodName: "deleteMember",
			Handler:    _Members_DeleteMember_Handler,
		},
		{
			MethodName: "bulkDeleteMembers",
			Handler:    _Members_BulkDeleteMembers_Handler,
		},
		{
			MethodName: "countMembersDeprecated",
			Handler:    _Members_CountMembersDeprecated_Handler,
		},
		{
			MethodName: "countMembers",
			Handler:    _Members_CountMembers_Handler,
		},
		{
			MethodName: "getMetaKeysForProgram",
			Handler:    _Members_GetMetaKeysForProgram_Handler,
		},
		{
			MethodName: "renewMembersExpiry",
			Handler:    _Members_RenewMembersExpiry_Handler,
		},
		{
			MethodName: "updateMemberExpiry",
			Handler:    _Members_UpdateMemberExpiry_Handler,
		},
		{
			MethodName: "patchPerson",
			Handler:    _Members_PatchPerson_Handler,
		},
		{
			MethodName: "countMemberEvents",
			Handler:    _Members_CountMemberEvents_Handler,
		},
		{
			MethodName: "getMemberEventMetaKeysForProgram",
			Handler:    _Members_GetMemberEventMetaKeysForProgram_Handler,
		},
		{
			MethodName: "deleteMemberEvents",
			Handler:    _Members_DeleteMemberEvents_Handler,
		},
		{
			MethodName: "deleteEventsForMember",
			Handler:    _Members_DeleteEventsForMember_Handler,
		},
		{
			MethodName: "deleteMemberEvent",
			Handler:    _Members_DeleteMemberEvent_Handler,
		},
		{
			MethodName: "getProgramEnrolment",
			Handler:    _Members_GetProgramEnrolment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listProgramsDeprecated",
			Handler:       _Members_ListProgramsDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listPrograms",
			Handler:       _Members_ListPrograms_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTiersDeprecated",
			Handler:       _Members_ListTiersDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listTiers",
			Handler:       _Members_ListTiers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listMembersDeprecated",
			Handler:       _Members_ListMembersDeprecated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listMembers",
			Handler:       _Members_ListMembers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getMessageHistoryForMember",
			Handler:       _Members_GetMessageHistoryForMember_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listMemberEvents",
			Handler:       _Members_ListMemberEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listEventsForMember",
			Handler:       _Members_ListEventsForMember_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "io/member/a_rpc.proto",
}
