//*
// Members
//
// Member information needs to be provided. Most member information is optional. If the Program has 'autoGenerateMemberID' set to true, then PassKit will take care of generating a 10 digit member ID for new members. Please note that the ID cannot be changed at a later stage.
// Member information is treated as PII and encrypted at rest. Member information is deleted or rendered unusable once the member record is deleted.
//
// addVoucher (to add a voucher to a member record).
// redeemVoucher (to redeem a coupon or voucher that a member might hold).
//
// cancelMembership: will probably need to be triggered from customer cancel page.
// renewMembership / extendMembership: will probably need to be triggered from customer website.
//
// listPromotions: lists history of all promotions for a member / tier / program
// extendMembershipFromStripe: contains a stripe_subscription_id, which we match against the member record (also would need to verify, the callback really comes from Stripe).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/member/member.proto

package members

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	io "github.com/PassKit/passkit-golang-grpc-sdk/io"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of allowed member statuses
type MemberStatus int32

const (
	// Member has successfully enrolled in the program.
	MemberStatus_ENROLLED MemberStatus = 0
	// Member is active.
	MemberStatus_ACTIVE MemberStatus = 1
	// Member is checked in.
	MemberStatus_CHECKED_IN MemberStatus = 2
	// For expired members.
	MemberStatus_EXPIRED MemberStatus = 3
	// Member is checked out.
	MemberStatus_CHECKED_OUT MemberStatus = 4
	// For members who's records have been deleted.
	MemberStatus_DELETED MemberStatus = 5
)

// Enum value maps for MemberStatus.
var (
	MemberStatus_name = map[int32]string{
		0: "ENROLLED",
		1: "ACTIVE",
		2: "CHECKED_IN",
		3: "EXPIRED",
		4: "CHECKED_OUT",
		5: "DELETED",
	}
	MemberStatus_value = map[string]int32{
		"ENROLLED":    0,
		"ACTIVE":      1,
		"CHECKED_IN":  2,
		"EXPIRED":     3,
		"CHECKED_OUT": 4,
		"DELETED":     5,
	}
)

func (x MemberStatus) Enum() *MemberStatus {
	p := new(MemberStatus)
	*p = x
	return p
}

func (x MemberStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemberStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_io_member_member_proto_enumTypes[0].Descriptor()
}

func (MemberStatus) Type() protoreflect.EnumType {
	return &file_io_member_member_proto_enumTypes[0]
}

func (x MemberStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemberStatus.Descriptor instead.
func (MemberStatus) EnumDescriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{0}
}

// The member record
type Member struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id assigned by PassKit to represent the member record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable.
	// @tag: validateGeneric:"required" validateCreate:"-" validateUpdate:"-"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required" validateCreate:"-" validateUpdate:"-"`
	// This can be used to set the 'external' ID of the member (i.e. the member ID as it's being used in your system). If provided then this can be used to query & update members. This field will be treated as unique within the program, and cannot be updated at a later stage.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	ExternalId string `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Grouping Identifier can be used to group members under the same membership (i.e. couple).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	GroupingIdentifier string `protobuf:"bytes,3,opt,name=groupingIdentifier,proto3" json:"groupingIdentifier,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Indicates the ID of the tier this member is in.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"
	TierId string `protobuf:"bytes,4,opt,name=tierId,proto3" json:"tierId,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"`
	// Indicates the ID of the program this member is in.
	// @tag: validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"
	ProgramId string `protobuf:"bytes,5,opt,name=programId,proto3" json:"programId,omitempty" validateGeneric:"omitempty" validateCreate:"required" validateUpdate:"omitempty"`
	// Personal details of the member.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Person *io.Person `protobuf:"bytes,6,opt,name=person,proto3" json:"person,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Any other meta fields for the member that are not covered in the protocol (i.e. you might want to captures sign-up location, and favorite coffee, for segmenting later on).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	MetaData map[string]string `protobuf:"bytes,7,rep,name=metaData,proto3" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Indicates if the member opted out to receive marketing promotions (defaults to false).
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	OptOut bool `protobuf:"varint,13,opt,name=optOut,proto3" json:"optOut,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Points is formatted differently based on what is set on a program level. Program points.balance field can be set to: `int`, `double` or `money`.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Points float32 `protobuf:"fixed32,14,opt,name=points,proto3" json:"points,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Secondary Points is formatted differently based on what is set on a program level. Program secondaryPoints.balance field can be set to: `int`, `double` or `money`. Field can be utilised if your program tracks two points, i.e. loyalty point balance, and pre-paid cash balance.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	SecondaryPoints float32 `protobuf:"fixed32,15,opt,name=secondaryPoints,proto3" json:"secondaryPoints,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Tier points can be set for programs that award tiers based on dedicated tier points. Tier points indicates the current amount of tier points someone has, and can be used by a member to check how many more tier points are required to switch to the next tier.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	TierPoints uint32 `protobuf:"varint,16,opt,name=tierPoints,proto3" json:"tierPoints,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Indicates when the membership card expires. When the expiry date hits, it will automatically gray out the barcode. Records that have been expired for longer than 90 days will be permanently deleted.  A pass that has expired can be reactivated by updating the expiry date.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	ExpiryDate *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=expiryDate,proto3" json:"expiryDate,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// Member status.
	Status MemberStatus `protobuf:"varint,19,opt,name=status,proto3,enum=members.MemberStatus" json:"status,omitempty"`
	// Pass level overrides for proximity & images.
	PassOverrides *io.PassOverrides `protobuf:"bytes,20,opt,name=passOverrides,proto3" json:"passOverrides,omitempty"`
	// Pass Metadata.
	PassMetaData *io.Metadata `protobuf:"bytes,21,opt,name=passMetaData,proto3" json:"passMetaData,omitempty"`
	// placeholder for notes.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Notes []*io.Note `protobuf:"bytes,26,rep,name=notes,proto3" json:"notes,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date the current tier was awarded.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	CurrentTierAwarded *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=currentTierAwarded,proto3" json:"currentTierAwarded,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date the current tier expires.
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	CurrentTierExpires *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=currentTierExpires,proto3" json:"currentTierExpires,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// The date the member was created in the PassKit system.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=created,proto3" json:"created,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// The date the member was last updated in the PassKit system.
	// @tag: validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"
	Updated *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=updated,proto3" json:"updated,omitempty" validateGeneric:"isdefault" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// Optional field that holds the member profile image. Can either be an image URL or base64 image string.
	ProfileImage string `protobuf:"bytes,31,opt,name=profileImage,proto3" json:"profileImage,omitempty"`
	// Optional field to provide the operation that you want to perform when sending a member in an update request.  PUT will replace all values provided in the MemberRequest, whereas PATCH will ignore missing or falsey values.  To maintain compatibility with previous releases, the default value is PATCH.
	Operation     io.Operation `protobuf:"varint,100,opt,name=operation,proto3,enum=io.Operation" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Member) Reset() {
	*x = Member{}
	mi := &file_io_member_member_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{0}
}

func (x *Member) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Member) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Member) GetGroupingIdentifier() string {
	if x != nil {
		return x.GroupingIdentifier
	}
	return ""
}

func (x *Member) GetTierId() string {
	if x != nil {
		return x.TierId
	}
	return ""
}

func (x *Member) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *Member) GetPerson() *io.Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *Member) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *Member) GetOptOut() bool {
	if x != nil {
		return x.OptOut
	}
	return false
}

func (x *Member) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Member) GetSecondaryPoints() float32 {
	if x != nil {
		return x.SecondaryPoints
	}
	return 0
}

func (x *Member) GetTierPoints() uint32 {
	if x != nil {
		return x.TierPoints
	}
	return 0
}

func (x *Member) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

func (x *Member) GetStatus() MemberStatus {
	if x != nil {
		return x.Status
	}
	return MemberStatus_ENROLLED
}

func (x *Member) GetPassOverrides() *io.PassOverrides {
	if x != nil {
		return x.PassOverrides
	}
	return nil
}

func (x *Member) GetPassMetaData() *io.Metadata {
	if x != nil {
		return x.PassMetaData
	}
	return nil
}

func (x *Member) GetNotes() []*io.Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Member) GetCurrentTierAwarded() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentTierAwarded
	}
	return nil
}

func (x *Member) GetCurrentTierExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentTierExpires
	}
	return nil
}

func (x *Member) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Member) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Member) GetProfileImage() string {
	if x != nil {
		return x.ProfileImage
	}
	return ""
}

func (x *Member) GetOperation() io.Operation {
	if x != nil {
		return x.Operation
	}
	return io.Operation(0)
}

// Used to request a digital membership pass by PassKit ID.
type MemberRecordByExternalIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Program ID.
	// @tag: validateGeneric:"required"
	ProgramId string `protobuf:"bytes,1,opt,name=programId,proto3" json:"programId,omitempty" validateGeneric:"required"`
	// External ID.
	// @tag: validateGeneric:"required"
	ExternalId    string `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemberRecordByExternalIdRequest) Reset() {
	*x = MemberRecordByExternalIdRequest{}
	mi := &file_io_member_member_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberRecordByExternalIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberRecordByExternalIdRequest) ProtoMessage() {}

func (x *MemberRecordByExternalIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberRecordByExternalIdRequest.ProtoReflect.Descriptor instead.
func (*MemberRecordByExternalIdRequest) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{1}
}

func (x *MemberRecordByExternalIdRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *MemberRecordByExternalIdRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

// Member segment allows us to segment members for listing or updating
type MemberSegmentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional filter object; defines the segment.
	Filter *io.Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Contains fields to update (optional: if used in update context).
	NewValues     *Member `protobuf:"bytes,2,opt,name=newValues,proto3" json:"newValues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemberSegmentRequest) Reset() {
	*x = MemberSegmentRequest{}
	mi := &file_io_member_member_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberSegmentRequest) ProtoMessage() {}

func (x *MemberSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberSegmentRequest.ProtoReflect.Descriptor instead.
func (*MemberSegmentRequest) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{2}
}

func (x *MemberSegmentRequest) GetFilter() *io.Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *MemberSegmentRequest) GetNewValues() *Member {
	if x != nil {
		return x.NewValues
	}
	return nil
}

// Used to set new expiry dates for all of active members in the tier.
type UpdateExpiryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates the ID of the program.
	// @tag: validateUpdate:"required"
	ProgramId string `protobuf:"bytes,1,opt,name=programId,proto3" json:"programId,omitempty" validateUpdate:"required"`
	// Indicates the ID of the tier.
	// @tag: validateUpdate:"required"
	TierId string `protobuf:"bytes,2,opt,name=tierId,proto3" json:"tierId,omitempty" validateUpdate:"required"`
	// Expiry date setting you want to apply for this update.
	// @tag: validateUpdate:"required"
	ExpirySettings *io.ExpirySettings `protobuf:"bytes,3,opt,name=expirySettings,proto3" json:"expirySettings,omitempty" validateUpdate:"required"`
	// Timezone string in IANA timezone format applied for EXPIRE_ON_FIXED_DATE. If not provided Tier timezone is applied.
	// @tag: validateUpdate:"omitempty,ianaTimeZone"
	Timezone      string `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty" validateUpdate:"omitempty,ianaTimeZone"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateExpiryRequest) Reset() {
	*x = UpdateExpiryRequest{}
	mi := &file_io_member_member_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExpiryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExpiryRequest) ProtoMessage() {}

func (x *UpdateExpiryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExpiryRequest.ProtoReflect.Descriptor instead.
func (*UpdateExpiryRequest) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateExpiryRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *UpdateExpiryRequest) GetTierId() string {
	if x != nil {
		return x.TierId
	}
	return ""
}

func (x *UpdateExpiryRequest) GetExpirySettings() *io.ExpirySettings {
	if x != nil {
		return x.ExpirySettings
	}
	return nil
}

func (x *UpdateExpiryRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

// Used to update the expiry date of a member.
type MemberExpiry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Internal PassKit ID.
	// @tag: validateUpdate:"required_without=ExternalId"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateUpdate:"required_without=ExternalId"`
	// External member ID.
	// @tag: validateUpdate:"required_without=Id"
	ExternalId string `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty" validateUpdate:"required_without=Id"`
	// Required if externalId is set.
	// @tag: validateUpdate:"required_without=Id"
	ProgramId string `protobuf:"bytes,3,opt,name=programId,proto3" json:"programId,omitempty" validateUpdate:"required_without=Id"`
	// Indicates when the membership card expires. When the expiry date hits, it will automatically gray out the barcode.
	// @tag: validateUpdate:"required"
	ExpiryDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiryDate,proto3" json:"expiryDate,omitempty" validateUpdate:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemberExpiry) Reset() {
	*x = MemberExpiry{}
	mi := &file_io_member_member_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberExpiry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberExpiry) ProtoMessage() {}

func (x *MemberExpiry) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberExpiry.ProtoReflect.Descriptor instead.
func (*MemberExpiry) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{4}
}

func (x *MemberExpiry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MemberExpiry) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *MemberExpiry) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *MemberExpiry) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

type MemberPoints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Internal PassKit ID.
	// @tag: validateGeneric:"required_without=ExternalId"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required_without=ExternalId"`
	// External member ID.
	// @tag: validateGeneric:"required_without=Id"
	ExternalId string `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty" validateGeneric:"required_without=Id"`
	// Required if externalId is set.
	// @tag: validateGeneric:"required_without=Id"
	ProgramId string `protobuf:"bytes,3,opt,name=programId,proto3" json:"programId,omitempty" validateGeneric:"required_without=Id"`
	// The latest point balance.
	// @tag: validateGeneric:"required_without_all=SecondaryPoints TierPoints"
	Points float32 `protobuf:"fixed32,4,opt,name=points,proto3" json:"points,omitempty" validateGeneric:"required_without_all=SecondaryPoints TierPoints"`
	// The latest secondary point balance.
	// @tag: validateGeneric:"required_without_all=Points TierPoints"
	SecondaryPoints float32 `protobuf:"fixed32,5,opt,name=secondaryPoints,proto3" json:"secondaryPoints,omitempty" validateGeneric:"required_without_all=Points TierPoints"`
	// The latest tier point balance.
	// @tag: validateGeneric:"required_without_all=Points SecondaryPoints"
	TierPoints    uint32 `protobuf:"varint,6,opt,name=tierPoints,proto3" json:"tierPoints,omitempty" validateGeneric:"required_without_all=Points SecondaryPoints"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemberPoints) Reset() {
	*x = MemberPoints{}
	mi := &file_io_member_member_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberPoints) ProtoMessage() {}

func (x *MemberPoints) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberPoints.ProtoReflect.Descriptor instead.
func (*MemberPoints) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{5}
}

func (x *MemberPoints) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MemberPoints) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *MemberPoints) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *MemberPoints) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *MemberPoints) GetSecondaryPoints() float32 {
	if x != nil {
		return x.SecondaryPoints
	}
	return 0
}

func (x *MemberPoints) GetTierPoints() uint32 {
	if x != nil {
		return x.TierPoints
	}
	return 0
}

type EarnBurnPointsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Internal PassKit ID.
	// @tag: validateGeneric:"required_without=ExternalId"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required_without=ExternalId"`
	// External member ID.
	// @tag: validateGeneric:"required_without=Id"
	ExternalId string `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty" validateGeneric:"required_without=Id"`
	// Required if externalId is set.
	// @tag: validateGeneric:"required_without=Id"
	ProgramId string `protobuf:"bytes,3,opt,name=programId,proto3" json:"programId,omitempty" validateGeneric:"required_without=Id"`
	// The amount of primary points earned or burnt. The amount needs to be greater than or equal to 0.
	// @tag: validateGeneric:"required_without_all=SecondaryPoints TierPoints,gte=0"
	Points float32 `protobuf:"fixed32,4,opt,name=points,proto3" json:"points,omitempty" validateGeneric:"required_without_all=SecondaryPoints TierPoints,gte=0"`
	// The amount of secondary points earned or burnt. The amount needs to be greater than or equal to 0.
	// @tag: validateGeneric:"required_without_all=Points TierPoints,gte=0"
	SecondaryPoints float32 `protobuf:"fixed32,5,opt,name=secondaryPoints,proto3" json:"secondaryPoints,omitempty" validateGeneric:"required_without_all=Points TierPoints,gte=0"`
	// The amount of tier points earned or burnt. The amount needs to be greater than or equal to 0.
	// @tag: validateGeneric:"required_without_all=Points SecondaryPoints"
	TierPoints uint32 `protobuf:"varint,6,opt,name=tierPoints,proto3" json:"tierPoints,omitempty" validateGeneric:"required_without_all=Points SecondaryPoints"`
	// @tag: validateGeneric:"omitempty"
	EventDetails *EventDetails `protobuf:"bytes,7,opt,name=eventDetails,proto3" json:"eventDetails,omitempty" validateGeneric:"omitempty"`
	// Optional field to change the tierIf of the member.
	// @tag: validateGeneric:"omitempty"
	TierId        string `protobuf:"bytes,8,opt,name=tierId,proto3" json:"tierId,omitempty" validateGeneric:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EarnBurnPointsRequest) Reset() {
	*x = EarnBurnPointsRequest{}
	mi := &file_io_member_member_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EarnBurnPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarnBurnPointsRequest) ProtoMessage() {}

func (x *EarnBurnPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarnBurnPointsRequest.ProtoReflect.Descriptor instead.
func (*EarnBurnPointsRequest) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{6}
}

func (x *EarnBurnPointsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EarnBurnPointsRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *EarnBurnPointsRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *EarnBurnPointsRequest) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *EarnBurnPointsRequest) GetSecondaryPoints() float32 {
	if x != nil {
		return x.SecondaryPoints
	}
	return 0
}

func (x *EarnBurnPointsRequest) GetTierPoints() uint32 {
	if x != nil {
		return x.TierPoints
	}
	return 0
}

func (x *EarnBurnPointsRequest) GetEventDetails() *EventDetails {
	if x != nil {
		return x.EventDetails
	}
	return nil
}

func (x *EarnBurnPointsRequest) GetTierId() string {
	if x != nil {
		return x.TierId
	}
	return ""
}

type SetPointsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Internal PassKit ID.
	// @tag: validateGeneric:"required_without=ExternalId"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateGeneric:"required_without=ExternalId"`
	// External member ID.
	// @tag: validateGeneric:"required_without=Id"
	ExternalId string `protobuf:"bytes,2,opt,name=externalId,proto3" json:"externalId,omitempty" validateGeneric:"required_without=Id"`
	// Required if externalId is set.
	// @tag: validateGeneric:"required_without=Id"
	ProgramId string `protobuf:"bytes,3,opt,name=programId,proto3" json:"programId,omitempty" validateGeneric:"required_without=Id"`
	// The latest point balance.
	// @tag: validateGeneric:"required_without_all=SecondaryPoints TierPoints ResetPoints ResetSecondaryPoints ResetTierPoints"
	Points float32 `protobuf:"fixed32,4,opt,name=points,proto3" json:"points,omitempty" validateGeneric:"required_without_all=SecondaryPoints TierPoints ResetPoints ResetSecondaryPoints ResetTierPoints"`
	// The latest secondary point balance.
	SecondaryPoints float32 `protobuf:"fixed32,5,opt,name=secondaryPoints,proto3" json:"secondaryPoints,omitempty"`
	// The latest tier point balance.
	TierPoints uint32 `protobuf:"varint,6,opt,name=tierPoints,proto3" json:"tierPoints,omitempty"`
	// Reset the point balance. If set true, the point balance will be 0. The default is false.
	ResetPoints bool `protobuf:"varint,7,opt,name=resetPoints,proto3" json:"resetPoints,omitempty"`
	// Reset the secondary points. If set true, the secondary point balance will be 0. The default is false.
	ResetSecondaryPoints bool `protobuf:"varint,8,opt,name=resetSecondaryPoints,proto3" json:"resetSecondaryPoints,omitempty"`
	// Reset the tier points. If set true, the tier point balance will be 0. The default is false.
	ResetTierPoints bool `protobuf:"varint,9,opt,name=resetTierPoints,proto3" json:"resetTierPoints,omitempty"`
	// @tag: validateGeneric:"omitempty"
	EventDetails *EventDetails `protobuf:"bytes,10,opt,name=eventDetails,proto3" json:"eventDetails,omitempty" validateGeneric:"omitempty"`
	// Optional field to change the tierIf of the member.
	// @tag: validateGeneric:"omitempty"
	TierId        string `protobuf:"bytes,11,opt,name=tierId,proto3" json:"tierId,omitempty" validateGeneric:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPointsRequest) Reset() {
	*x = SetPointsRequest{}
	mi := &file_io_member_member_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPointsRequest) ProtoMessage() {}

func (x *SetPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPointsRequest.ProtoReflect.Descriptor instead.
func (*SetPointsRequest) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{7}
}

func (x *SetPointsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetPointsRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *SetPointsRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *SetPointsRequest) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *SetPointsRequest) GetSecondaryPoints() float32 {
	if x != nil {
		return x.SecondaryPoints
	}
	return 0
}

func (x *SetPointsRequest) GetTierPoints() uint32 {
	if x != nil {
		return x.TierPoints
	}
	return 0
}

func (x *SetPointsRequest) GetResetPoints() bool {
	if x != nil {
		return x.ResetPoints
	}
	return false
}

func (x *SetPointsRequest) GetResetSecondaryPoints() bool {
	if x != nil {
		return x.ResetSecondaryPoints
	}
	return false
}

func (x *SetPointsRequest) GetResetTierPoints() bool {
	if x != nil {
		return x.ResetTierPoints
	}
	return false
}

func (x *SetPointsRequest) GetEventDetails() *EventDetails {
	if x != nil {
		return x.EventDetails
	}
	return nil
}

func (x *SetPointsRequest) GetTierId() string {
	if x != nil {
		return x.TierId
	}
	return ""
}

type MemberCheckInOutRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated member ID (22 characters). Required if externalMemberId and programId are not provided.
	// @tag: validateCreate:"required_without=ExternalMemberId"
	MemberId string `protobuf:"bytes,1,opt,name=memberId,proto3" json:"memberId,omitempty" validateCreate:"required_without=ExternalMemberId"`
	// External member ID. Required if id is not provided.
	// @tag: validateCreate:"required_without=MemberId"
	ExternalMemberId string `protobuf:"bytes,2,opt,name=externalMemberId,proto3" json:"externalMemberId,omitempty" validateCreate:"required_without=MemberId"`
	// Program ID which member belongs to. Required if id is not provided.
	// @tag: validateCreate:"required_without=MemberId"
	ProgramId string `protobuf:"bytes,3,opt,name=programId,proto3" json:"programId,omitempty" validateCreate:"required_without=MemberId"`
	// Address the event took place.
	// @tag: validateCreate:"omitempty,max=255"
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty" validateCreate:"omitempty,max=255"`
	// Latitude the event took place.
	// @tag: validateCreate:"omitempty"
	Lat float64 `protobuf:"fixed64,5,opt,name=lat,proto3" json:"lat,omitempty" validateCreate:"omitempty"`
	// Longitude the event took place.
	// @tag: validateCreate:"omitempty"
	Lon float64 `protobuf:"fixed64,6,opt,name=lon,proto3" json:"lon,omitempty" validateCreate:"omitempty"`
	// Altitude the event took place (in metres).
	// @tag: validateCreate:"omitempty"
	Alt int32 `protobuf:"varint,7,opt,name=alt,proto3" json:"alt,omitempty" validateCreate:"omitempty"`
	// External unique ID of the event.
	// @tag: validateCreate:"omitempty,max=255"
	ExternalEventId string `protobuf:"bytes,8,opt,name=externalEventId,proto3" json:"externalEventId,omitempty" validateCreate:"omitempty,max=255"`
	// External device ID of the device that was used to capture the event (for example when using an external scanning app).
	// @tag: validateCreate:"omitempty,max=255"
	ExternalDeviceId string `protobuf:"bytes,9,opt,name=externalDeviceId,proto3" json:"externalDeviceId,omitempty" validateCreate:"omitempty,max=255"`
	// External service ID of the service that was used for capturing the event (for example when using an external scanning app).
	// @tag: validateCreate:"omitempty,max=255"
	ExternalServiceId string `protobuf:"bytes,10,opt,name=externalServiceId,proto3" json:"externalServiceId,omitempty" validateCreate:"omitempty,max=255"`
	// Any meta data (for example gathered on scanning) that is relevant to the event (# of points earner, bill spent, device meta-data, etc).
	// @tag: validateCreate:"omitempty"
	MetaData map[string]string `protobuf:"bytes,11,rep,name=metaData,proto3" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value" validateCreate:"omitempty"`
	// Any relevant notes for the event.
	// @tag: validateCreate:"omitempty"
	Notes string `protobuf:"bytes,12,opt,name=notes,proto3" json:"notes,omitempty" validateCreate:"omitempty"`
	// External user ID of the logged in user that captured the event (for example when using an external scanning app).
	// @tag: validateCreate:"omitempty,max=255"
	ExternalUserId string `protobuf:"bytes,13,opt,name=externalUserId,proto3" json:"externalUserId,omitempty" validateCreate:"omitempty,max=255"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MemberCheckInOutRequest) Reset() {
	*x = MemberCheckInOutRequest{}
	mi := &file_io_member_member_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberCheckInOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberCheckInOutRequest) ProtoMessage() {}

func (x *MemberCheckInOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberCheckInOutRequest.ProtoReflect.Descriptor instead.
func (*MemberCheckInOutRequest) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{8}
}

func (x *MemberCheckInOutRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *MemberCheckInOutRequest) GetExternalMemberId() string {
	if x != nil {
		return x.ExternalMemberId
	}
	return ""
}

func (x *MemberCheckInOutRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *MemberCheckInOutRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MemberCheckInOutRequest) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *MemberCheckInOutRequest) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *MemberCheckInOutRequest) GetAlt() int32 {
	if x != nil {
		return x.Alt
	}
	return 0
}

func (x *MemberCheckInOutRequest) GetExternalEventId() string {
	if x != nil {
		return x.ExternalEventId
	}
	return ""
}

func (x *MemberCheckInOutRequest) GetExternalDeviceId() string {
	if x != nil {
		return x.ExternalDeviceId
	}
	return ""
}

func (x *MemberCheckInOutRequest) GetExternalServiceId() string {
	if x != nil {
		return x.ExternalServiceId
	}
	return ""
}

func (x *MemberCheckInOutRequest) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *MemberCheckInOutRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MemberCheckInOutRequest) GetExternalUserId() string {
	if x != nil {
		return x.ExternalUserId
	}
	return ""
}

type ListRequestDeprecated struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	ProgramId string `protobuf:"bytes,1,opt,name=programId,proto3" json:"programId,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Pagination    *io.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequestDeprecated) Reset() {
	*x = ListRequestDeprecated{}
	mi := &file_io_member_member_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequestDeprecated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequestDeprecated) ProtoMessage() {}

func (x *ListRequestDeprecated) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequestDeprecated.ProtoReflect.Descriptor instead.
func (*ListRequestDeprecated) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{9}
}

func (x *ListRequestDeprecated) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *ListRequestDeprecated) GetPagination() *io.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required" validateCreate:"required" validateUpdate:"required"
	ProgramId string `protobuf:"bytes,1,opt,name=programId,proto3" json:"programId,omitempty" validateGeneric:"required" validateCreate:"required" validateUpdate:"required"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	Filters *io.Filters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	// @tag: validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"
	EmailAsCsv    bool `protobuf:"varint,3,opt,name=emailAsCsv,proto3" json:"emailAsCsv,omitempty" validateGeneric:"omitempty" validateCreate:"omitempty" validateUpdate:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_io_member_member_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{10}
}

func (x *ListRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *ListRequest) GetFilters() *io.Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListRequest) GetEmailAsCsv() bool {
	if x != nil {
		return x.EmailAsCsv
	}
	return false
}

type ChangeTierRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PassKit generated member ID (22 characters). Required if externalMemberId and programId are not provided.
	// @tag: validateUpdate:"required_without=ExternalMemberId"
	MemberId string `protobuf:"bytes,1,opt,name=memberId,proto3" json:"memberId,omitempty" validateUpdate:"required_without=ExternalMemberId"`
	// External member ID. Required if id is not provided.
	// @tag: validateUpdate:"omitempty"
	ExternalMemberId string `protobuf:"bytes,2,opt,name=externalMemberId,proto3" json:"externalMemberId,omitempty" validateUpdate:"omitempty"`
	// Program ID which member belongs to. Required if id is not provided.
	// @tag: validateUpdate:"required_with=ExternalMemberId"
	ProgramId string `protobuf:"bytes,3,opt,name=programId,proto3" json:"programId,omitempty" validateUpdate:"required_with=ExternalMemberId"`
	// Indicates the ID of the tier.
	// @tag: validateUpdate:"required"
	TierId string `protobuf:"bytes,4,opt,name=tierId,proto3" json:"tierId,omitempty" validateUpdate:"required"`
	// @tag: validateUpdate:"omitempty"
	EventDetails  *EventDetails `protobuf:"bytes,7,opt,name=eventDetails,proto3" json:"eventDetails,omitempty" validateUpdate:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeTierRequest) Reset() {
	*x = ChangeTierRequest{}
	mi := &file_io_member_member_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeTierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTierRequest) ProtoMessage() {}

func (x *ChangeTierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_member_member_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTierRequest.ProtoReflect.Descriptor instead.
func (*ChangeTierRequest) Descriptor() ([]byte, []int) {
	return file_io_member_member_proto_rawDescGZIP(), []int{11}
}

func (x *ChangeTierRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

func (x *ChangeTierRequest) GetExternalMemberId() string {
	if x != nil {
		return x.ExternalMemberId
	}
	return ""
}

func (x *ChangeTierRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *ChangeTierRequest) GetTierId() string {
	if x != nil {
		return x.TierId
	}
	return ""
}

func (x *ChangeTierRequest) GetEventDetails() *EventDetails {
	if x != nil {
		return x.EventDetails
	}
	return nil
}

var File_io_member_member_proto protoreflect.FileDescriptor

var file_io_member_member_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x69, 0x6f, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x69, 0x6f, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x69, 0x6f, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc4, 0x09, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x69, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6f,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0d,
	0x70, 0x61, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x69, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x65, 0x72, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x69, 0x6f, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x8c, 0x01, 0x92, 0x41, 0x88, 0x01, 0x0a, 0x85, 0x01, 0x2a, 0x06, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x32, 0x66, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x20, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x75, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x6f, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0xd2, 0x01, 0x06, 0x74, 0x69,
	0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a,
	0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04,
	0x08, 0x16, 0x10, 0x17, 0x4a, 0x04, 0x08, 0x17, 0x10, 0x18, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19,
	0x4a, 0x04, 0x08, 0x19, 0x10, 0x1a, 0x22, 0x5f, 0x0a, 0x1f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x14, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x15, 0x45, 0x61, 0x72, 0x6e, 0x42, 0x75, 0x72,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x39,
	0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x95, 0x03, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x65, 0x72,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x65, 0x72,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9a, 0x04, 0x0a, 0x17, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x4a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x43, 0x73, 0x76, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x43, 0x73,
	0x76, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2a, 0x63, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x42, 0x5f, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73,
	0x73, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x5a, 0x2c, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x64,
	0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0xaa,
	0x02, 0x14, 0x50, 0x61, 0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_io_member_member_proto_rawDescOnce sync.Once
	file_io_member_member_proto_rawDescData []byte
)

func file_io_member_member_proto_rawDescGZIP() []byte {
	file_io_member_member_proto_rawDescOnce.Do(func() {
		file_io_member_member_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_member_member_proto_rawDesc), len(file_io_member_member_proto_rawDesc)))
	})
	return file_io_member_member_proto_rawDescData
}

var file_io_member_member_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_io_member_member_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_io_member_member_proto_goTypes = []any{
	(MemberStatus)(0),                       // 0: members.MemberStatus
	(*Member)(nil),                          // 1: members.Member
	(*MemberRecordByExternalIdRequest)(nil), // 2: members.MemberRecordByExternalIdRequest
	(*MemberSegmentRequest)(nil),            // 3: members.MemberSegmentRequest
	(*UpdateExpiryRequest)(nil),             // 4: members.UpdateExpiryRequest
	(*MemberExpiry)(nil),                    // 5: members.MemberExpiry
	(*MemberPoints)(nil),                    // 6: members.MemberPoints
	(*EarnBurnPointsRequest)(nil),           // 7: members.EarnBurnPointsRequest
	(*SetPointsRequest)(nil),                // 8: members.SetPointsRequest
	(*MemberCheckInOutRequest)(nil),         // 9: members.MemberCheckInOutRequest
	(*ListRequestDeprecated)(nil),           // 10: members.ListRequestDeprecated
	(*ListRequest)(nil),                     // 11: members.ListRequest
	(*ChangeTierRequest)(nil),               // 12: members.ChangeTierRequest
	nil,                                     // 13: members.Member.MetaDataEntry
	nil,                                     // 14: members.MemberCheckInOutRequest.MetaDataEntry
	(*io.Person)(nil),                       // 15: io.Person
	(*timestamppb.Timestamp)(nil),           // 16: google.protobuf.Timestamp
	(*io.PassOverrides)(nil),                // 17: io.PassOverrides
	(*io.Metadata)(nil),                     // 18: io.Metadata
	(*io.Note)(nil),                         // 19: io.Note
	(io.Operation)(0),                       // 20: io.Operation
	(*io.Filter)(nil),                       // 21: io.Filter
	(*io.ExpirySettings)(nil),               // 22: io.ExpirySettings
	(*EventDetails)(nil),                    // 23: members.EventDetails
	(*io.Pagination)(nil),                   // 24: io.Pagination
	(*io.Filters)(nil),                      // 25: io.Filters
}
var file_io_member_member_proto_depIdxs = []int32{
	15, // 0: members.Member.person:type_name -> io.Person
	13, // 1: members.Member.metaData:type_name -> members.Member.MetaDataEntry
	16, // 2: members.Member.expiryDate:type_name -> google.protobuf.Timestamp
	0,  // 3: members.Member.status:type_name -> members.MemberStatus
	17, // 4: members.Member.passOverrides:type_name -> io.PassOverrides
	18, // 5: members.Member.passMetaData:type_name -> io.Metadata
	19, // 6: members.Member.notes:type_name -> io.Note
	16, // 7: members.Member.currentTierAwarded:type_name -> google.protobuf.Timestamp
	16, // 8: members.Member.currentTierExpires:type_name -> google.protobuf.Timestamp
	16, // 9: members.Member.created:type_name -> google.protobuf.Timestamp
	16, // 10: members.Member.updated:type_name -> google.protobuf.Timestamp
	20, // 11: members.Member.operation:type_name -> io.Operation
	21, // 12: members.MemberSegmentRequest.filter:type_name -> io.Filter
	1,  // 13: members.MemberSegmentRequest.newValues:type_name -> members.Member
	22, // 14: members.UpdateExpiryRequest.expirySettings:type_name -> io.ExpirySettings
	16, // 15: members.MemberExpiry.expiryDate:type_name -> google.protobuf.Timestamp
	23, // 16: members.EarnBurnPointsRequest.eventDetails:type_name -> members.EventDetails
	23, // 17: members.SetPointsRequest.eventDetails:type_name -> members.EventDetails
	14, // 18: members.MemberCheckInOutRequest.metaData:type_name -> members.MemberCheckInOutRequest.MetaDataEntry
	24, // 19: members.ListRequestDeprecated.pagination:type_name -> io.Pagination
	25, // 20: members.ListRequest.filters:type_name -> io.Filters
	23, // 21: members.ChangeTierRequest.eventDetails:type_name -> members.EventDetails
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_io_member_member_proto_init() }
func file_io_member_member_proto_init() {
	if File_io_member_member_proto != nil {
		return
	}
	file_io_member_event_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_member_member_proto_rawDesc), len(file_io_member_member_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_member_member_proto_goTypes,
		DependencyIndexes: file_io_member_member_proto_depIdxs,
		EnumInfos:         file_io_member_member_proto_enumTypes,
		MessageInfos:      file_io_member_member_proto_msgTypes,
	}.Build()
	File_io_member_member_proto = out.File
	file_io_member_member_proto_goTypes = nil
	file_io_member_member_proto_depIdxs = nil
}
