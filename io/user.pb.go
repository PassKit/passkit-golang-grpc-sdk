// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: io/user/user.proto

package io

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OAuth2Provider int32

const (
	// Zero based enum, don't use 0
	OAuth2Provider_OAUTH_DO_NOT_USE OAuth2Provider = 0
	// Membership 10-49
	OAuth2Provider_OAUTH_PATREON OAuth2Provider = 10
	// CRM 50-99
	OAuth2Provider_OAUTH_SPROUT OAuth2Provider = 50
	// Marketing 100-149
	OAuth2Provider_OAUTH_MAILCHIMP OAuth2Provider = 100
	// Accounting 150-199
	OAuth2Provider_OAUTH_XERO OAuth2Provider = 150
)

// Enum value maps for OAuth2Provider.
var (
	OAuth2Provider_name = map[int32]string{
		0:   "OAUTH_DO_NOT_USE",
		10:  "OAUTH_PATREON",
		50:  "OAUTH_SPROUT",
		100: "OAUTH_MAILCHIMP",
		150: "OAUTH_XERO",
	}
	OAuth2Provider_value = map[string]int32{
		"OAUTH_DO_NOT_USE": 0,
		"OAUTH_PATREON":    10,
		"OAUTH_SPROUT":     50,
		"OAUTH_MAILCHIMP":  100,
		"OAUTH_XERO":       150,
	}
)

func (x OAuth2Provider) Enum() *OAuth2Provider {
	p := new(OAuth2Provider)
	*p = x
	return p
}

func (x OAuth2Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OAuth2Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_io_user_user_proto_enumTypes[0].Descriptor()
}

func (OAuth2Provider) Type() protoreflect.EnumType {
	return &file_io_user_user_proto_enumTypes[0]
}

func (x OAuth2Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OAuth2Provider.Descriptor instead.
func (OAuth2Provider) EnumDescriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{0}
}

// ScannerMembershipPermissions enum determines what membership related actions a user can perform in the scanning app.
type ScannerMembershipPermissions int32

const (
	// Zero based enum, don't use 0.
	ScannerMembershipPermissions_MEMBERSHIP_PERMISSION_NONE ScannerMembershipPermissions = 0
	// Set for users who can view all details about a member.
	ScannerMembershipPermissions_MEMBERSHIP_PERMISSION_VIEW_MEMBER ScannerMembershipPermissions = 1
	// Set for users who can edit details about a member.
	ScannerMembershipPermissions_MEMBERSHIP_PERMISSION_EDIT_MEMBER ScannerMembershipPermissions = 2
	// Set for users who can give points to a member.
	ScannerMembershipPermissions_MEMBERSHIP_PERMISSION_EARN_POINTS ScannerMembershipPermissions = 4
	// Set for users who can subtract points from a member.
	ScannerMembershipPermissions_MEMBERSHIP_PERMISSION_BURN_POINTS ScannerMembershipPermissions = 8
	// Set for users who can set a members points to a specific value.
	ScannerMembershipPermissions_MEMBERSHIP_PERMISSION_SET_POINTS ScannerMembershipPermissions = 16
	// Set for users who can change a members tier.
	ScannerMembershipPermissions_MEMBERSHIP_PERMISSION_CHANGE_TIER ScannerMembershipPermissions = 32
	// Set for users who can view previous events the member has committed.
	ScannerMembershipPermissions_MEMBERSHIP_PERMISSION_VIEW_EVENTS ScannerMembershipPermissions = 64
	// Set for users who can change the expiry date of a member.
	ScannerMembershipPermissions_MEMBERSHIP_PERMISSION_CHANGE_EXPIRY ScannerMembershipPermissions = 128
	// Set for users who can check members in and out.
	ScannerMembershipPermissions_MEMBERSHIP_PERMISSION_CHECK_IN_OUT ScannerMembershipPermissions = 256
	// Set for users who can verify a members status.
	ScannerMembershipPermissions_MEMBERSHIP_PERMISSION_VALIDATE ScannerMembershipPermissions = 512
)

// Enum value maps for ScannerMembershipPermissions.
var (
	ScannerMembershipPermissions_name = map[int32]string{
		0:   "MEMBERSHIP_PERMISSION_NONE",
		1:   "MEMBERSHIP_PERMISSION_VIEW_MEMBER",
		2:   "MEMBERSHIP_PERMISSION_EDIT_MEMBER",
		4:   "MEMBERSHIP_PERMISSION_EARN_POINTS",
		8:   "MEMBERSHIP_PERMISSION_BURN_POINTS",
		16:  "MEMBERSHIP_PERMISSION_SET_POINTS",
		32:  "MEMBERSHIP_PERMISSION_CHANGE_TIER",
		64:  "MEMBERSHIP_PERMISSION_VIEW_EVENTS",
		128: "MEMBERSHIP_PERMISSION_CHANGE_EXPIRY",
		256: "MEMBERSHIP_PERMISSION_CHECK_IN_OUT",
		512: "MEMBERSHIP_PERMISSION_VALIDATE",
	}
	ScannerMembershipPermissions_value = map[string]int32{
		"MEMBERSHIP_PERMISSION_NONE":          0,
		"MEMBERSHIP_PERMISSION_VIEW_MEMBER":   1,
		"MEMBERSHIP_PERMISSION_EDIT_MEMBER":   2,
		"MEMBERSHIP_PERMISSION_EARN_POINTS":   4,
		"MEMBERSHIP_PERMISSION_BURN_POINTS":   8,
		"MEMBERSHIP_PERMISSION_SET_POINTS":    16,
		"MEMBERSHIP_PERMISSION_CHANGE_TIER":   32,
		"MEMBERSHIP_PERMISSION_VIEW_EVENTS":   64,
		"MEMBERSHIP_PERMISSION_CHANGE_EXPIRY": 128,
		"MEMBERSHIP_PERMISSION_CHECK_IN_OUT":  256,
		"MEMBERSHIP_PERMISSION_VALIDATE":      512,
	}
)

func (x ScannerMembershipPermissions) Enum() *ScannerMembershipPermissions {
	p := new(ScannerMembershipPermissions)
	*p = x
	return p
}

func (x ScannerMembershipPermissions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScannerMembershipPermissions) Descriptor() protoreflect.EnumDescriptor {
	return file_io_user_user_proto_enumTypes[1].Descriptor()
}

func (ScannerMembershipPermissions) Type() protoreflect.EnumType {
	return &file_io_user_user_proto_enumTypes[1]
}

func (x ScannerMembershipPermissions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScannerMembershipPermissions.Descriptor instead.
func (ScannerMembershipPermissions) EnumDescriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{1}
}

// ScannerCouponPermissions enum determines what membership related actions a user can perform in the scanning app.
type ScannerCouponPermissions int32

const (
	// Zero based enum, don't use 0.
	ScannerCouponPermissions_COUPON_PERMISSION_NONE ScannerCouponPermissions = 0
	// Set for users who can view all details about a coupon.
	ScannerCouponPermissions_COUPON_PERMISSION_VIEW_COUPON ScannerCouponPermissions = 1
	// Set for users who can edit details about a coupon.
	ScannerCouponPermissions_COUPON_PERMISSION_EDIT_COUPON ScannerCouponPermissions = 2
	// Set for users who can redeem a coupon.
	ScannerCouponPermissions_COUPON_PERMISSION_REDEEM ScannerCouponPermissions = 4
	// Set for users who can view previous events the coupon has committed.
	ScannerCouponPermissions_COUPON_PERMISSION_VIEW_EVENTS ScannerCouponPermissions = 8
	// Set for users who can change the expiry date of a coupon.
	ScannerCouponPermissions_COUPON_PERMISSION_CHANGE_EXPIRY ScannerCouponPermissions = 16
	// Set for users who can verify a coupons status.
	ScannerCouponPermissions_COUPON_PERMISSION_VALIDATE ScannerCouponPermissions = 32
)

// Enum value maps for ScannerCouponPermissions.
var (
	ScannerCouponPermissions_name = map[int32]string{
		0:  "COUPON_PERMISSION_NONE",
		1:  "COUPON_PERMISSION_VIEW_COUPON",
		2:  "COUPON_PERMISSION_EDIT_COUPON",
		4:  "COUPON_PERMISSION_REDEEM",
		8:  "COUPON_PERMISSION_VIEW_EVENTS",
		16: "COUPON_PERMISSION_CHANGE_EXPIRY",
		32: "COUPON_PERMISSION_VALIDATE",
	}
	ScannerCouponPermissions_value = map[string]int32{
		"COUPON_PERMISSION_NONE":          0,
		"COUPON_PERMISSION_VIEW_COUPON":   1,
		"COUPON_PERMISSION_EDIT_COUPON":   2,
		"COUPON_PERMISSION_REDEEM":        4,
		"COUPON_PERMISSION_VIEW_EVENTS":   8,
		"COUPON_PERMISSION_CHANGE_EXPIRY": 16,
		"COUPON_PERMISSION_VALIDATE":      32,
	}
)

func (x ScannerCouponPermissions) Enum() *ScannerCouponPermissions {
	p := new(ScannerCouponPermissions)
	*p = x
	return p
}

func (x ScannerCouponPermissions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScannerCouponPermissions) Descriptor() protoreflect.EnumDescriptor {
	return file_io_user_user_proto_enumTypes[2].Descriptor()
}

func (ScannerCouponPermissions) Type() protoreflect.EnumType {
	return &file_io_user_user_proto_enumTypes[2]
}

func (x ScannerCouponPermissions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScannerCouponPermissions.Descriptor instead.
func (ScannerCouponPermissions) EnumDescriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{2}
}

// DefaultMembershipScanAction enum determines what default actions a user can apply to scanned cards. Users are permitted ot have access to multiple options, but only one can be used at a time.
type DefaultMembershipScanAction int32

const (
	// Zero based enum, don't use 0.
	DefaultMembershipScanAction_MEMBERSHIP_DEFAULT_NONE DefaultMembershipScanAction = 0
	// Set so any card scanned gets a certain amount of points added automatically.
	DefaultMembershipScanAction_MEMBERSHIP_DEFAULT_EARN_POINTS DefaultMembershipScanAction = 1
	// Set so any card scanned gets a certain amount of points subtracted automatically.
	DefaultMembershipScanAction_MEMBERSHIP_DEFAULT_BURN_POINTS DefaultMembershipScanAction = 2
	// Set so any card scanned gets automatically checked in or out.
	DefaultMembershipScanAction_MEMBERSHIP_DEFAULT_CHECK_IN_OUT DefaultMembershipScanAction = 4
	// Set so any card scanned gets automatically validated.
	DefaultMembershipScanAction_MEMBERSHIP_DEFAULT_VALIDATE DefaultMembershipScanAction = 8
)

// Enum value maps for DefaultMembershipScanAction.
var (
	DefaultMembershipScanAction_name = map[int32]string{
		0: "MEMBERSHIP_DEFAULT_NONE",
		1: "MEMBERSHIP_DEFAULT_EARN_POINTS",
		2: "MEMBERSHIP_DEFAULT_BURN_POINTS",
		4: "MEMBERSHIP_DEFAULT_CHECK_IN_OUT",
		8: "MEMBERSHIP_DEFAULT_VALIDATE",
	}
	DefaultMembershipScanAction_value = map[string]int32{
		"MEMBERSHIP_DEFAULT_NONE":         0,
		"MEMBERSHIP_DEFAULT_EARN_POINTS":  1,
		"MEMBERSHIP_DEFAULT_BURN_POINTS":  2,
		"MEMBERSHIP_DEFAULT_CHECK_IN_OUT": 4,
		"MEMBERSHIP_DEFAULT_VALIDATE":     8,
	}
)

func (x DefaultMembershipScanAction) Enum() *DefaultMembershipScanAction {
	p := new(DefaultMembershipScanAction)
	*p = x
	return p
}

func (x DefaultMembershipScanAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DefaultMembershipScanAction) Descriptor() protoreflect.EnumDescriptor {
	return file_io_user_user_proto_enumTypes[3].Descriptor()
}

func (DefaultMembershipScanAction) Type() protoreflect.EnumType {
	return &file_io_user_user_proto_enumTypes[3]
}

func (x DefaultMembershipScanAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DefaultMembershipScanAction.Descriptor instead.
func (DefaultMembershipScanAction) EnumDescriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{3}
}

// DefaultCouponScanAction enum determines what default actions a user can apply to scanned cards. Users are permitted ot have access to multiple options, but only one can be used at a time.
type DefaultCouponScanAction int32

const (
	// Zero based enum, don't use 0.
	DefaultCouponScanAction_COUPON_DEFAULT_NONE DefaultCouponScanAction = 0
	// Set so any card scanned gets automatically redeemed.
	DefaultCouponScanAction_COUPON_DEFAULT_REDEEM DefaultCouponScanAction = 1
	// Set so any card scanned gets automatically validated.
	DefaultCouponScanAction_COUPON_DEFAULT_VALIDATE DefaultCouponScanAction = 2
)

// Enum value maps for DefaultCouponScanAction.
var (
	DefaultCouponScanAction_name = map[int32]string{
		0: "COUPON_DEFAULT_NONE",
		1: "COUPON_DEFAULT_REDEEM",
		2: "COUPON_DEFAULT_VALIDATE",
	}
	DefaultCouponScanAction_value = map[string]int32{
		"COUPON_DEFAULT_NONE":     0,
		"COUPON_DEFAULT_REDEEM":   1,
		"COUPON_DEFAULT_VALIDATE": 2,
	}
)

func (x DefaultCouponScanAction) Enum() *DefaultCouponScanAction {
	p := new(DefaultCouponScanAction)
	*p = x
	return p
}

func (x DefaultCouponScanAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DefaultCouponScanAction) Descriptor() protoreflect.EnumDescriptor {
	return file_io_user_user_proto_enumTypes[4].Descriptor()
}

func (DefaultCouponScanAction) Type() protoreflect.EnumType {
	return &file_io_user_user_proto_enumTypes[4]
}

func (x DefaultCouponScanAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DefaultCouponScanAction.Descriptor instead.
func (DefaultCouponScanAction) EnumDescriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{4}
}

type PermissionScope int32

const (
	// Zero based enum, don't use 0.
	PermissionScope_PERMISSION_NONE     PermissionScope = 0
	PermissionScope_WEB_ACCESS          PermissionScope = 1
	PermissionScope_APP_ACCESS          PermissionScope = 2
	PermissionScope_ALL_PROJECTS        PermissionScope = 4
	PermissionScope_ALL_CERTIFICATES    PermissionScope = 8
	PermissionScope_BILLING_ACCESS      PermissionScope = 16
	PermissionScope_CERTIFICATES_ACCESS PermissionScope = 32
	PermissionScope_MEMBERS_ACCESS      PermissionScope = 64
	PermissionScope_COUPONS_ACCESS      PermissionScope = 128
	PermissionScope_EVENTS_ACCESS       PermissionScope = 256
	PermissionScope_FLIGHTS_ACCESS      PermissionScope = 512
)

// Enum value maps for PermissionScope.
var (
	PermissionScope_name = map[int32]string{
		0:   "PERMISSION_NONE",
		1:   "WEB_ACCESS",
		2:   "APP_ACCESS",
		4:   "ALL_PROJECTS",
		8:   "ALL_CERTIFICATES",
		16:  "BILLING_ACCESS",
		32:  "CERTIFICATES_ACCESS",
		64:  "MEMBERS_ACCESS",
		128: "COUPONS_ACCESS",
		256: "EVENTS_ACCESS",
		512: "FLIGHTS_ACCESS",
	}
	PermissionScope_value = map[string]int32{
		"PERMISSION_NONE":     0,
		"WEB_ACCESS":          1,
		"APP_ACCESS":          2,
		"ALL_PROJECTS":        4,
		"ALL_CERTIFICATES":    8,
		"BILLING_ACCESS":      16,
		"CERTIFICATES_ACCESS": 32,
		"MEMBERS_ACCESS":      64,
		"COUPONS_ACCESS":      128,
		"EVENTS_ACCESS":       256,
		"FLIGHTS_ACCESS":      512,
	}
)

func (x PermissionScope) Enum() *PermissionScope {
	p := new(PermissionScope)
	*p = x
	return p
}

func (x PermissionScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionScope) Descriptor() protoreflect.EnumDescriptor {
	return file_io_user_user_proto_enumTypes[5].Descriptor()
}

func (PermissionScope) Type() protoreflect.EnumType {
	return &file_io_user_user_proto_enumTypes[5]
}

func (x PermissionScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionScope.Descriptor instead.
func (PermissionScope) EnumDescriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{5}
}

type TeamMemberStatus int32

const (
	// Zero based enum, don't use 0.
	TeamMemberStatus_STATUS_NONE          TeamMemberStatus = 0
	TeamMemberStatus_TEAM_MEMBER_ACTIVE   TeamMemberStatus = 1
	TeamMemberStatus_TEAM_MEMBER_DISABLED TeamMemberStatus = 2
	TeamMemberStatus_TEAM_MEMBER_EXPIRED  TeamMemberStatus = 4
	TeamMemberStatus_TEAM_MEMBER_PENDING  TeamMemberStatus = 8
)

// Enum value maps for TeamMemberStatus.
var (
	TeamMemberStatus_name = map[int32]string{
		0: "STATUS_NONE",
		1: "TEAM_MEMBER_ACTIVE",
		2: "TEAM_MEMBER_DISABLED",
		4: "TEAM_MEMBER_EXPIRED",
		8: "TEAM_MEMBER_PENDING",
	}
	TeamMemberStatus_value = map[string]int32{
		"STATUS_NONE":          0,
		"TEAM_MEMBER_ACTIVE":   1,
		"TEAM_MEMBER_DISABLED": 2,
		"TEAM_MEMBER_EXPIRED":  4,
		"TEAM_MEMBER_PENDING":  8,
	}
)

func (x TeamMemberStatus) Enum() *TeamMemberStatus {
	p := new(TeamMemberStatus)
	*p = x
	return p
}

func (x TeamMemberStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamMemberStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_io_user_user_proto_enumTypes[6].Descriptor()
}

func (TeamMemberStatus) Type() protoreflect.EnumType {
	return &file_io_user_user_proto_enumTypes[6]
}

func (x TeamMemberStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamMemberStatus.Descriptor instead.
func (TeamMemberStatus) EnumDescriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{6}
}

// AuditLog represents a log entry for API access.
type AuditLog struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CompanyId      string                 `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
	Username       string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	UserType       UserType               `protobuf:"varint,4,opt,name=userType,proto3,enum=io.UserType" json:"userType,omitempty"`
	Authentication Authentication         `protobuf:"varint,5,opt,name=authentication,proto3,enum=io.Authentication" json:"authentication,omitempty"`
	Channel        Channel                `protobuf:"varint,6,opt,name=channel,proto3,enum=io.Channel" json:"channel,omitempty"`
	IpAddress      string                 `protobuf:"bytes,7,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	Endpoint       string                 `protobuf:"bytes,8,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Payload        string                 `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty"`
	StatusCode     uint32                 `protobuf:"varint,10,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Status         string                 `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Response       string                 `protobuf:"bytes,12,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AuditLog) Reset() {
	*x = AuditLog{}
	mi := &file_io_user_user_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog) ProtoMessage() {}

func (x *AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog.ProtoReflect.Descriptor instead.
func (*AuditLog) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{0}
}

func (x *AuditLog) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AuditLog) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *AuditLog) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuditLog) GetUserType() UserType {
	if x != nil {
		return x.UserType
	}
	return UserType_UnknownUserType
}

func (x *AuditLog) GetAuthentication() Authentication {
	if x != nil {
		return x.Authentication
	}
	return Authentication_Unauthenticated
}

func (x *AuditLog) GetChannel() Channel {
	if x != nil {
		return x.Channel
	}
	return Channel_UnknownChannel
}

func (x *AuditLog) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *AuditLog) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *AuditLog) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *AuditLog) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *AuditLog) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AuditLog) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Used to request log details.   Specifying a beforeTime will return up to the limit of results after the specified time, otherwise the most recent logs will be returned.
type AuditLogRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifying a user id will filter requests for that user, otherwise all users entries will be returned, providing the user has the necessary privileges.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Provide a timestamp if you need past records.  Up to 30 days of records can be accessed.
	BeforeTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=beforeTime,proto3" json:"beforeTime,omitempty"`
	// A maximum of 1,000 entries can be retrieved in one call.  If no offset is provided, 50 records will be retrieved.
	// @tag: validate:"lte=1000"
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" validate:"lte=1000"`
	// Limit request to show only errors
	ErrorsOnly    bool `protobuf:"varint,4,opt,name=errorsOnly,proto3" json:"errorsOnly,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditLogRequest) Reset() {
	*x = AuditLogRequest{}
	mi := &file_io_user_user_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogRequest) ProtoMessage() {}

func (x *AuditLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogRequest.ProtoReflect.Descriptor instead.
func (*AuditLogRequest) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{1}
}

func (x *AuditLogRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuditLogRequest) GetBeforeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BeforeTime
	}
	return nil
}

func (x *AuditLogRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AuditLogRequest) GetErrorsOnly() bool {
	if x != nil {
		return x.ErrorsOnly
	}
	return false
}

type NewUserResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	CompanyId      string                 `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
	Username       string                 `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	EmailAddress   string                 `protobuf:"bytes,4,opt,name=emailAddress,proto3" json:"emailAddress,omitempty"`
	Secret         string                 `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	Certificate    string                 `protobuf:"bytes,6,opt,name=certificate,proto3" json:"certificate,omitempty"`
	PrivateKey     string                 `protobuf:"bytes,7,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	JavaPrivateKey string                 `protobuf:"bytes,8,opt,name=javaPrivateKey,proto3" json:"javaPrivateKey,omitempty"`
	ExpiresAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	RegionId       string                 `protobuf:"bytes,10,opt,name=regionId,proto3" json:"regionId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NewUserResponse) Reset() {
	*x = NewUserResponse{}
	mi := &file_io_user_user_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserResponse) ProtoMessage() {}

func (x *NewUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserResponse.ProtoReflect.Descriptor instead.
func (*NewUserResponse) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{2}
}

func (x *NewUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NewUserResponse) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *NewUserResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NewUserResponse) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *NewUserResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *NewUserResponse) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *NewUserResponse) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *NewUserResponse) GetJavaPrivateKey() string {
	if x != nil {
		return x.JavaPrivateKey
	}
	return ""
}

func (x *NewUserResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *NewUserResponse) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

type NewUser struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateCreate:"required,alphanum,gte=6"
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" validateCreate:"required,alphanum,gte=6"`
	// @tag: validateCreate:"required"
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" validateCreate:"required"`
	// @tag: validateCreate:"required"
	EmailAddress string `protobuf:"bytes,3,opt,name=emailAddress,proto3" json:"emailAddress,omitempty" validateCreate:"required"`
	// @tag: validateCreate:"omitempty"
	SendEmail bool `protobuf:"varint,4,opt,name=sendEmail,proto3" json:"sendEmail,omitempty" validateCreate:"omitempty"`
	// If a company name is provided, then a new company will be created, otherwise, the user will inherit the company.
	// of the parent.  Only system admin users can create new companies.
	// @tag: validateCreate:"omitempty"
	CompanyName string `protobuf:"bytes,5,opt,name=companyName,proto3" json:"companyName,omitempty" validateCreate:"omitempty"`
	// @tag: validateCreate:"omitempty"
	MobileNumber string `protobuf:"bytes,6,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty" validateCreate:"omitempty"`
	// @tag: validateCreate:"omitempty"
	TwoFactorAuth bool `protobuf:"varint,7,opt,name=twoFactorAuth,proto3" json:"twoFactorAuth,omitempty" validateCreate:"omitempty"`
	// @tag: validateCreate:"omitempty"
	IsOwner bool `protobuf:"varint,8,opt,name=isOwner,proto3" json:"isOwner,omitempty" validateCreate:"omitempty"`
	// @tag: validateCreate:"omitempty"
	ReadOnly bool `protobuf:"varint,9,opt,name=readOnly,proto3" json:"readOnly,omitempty" validateCreate:"omitempty"`
	// @tag: validateCreate:"omitempty"
	TeamMember bool `protobuf:"varint,10,opt,name=teamMember,proto3" json:"teamMember,omitempty" validateCreate:"omitempty"`
	// @tag: validateCreate:"required"
	Token         string `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty" validateCreate:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewUser) Reset() {
	*x = NewUser{}
	mi := &file_io_user_user_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUser) ProtoMessage() {}

func (x *NewUser) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUser.ProtoReflect.Descriptor instead.
func (*NewUser) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{3}
}

func (x *NewUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *NewUser) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *NewUser) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *NewUser) GetSendEmail() bool {
	if x != nil {
		return x.SendEmail
	}
	return false
}

func (x *NewUser) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *NewUser) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *NewUser) GetTwoFactorAuth() bool {
	if x != nil {
		return x.TwoFactorAuth
	}
	return false
}

func (x *NewUser) GetIsOwner() bool {
	if x != nil {
		return x.IsOwner
	}
	return false
}

func (x *NewUser) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *NewUser) GetTeamMember() bool {
	if x != nil {
		return x.TeamMember
	}
	return false
}

func (x *NewUser) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Response used by getUser.
type GetUserResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Email           string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Username        string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	CompanyId       string                 `protobuf:"bytes,3,opt,name=companyId,proto3" json:"companyId,omitempty"`
	CompanyName     string                 `protobuf:"bytes,4,opt,name=companyName,proto3" json:"companyName,omitempty"`
	CompanyStatus   uint64                 `protobuf:"varint,5,opt,name=companyStatus,proto3" json:"companyStatus,omitempty"` // used for checking production, etc.
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	ExpiresAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	RegionId        string                 `protobuf:"bytes,8,opt,name=regionId,proto3" json:"regionId,omitempty"`
	UserStatus      uint64                 `protobuf:"varint,9,opt,name=userStatus,proto3" json:"userStatus,omitempty"`
	UserPermissions uint64                 `protobuf:"varint,10,opt,name=userPermissions,proto3" json:"userPermissions,omitempty"`
	UserId          string                 `protobuf:"bytes,11,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	mi := &file_io_user_user_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetUserResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserResponse) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *GetUserResponse) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *GetUserResponse) GetCompanyStatus() uint64 {
	if x != nil {
		return x.CompanyStatus
	}
	return 0
}

func (x *GetUserResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetUserResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *GetUserResponse) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *GetUserResponse) GetUserStatus() uint64 {
	if x != nil {
		return x.UserStatus
	}
	return 0
}

func (x *GetUserResponse) GetUserPermissions() uint64 {
	if x != nil {
		return x.UserPermissions
	}
	return 0
}

func (x *GetUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type BillingMeta struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CompanyName    string                 `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName,omitempty"`
	TaxId          string                 `protobuf:"bytes,2,opt,name=taxId,proto3" json:"taxId,omitempty"`
	Reference      string                 `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
	BillingAddress *Address               `protobuf:"bytes,4,opt,name=billingAddress,proto3" json:"billingAddress,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BillingMeta) Reset() {
	*x = BillingMeta{}
	mi := &file_io_user_user_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillingMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingMeta) ProtoMessage() {}

func (x *BillingMeta) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingMeta.ProtoReflect.Descriptor instead.
func (*BillingMeta) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{5}
}

func (x *BillingMeta) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *BillingMeta) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *BillingMeta) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *BillingMeta) GetBillingAddress() *Address {
	if x != nil {
		return x.BillingAddress
	}
	return nil
}

type Credentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	TwoFAToken    string                 `protobuf:"bytes,3,opt,name=twoFAToken,proto3" json:"twoFAToken,omitempty"`
	TwoFACode     string                 `protobuf:"bytes,4,opt,name=twoFACode,proto3" json:"twoFACode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	mi := &file_io_user_user_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{6}
}

func (x *Credentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Credentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Credentials) GetTwoFAToken() string {
	if x != nil {
		return x.TwoFAToken
	}
	return ""
}

func (x *Credentials) GetTwoFACode() string {
	if x != nil {
		return x.TwoFACode
	}
	return ""
}

// Verify request is used to validate a email address for a passkit account.
type VerifyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required"
	// 22 character passkit user Id.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty" validateGeneric:"required"`
	// @tag: validateGeneric:"required"
	// Token supplied by email to the account email.
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyRequest) Reset() {
	*x = VerifyRequest{}
	mi := &file_io_user_user_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRequest) ProtoMessage() {}

func (x *VerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRequest.ProtoReflect.Descriptor instead.
func (*VerifyRequest) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{7}
}

func (x *VerifyRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *VerifyRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type JWT struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JWT) Reset() {
	*x = JWT{}
	mi := &file_io_user_user_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JWT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWT) ProtoMessage() {}

func (x *JWT) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWT.ProtoReflect.Descriptor instead.
func (*JWT) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{8}
}

func (x *JWT) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type PasswordResetInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateUpdate:"required"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateUpdate:"required"`
	// @tag: validateUpdate:"required"
	RegisteredEmail string `protobuf:"bytes,2,opt,name=registeredEmail,proto3" json:"registeredEmail,omitempty" validateUpdate:"required"`
	// @tag: validateUpdate:"required"
	NewPassword string `protobuf:"bytes,3,opt,name=newPassword,proto3" json:"newPassword,omitempty" validateUpdate:"required"`
	// @tag: validateUpdate:"required"
	ConfirmNewPassword string `protobuf:"bytes,4,opt,name=confirmNewPassword,proto3" json:"confirmNewPassword,omitempty" validateUpdate:"required"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PasswordResetInput) Reset() {
	*x = PasswordResetInput{}
	mi := &file_io_user_user_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordResetInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResetInput) ProtoMessage() {}

func (x *PasswordResetInput) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResetInput.ProtoReflect.Descriptor instead.
func (*PasswordResetInput) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{9}
}

func (x *PasswordResetInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PasswordResetInput) GetRegisteredEmail() string {
	if x != nil {
		return x.RegisteredEmail
	}
	return ""
}

func (x *PasswordResetInput) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *PasswordResetInput) GetConfirmNewPassword() string {
	if x != nil {
		return x.ConfirmNewPassword
	}
	return ""
}

type Username struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Username) Reset() {
	*x = Username{}
	mi := &file_io_user_user_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Username) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Username) ProtoMessage() {}

func (x *Username) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Username.ProtoReflect.Descriptor instead.
func (*Username) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{10}
}

func (x *Username) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// OAuth2AuthorizationRequest contains needed values to complete an OAuth2 request
type OAuth2AuthorizationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The code passed back from the application that we wish to gain access to.
	// @tag: validateCreate:"required"
	ClientCode string `protobuf:"bytes,1,opt,name=clientCode,proto3" json:"clientCode,omitempty" validateCreate:"required"`
	// The provider of the access token, determines which environment variables are used.
	// @tag: validateCreate:"required"
	Provider OAuth2Provider `protobuf:"varint,2,opt,name=provider,proto3,enum=io.OAuth2Provider" json:"provider,omitempty" validateCreate:"required"`
	// The redirect Uri that was provided when the authorization code was generated.
	// @tag: validateCreate:"omitempty"
	RedirectUri   string `protobuf:"bytes,3,opt,name=redirectUri,proto3" json:"redirectUri,omitempty" validateCreate:"omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OAuth2AuthorizationRequest) Reset() {
	*x = OAuth2AuthorizationRequest{}
	mi := &file_io_user_user_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OAuth2AuthorizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2AuthorizationRequest) ProtoMessage() {}

func (x *OAuth2AuthorizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2AuthorizationRequest.ProtoReflect.Descriptor instead.
func (*OAuth2AuthorizationRequest) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{11}
}

func (x *OAuth2AuthorizationRequest) GetClientCode() string {
	if x != nil {
		return x.ClientCode
	}
	return ""
}

func (x *OAuth2AuthorizationRequest) GetProvider() OAuth2Provider {
	if x != nil {
		return x.Provider
	}
	return OAuth2Provider_OAUTH_DO_NOT_USE
}

func (x *OAuth2AuthorizationRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

// ScannerConfiguration is the base configuration object for the scanning app.
type ScannerConfiguration struct {
	state                   protoimpl.MessageState         `protogen:"open.v1"`
	MembershipPermissions   []ScannerMembershipPermissions `protobuf:"varint,1,rep,packed,name=membershipPermissions,proto3,enum=io.ScannerMembershipPermissions" json:"membershipPermissions,omitempty"`
	CouponPermissions       []ScannerCouponPermissions     `protobuf:"varint,2,rep,packed,name=couponPermissions,proto3,enum=io.ScannerCouponPermissions" json:"couponPermissions,omitempty"`
	DefaultMembershipAction []DefaultMembershipScanAction  `protobuf:"varint,3,rep,packed,name=defaultMembershipAction,proto3,enum=io.DefaultMembershipScanAction" json:"defaultMembershipAction,omitempty"`
	DefaultCouponAction     []DefaultCouponScanAction      `protobuf:"varint,4,rep,packed,name=defaultCouponAction,proto3,enum=io.DefaultCouponScanAction" json:"defaultCouponAction,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ScannerConfiguration) Reset() {
	*x = ScannerConfiguration{}
	mi := &file_io_user_user_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScannerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannerConfiguration) ProtoMessage() {}

func (x *ScannerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScannerConfiguration.ProtoReflect.Descriptor instead.
func (*ScannerConfiguration) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{12}
}

func (x *ScannerConfiguration) GetMembershipPermissions() []ScannerMembershipPermissions {
	if x != nil {
		return x.MembershipPermissions
	}
	return nil
}

func (x *ScannerConfiguration) GetCouponPermissions() []ScannerCouponPermissions {
	if x != nil {
		return x.CouponPermissions
	}
	return nil
}

func (x *ScannerConfiguration) GetDefaultMembershipAction() []DefaultMembershipScanAction {
	if x != nil {
		return x.DefaultMembershipAction
	}
	return nil
}

func (x *ScannerConfiguration) GetDefaultCouponAction() []DefaultCouponScanAction {
	if x != nil {
		return x.DefaultCouponAction
	}
	return nil
}

type Email struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required,email"
	Email         string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty" validateGeneric:"required,email"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Email) Reset() {
	*x = Email{}
	mi := &file_io_user_user_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{13}
}

func (x *Email) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ConfirmEmailChangeInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required"
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" validateGeneric:"required"`
	// @tag: validateGeneric:"required"
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" validateGeneric:"required"`
	// @tag: validateGeneric:"required"
	Token         string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmEmailChangeInput) Reset() {
	*x = ConfirmEmailChangeInput{}
	mi := &file_io_user_user_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmEmailChangeInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmEmailChangeInput) ProtoMessage() {}

func (x *ConfirmEmailChangeInput) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmEmailChangeInput.ProtoReflect.Descriptor instead.
func (*ConfirmEmailChangeInput) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{14}
}

func (x *ConfirmEmailChangeInput) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ConfirmEmailChangeInput) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ConfirmEmailChangeInput) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CompanyName struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required" validateUpdate:"required"
	CompanyName   string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName,omitempty" validateGeneric:"required" validateUpdate:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompanyName) Reset() {
	*x = CompanyName{}
	mi := &file_io_user_user_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyName) ProtoMessage() {}

func (x *CompanyName) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyName.ProtoReflect.Descriptor instead.
func (*CompanyName) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{15}
}

func (x *CompanyName) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type DeleteAccountRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Username of Email of a deleting account.
	// @tag: validateGeneric:"required"
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" validateGeneric:"required"`
	// Password of a deleting account.
	// @tag: validateGeneric:"required"
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" validateGeneric:"required"`
	// To confirm permanent deletion of your account. Delete action cannot be undone. Please use with caution.
	// @tag: validateGeneric:"required"
	ConfirmPermanentDelete bool `protobuf:"varint,3,opt,name=confirmPermanentDelete,proto3" json:"confirmPermanentDelete,omitempty" validateGeneric:"required"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DeleteAccountRequest) Reset() {
	*x = DeleteAccountRequest{}
	mi := &file_io_user_user_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountRequest) ProtoMessage() {}

func (x *DeleteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteAccountRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DeleteAccountRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DeleteAccountRequest) GetConfirmPermanentDelete() bool {
	if x != nil {
		return x.ConfirmPermanentDelete
	}
	return false
}

type ProjectsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Projects      []string               `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectsList) Reset() {
	*x = ProjectsList{}
	mi := &file_io_user_user_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectsList) ProtoMessage() {}

func (x *ProjectsList) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectsList.ProtoReflect.Descriptor instead.
func (*ProjectsList) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{17}
}

func (x *ProjectsList) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type CertificatesList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Certificates  []string               `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificatesList) Reset() {
	*x = CertificatesList{}
	mi := &file_io_user_user_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificatesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificatesList) ProtoMessage() {}

func (x *CertificatesList) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificatesList.ProtoReflect.Descriptor instead.
func (*CertificatesList) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{18}
}

func (x *CertificatesList) GetCertificates() []string {
	if x != nil {
		return x.Certificates
	}
	return nil
}

type ProtocolList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClassIds      []string               `protobuf:"bytes,1,rep,name=classIds,proto3" json:"classIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtocolList) Reset() {
	*x = ProtocolList{}
	mi := &file_io_user_user_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtocolList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolList) ProtoMessage() {}

func (x *ProtocolList) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolList.ProtoReflect.Descriptor instead.
func (*ProtocolList) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{19}
}

func (x *ProtocolList) GetClassIds() []string {
	if x != nil {
		return x.ClassIds
	}
	return nil
}

type ResourcePermissions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ProjectPermissions:
	//
	//	*ResourcePermissions_AllowedProjects
	//	*ResourcePermissions_DisallowedProjects
	ProjectPermissions isResourcePermissions_ProjectPermissions `protobuf_oneof:"ProjectPermissions"`
	// Types that are valid to be assigned to CertificatePermissions:
	//
	//	*ResourcePermissions_AllowedCertificates
	//	*ResourcePermissions_DisallowedCertificates
	CertificatePermissions isResourcePermissions_CertificatePermissions `protobuf_oneof:"CertificatePermissions"`
	// Types that are valid to be assigned to MembershipProgramPermissions:
	//
	//	*ResourcePermissions_AllowedPrograms
	//	*ResourcePermissions_DisallowedPrograms
	MembershipProgramPermissions isResourcePermissions_MembershipProgramPermissions `protobuf_oneof:"MembershipProgramPermissions"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ResourcePermissions) Reset() {
	*x = ResourcePermissions{}
	mi := &file_io_user_user_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcePermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePermissions) ProtoMessage() {}

func (x *ResourcePermissions) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePermissions.ProtoReflect.Descriptor instead.
func (*ResourcePermissions) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{20}
}

func (x *ResourcePermissions) GetProjectPermissions() isResourcePermissions_ProjectPermissions {
	if x != nil {
		return x.ProjectPermissions
	}
	return nil
}

func (x *ResourcePermissions) GetAllowedProjects() *ProjectsList {
	if x != nil {
		if x, ok := x.ProjectPermissions.(*ResourcePermissions_AllowedProjects); ok {
			return x.AllowedProjects
		}
	}
	return nil
}

func (x *ResourcePermissions) GetDisallowedProjects() *ProjectsList {
	if x != nil {
		if x, ok := x.ProjectPermissions.(*ResourcePermissions_DisallowedProjects); ok {
			return x.DisallowedProjects
		}
	}
	return nil
}

func (x *ResourcePermissions) GetCertificatePermissions() isResourcePermissions_CertificatePermissions {
	if x != nil {
		return x.CertificatePermissions
	}
	return nil
}

func (x *ResourcePermissions) GetAllowedCertificates() *CertificatesList {
	if x != nil {
		if x, ok := x.CertificatePermissions.(*ResourcePermissions_AllowedCertificates); ok {
			return x.AllowedCertificates
		}
	}
	return nil
}

func (x *ResourcePermissions) GetDisallowedCertificates() *CertificatesList {
	if x != nil {
		if x, ok := x.CertificatePermissions.(*ResourcePermissions_DisallowedCertificates); ok {
			return x.DisallowedCertificates
		}
	}
	return nil
}

func (x *ResourcePermissions) GetMembershipProgramPermissions() isResourcePermissions_MembershipProgramPermissions {
	if x != nil {
		return x.MembershipProgramPermissions
	}
	return nil
}

func (x *ResourcePermissions) GetAllowedPrograms() *ProtocolList {
	if x != nil {
		if x, ok := x.MembershipProgramPermissions.(*ResourcePermissions_AllowedPrograms); ok {
			return x.AllowedPrograms
		}
	}
	return nil
}

func (x *ResourcePermissions) GetDisallowedPrograms() *ProtocolList {
	if x != nil {
		if x, ok := x.MembershipProgramPermissions.(*ResourcePermissions_DisallowedPrograms); ok {
			return x.DisallowedPrograms
		}
	}
	return nil
}

type isResourcePermissions_ProjectPermissions interface {
	isResourcePermissions_ProjectPermissions()
}

type ResourcePermissions_AllowedProjects struct {
	AllowedProjects *ProjectsList `protobuf:"bytes,1,opt,name=allowedProjects,proto3,oneof"`
}

type ResourcePermissions_DisallowedProjects struct {
	DisallowedProjects *ProjectsList `protobuf:"bytes,2,opt,name=disallowedProjects,proto3,oneof"`
}

func (*ResourcePermissions_AllowedProjects) isResourcePermissions_ProjectPermissions() {}

func (*ResourcePermissions_DisallowedProjects) isResourcePermissions_ProjectPermissions() {}

type isResourcePermissions_CertificatePermissions interface {
	isResourcePermissions_CertificatePermissions()
}

type ResourcePermissions_AllowedCertificates struct {
	AllowedCertificates *CertificatesList `protobuf:"bytes,3,opt,name=allowedCertificates,proto3,oneof"`
}

type ResourcePermissions_DisallowedCertificates struct {
	DisallowedCertificates *CertificatesList `protobuf:"bytes,4,opt,name=disallowedCertificates,proto3,oneof"`
}

func (*ResourcePermissions_AllowedCertificates) isResourcePermissions_CertificatePermissions() {}

func (*ResourcePermissions_DisallowedCertificates) isResourcePermissions_CertificatePermissions() {}

type isResourcePermissions_MembershipProgramPermissions interface {
	isResourcePermissions_MembershipProgramPermissions()
}

type ResourcePermissions_AllowedPrograms struct {
	AllowedPrograms *ProtocolList `protobuf:"bytes,5,opt,name=allowedPrograms,proto3,oneof"`
}

type ResourcePermissions_DisallowedPrograms struct {
	DisallowedPrograms *ProtocolList `protobuf:"bytes,6,opt,name=disallowedPrograms,proto3,oneof"`
}

func (*ResourcePermissions_AllowedPrograms) isResourcePermissions_MembershipProgramPermissions() {}

func (*ResourcePermissions_DisallowedPrograms) isResourcePermissions_MembershipProgramPermissions() {}

type TeamMemberPermissions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateCreate:"isdefault" validateUpdate:"required"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validateCreate:"isdefault" validateUpdate:"required"`
	// @tag: validateGeneric:"required"
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty" validateGeneric:"required"`
	// @tag: validateCreate:"required"
	PermissionScope PermissionScope `protobuf:"varint,3,opt,name=permissionScope,proto3,enum=io.PermissionScope" json:"permissionScope,omitempty" validateCreate:"required"`
	// @tag: validateCreate:"required"
	Status              TeamMemberStatus     `protobuf:"varint,4,opt,name=status,proto3,enum=io.TeamMemberStatus" json:"status,omitempty" validateCreate:"required"`
	ResourcePermissions *ResourcePermissions `protobuf:"bytes,5,opt,name=resourcePermissions,proto3" json:"resourcePermissions,omitempty"`
	// @tag: validateCreate:"isdefault" validateUpdate:"isdefault"
	Created *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty" validateCreate:"isdefault" validateUpdate:"isdefault"`
	// @tag: validateCreate:"isdefault"
	Updated       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated,proto3" json:"updated,omitempty" validateCreate:"isdefault"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamMemberPermissions) Reset() {
	*x = TeamMemberPermissions{}
	mi := &file_io_user_user_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamMemberPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMemberPermissions) ProtoMessage() {}

func (x *TeamMemberPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMemberPermissions.ProtoReflect.Descriptor instead.
func (*TeamMemberPermissions) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{21}
}

func (x *TeamMemberPermissions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TeamMemberPermissions) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TeamMemberPermissions) GetPermissionScope() PermissionScope {
	if x != nil {
		return x.PermissionScope
	}
	return PermissionScope_PERMISSION_NONE
}

func (x *TeamMemberPermissions) GetStatus() TeamMemberStatus {
	if x != nil {
		return x.Status
	}
	return TeamMemberStatus_STATUS_NONE
}

func (x *TeamMemberPermissions) GetResourcePermissions() *ResourcePermissions {
	if x != nil {
		return x.ResourcePermissions
	}
	return nil
}

func (x *TeamMemberPermissions) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *TeamMemberPermissions) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type NewTeamMember struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateCreate:"required"
	User *NewUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" validateCreate:"required"`
	// @tag: validateCreate:"required"
	Permissions   *TeamMemberPermissions `protobuf:"bytes,2,opt,name=permissions,proto3" json:"permissions,omitempty" validateCreate:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewTeamMember) Reset() {
	*x = NewTeamMember{}
	mi := &file_io_user_user_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewTeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTeamMember) ProtoMessage() {}

func (x *NewTeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTeamMember.ProtoReflect.Descriptor instead.
func (*NewTeamMember) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{22}
}

func (x *NewTeamMember) GetUser() *NewUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *NewTeamMember) GetPermissions() *TeamMemberPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type GetTeamMemberResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *GetUserResponse       `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Permissions   *TeamMemberPermissions `protobuf:"bytes,2,opt,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamMemberResponse) Reset() {
	*x = GetTeamMemberResponse{}
	mi := &file_io_user_user_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamMemberResponse) ProtoMessage() {}

func (x *GetTeamMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamMemberResponse.ProtoReflect.Descriptor instead.
func (*GetTeamMemberResponse) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{23}
}

func (x *GetTeamMemberResponse) GetUser() *GetUserResponse {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetTeamMemberResponse) GetPermissions() *TeamMemberPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type ListTeamMembersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Status        TeamMemberStatus       `protobuf:"varint,3,opt,name=status,proto3,enum=io.TeamMemberStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTeamMembersResponse) Reset() {
	*x = ListTeamMembersResponse{}
	mi := &file_io_user_user_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTeamMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamMembersResponse) ProtoMessage() {}

func (x *ListTeamMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamMembersResponse.ProtoReflect.Descriptor instead.
func (*ListTeamMembersResponse) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{24}
}

func (x *ListTeamMembersResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ListTeamMembersResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ListTeamMembersResponse) GetStatus() TeamMemberStatus {
	if x != nil {
		return x.Status
	}
	return TeamMemberStatus_STATUS_NONE
}

type Recaptcha struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @tag: validateGeneric:"required"
	Token         string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty" validateGeneric:"required"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Recaptcha) Reset() {
	*x = Recaptcha{}
	mi := &file_io_user_user_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recaptcha) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recaptcha) ProtoMessage() {}

func (x *Recaptcha) ProtoReflect() protoreflect.Message {
	mi := &file_io_user_user_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recaptcha.ProtoReflect.Descriptor instead.
func (*Recaptcha) Descriptor() ([]byte, []int) {
	return file_io_user_user_proto_rawDescGZIP(), []int{25}
}

func (x *Recaptcha) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_io_user_user_proto protoreflect.FileDescriptor

var file_io_user_user_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x69, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x69, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x69, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb3, 0x03, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x69, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xdf, 0x02, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6a,
	0x61, 0x76, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x07, 0x4e, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x77,
	0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9b, 0x03, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x0b, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x83, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x77, 0x6f, 0x46,
	0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x77,
	0x6f, 0x46, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x77, 0x6f, 0x46,
	0x41, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x77, 0x6f,
	0x46, 0x41, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x1b, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa0, 0x01, 0x0a,
	0x12, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x26, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x22, 0xe4, 0x02, 0x0a, 0x14, 0x53, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x56, 0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x63, 0x61,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x69, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x53, 0x63, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x1d, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x67,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2f, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0x2a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x36, 0x0a,
	0x10, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x73, 0x22, 0x83, 0x04, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x13, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01,
	0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x16, 0x64,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x02, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x02, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x18, 0x0a,
	0x16, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x15, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x6d, 0x0a,
	0x0d, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x69,
	0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7d, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6f, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x69, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x21, 0x0a, 0x09,
	0x52, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2a,
	0x71, 0x0a, 0x0e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x50, 0x41, 0x54, 0x52, 0x45, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x53, 0x50, 0x52, 0x4f, 0x55, 0x54, 0x10, 0x32, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x43, 0x48, 0x49, 0x4d, 0x50, 0x10,
	0x64, 0x12, 0x0f, 0x0a, 0x0a, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x58, 0x45, 0x52, 0x4f, 0x10,
	0x96, 0x01, 0x2a, 0xc6, 0x03, 0x0a, 0x1c, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49,
	0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49,
	0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x41, 0x52, 0x4e, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x08, 0x12,
	0x24, 0x0a, 0x20, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x53, 0x10, 0x10, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x10, 0x20, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x53, 0x10, 0x40, 0x12, 0x28, 0x0a, 0x23, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49,
	0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x80, 0x01, 0x12, 0x27, 0x0a,
	0x22, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x5f,
	0x4f, 0x55, 0x54, 0x10, 0x80, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x53, 0x48, 0x49, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x80, 0x04, 0x2a, 0x82, 0x02, 0x0a, 0x18,
	0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x55, 0x50,
	0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43,
	0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x55, 0x50, 0x4f,
	0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x44, 0x49,
	0x54, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f,
	0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x55, 0x50,
	0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x43,
	0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x10,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x20,
	0x2a, 0xc8, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x53, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x08, 0x2a, 0x6a, 0x0a, 0x17, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f,
	0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0xed, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x45, 0x42, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x53,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x53, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x49, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x20, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x40, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x4f, 0x55,
	0x50, 0x4f, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x80, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x80, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x53, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x80, 0x04, 0x2a, 0x87, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x08, 0x42, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x69, 0x74,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5a, 0x24, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x61, 0x73,
	0x73, 0x6b, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6f, 0xaa, 0x02, 0x0c, 0x50, 0x61,
	0x73, 0x73, 0x4b, 0x69, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_io_user_user_proto_rawDescOnce sync.Once
	file_io_user_user_proto_rawDescData []byte
)

func file_io_user_user_proto_rawDescGZIP() []byte {
	file_io_user_user_proto_rawDescOnce.Do(func() {
		file_io_user_user_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_io_user_user_proto_rawDesc), len(file_io_user_user_proto_rawDesc)))
	})
	return file_io_user_user_proto_rawDescData
}

var file_io_user_user_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_io_user_user_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_io_user_user_proto_goTypes = []any{
	(OAuth2Provider)(0),                // 0: io.OAuth2Provider
	(ScannerMembershipPermissions)(0),  // 1: io.ScannerMembershipPermissions
	(ScannerCouponPermissions)(0),      // 2: io.ScannerCouponPermissions
	(DefaultMembershipScanAction)(0),   // 3: io.DefaultMembershipScanAction
	(DefaultCouponScanAction)(0),       // 4: io.DefaultCouponScanAction
	(PermissionScope)(0),               // 5: io.PermissionScope
	(TeamMemberStatus)(0),              // 6: io.TeamMemberStatus
	(*AuditLog)(nil),                   // 7: io.AuditLog
	(*AuditLogRequest)(nil),            // 8: io.AuditLogRequest
	(*NewUserResponse)(nil),            // 9: io.NewUserResponse
	(*NewUser)(nil),                    // 10: io.NewUser
	(*GetUserResponse)(nil),            // 11: io.GetUserResponse
	(*BillingMeta)(nil),                // 12: io.BillingMeta
	(*Credentials)(nil),                // 13: io.Credentials
	(*VerifyRequest)(nil),              // 14: io.VerifyRequest
	(*JWT)(nil),                        // 15: io.JWT
	(*PasswordResetInput)(nil),         // 16: io.PasswordResetInput
	(*Username)(nil),                   // 17: io.Username
	(*OAuth2AuthorizationRequest)(nil), // 18: io.OAuth2AuthorizationRequest
	(*ScannerConfiguration)(nil),       // 19: io.ScannerConfiguration
	(*Email)(nil),                      // 20: io.Email
	(*ConfirmEmailChangeInput)(nil),    // 21: io.ConfirmEmailChangeInput
	(*CompanyName)(nil),                // 22: io.CompanyName
	(*DeleteAccountRequest)(nil),       // 23: io.DeleteAccountRequest
	(*ProjectsList)(nil),               // 24: io.ProjectsList
	(*CertificatesList)(nil),           // 25: io.CertificatesList
	(*ProtocolList)(nil),               // 26: io.ProtocolList
	(*ResourcePermissions)(nil),        // 27: io.ResourcePermissions
	(*TeamMemberPermissions)(nil),      // 28: io.TeamMemberPermissions
	(*NewTeamMember)(nil),              // 29: io.NewTeamMember
	(*GetTeamMemberResponse)(nil),      // 30: io.GetTeamMemberResponse
	(*ListTeamMembersResponse)(nil),    // 31: io.ListTeamMembersResponse
	(*Recaptcha)(nil),                  // 32: io.Recaptcha
	(*timestamppb.Timestamp)(nil),      // 33: google.protobuf.Timestamp
	(UserType)(0),                      // 34: io.UserType
	(Authentication)(0),                // 35: io.Authentication
	(Channel)(0),                       // 36: io.Channel
	(*Address)(nil),                    // 37: io.Address
}
var file_io_user_user_proto_depIdxs = []int32{
	33, // 0: io.AuditLog.timestamp:type_name -> google.protobuf.Timestamp
	34, // 1: io.AuditLog.userType:type_name -> io.UserType
	35, // 2: io.AuditLog.authentication:type_name -> io.Authentication
	36, // 3: io.AuditLog.channel:type_name -> io.Channel
	33, // 4: io.AuditLogRequest.beforeTime:type_name -> google.protobuf.Timestamp
	33, // 5: io.NewUserResponse.expiresAt:type_name -> google.protobuf.Timestamp
	33, // 6: io.GetUserResponse.createdAt:type_name -> google.protobuf.Timestamp
	33, // 7: io.GetUserResponse.expiresAt:type_name -> google.protobuf.Timestamp
	37, // 8: io.BillingMeta.billingAddress:type_name -> io.Address
	0,  // 9: io.OAuth2AuthorizationRequest.provider:type_name -> io.OAuth2Provider
	1,  // 10: io.ScannerConfiguration.membershipPermissions:type_name -> io.ScannerMembershipPermissions
	2,  // 11: io.ScannerConfiguration.couponPermissions:type_name -> io.ScannerCouponPermissions
	3,  // 12: io.ScannerConfiguration.defaultMembershipAction:type_name -> io.DefaultMembershipScanAction
	4,  // 13: io.ScannerConfiguration.defaultCouponAction:type_name -> io.DefaultCouponScanAction
	24, // 14: io.ResourcePermissions.allowedProjects:type_name -> io.ProjectsList
	24, // 15: io.ResourcePermissions.disallowedProjects:type_name -> io.ProjectsList
	25, // 16: io.ResourcePermissions.allowedCertificates:type_name -> io.CertificatesList
	25, // 17: io.ResourcePermissions.disallowedCertificates:type_name -> io.CertificatesList
	26, // 18: io.ResourcePermissions.allowedPrograms:type_name -> io.ProtocolList
	26, // 19: io.ResourcePermissions.disallowedPrograms:type_name -> io.ProtocolList
	5,  // 20: io.TeamMemberPermissions.permissionScope:type_name -> io.PermissionScope
	6,  // 21: io.TeamMemberPermissions.status:type_name -> io.TeamMemberStatus
	27, // 22: io.TeamMemberPermissions.resourcePermissions:type_name -> io.ResourcePermissions
	33, // 23: io.TeamMemberPermissions.created:type_name -> google.protobuf.Timestamp
	33, // 24: io.TeamMemberPermissions.updated:type_name -> google.protobuf.Timestamp
	10, // 25: io.NewTeamMember.user:type_name -> io.NewUser
	28, // 26: io.NewTeamMember.permissions:type_name -> io.TeamMemberPermissions
	11, // 27: io.GetTeamMemberResponse.user:type_name -> io.GetUserResponse
	28, // 28: io.GetTeamMemberResponse.permissions:type_name -> io.TeamMemberPermissions
	6,  // 29: io.ListTeamMembersResponse.status:type_name -> io.TeamMemberStatus
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_io_user_user_proto_init() }
func file_io_user_user_proto_init() {
	if File_io_user_user_proto != nil {
		return
	}
	file_io_common_personal_proto_init()
	file_io_common_attributes_proto_init()
	file_io_user_user_proto_msgTypes[20].OneofWrappers = []any{
		(*ResourcePermissions_AllowedProjects)(nil),
		(*ResourcePermissions_DisallowedProjects)(nil),
		(*ResourcePermissions_AllowedCertificates)(nil),
		(*ResourcePermissions_DisallowedCertificates)(nil),
		(*ResourcePermissions_AllowedPrograms)(nil),
		(*ResourcePermissions_DisallowedPrograms)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_io_user_user_proto_rawDesc), len(file_io_user_user_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_io_user_user_proto_goTypes,
		DependencyIndexes: file_io_user_user_proto_depIdxs,
		EnumInfos:         file_io_user_user_proto_enumTypes,
		MessageInfos:      file_io_user_user_proto_msgTypes,
	}.Build()
	File_io_user_user_proto = out.File
	file_io_user_user_proto_goTypes = nil
	file_io_user_user_proto_depIdxs = nil
}
